diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/EventProcessor.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/EventProcessor.java
index 50116d8ec43ce9e0c8abf52d36b24239ed826c98..57daf39fc33b2b0dbb0ab45baf627ad38536c300 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/EventProcessor.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/EventProcessor.java
@@ -131,7 +131,6 @@ public class EventProcessor {
 
                         try {
                             invokeTask(nodeToMove.getSymbolicName(), machineInstance, event);
-                            event.setStatus(EventStatus.IN_PROGRESS);
                         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchFieldException | SecurityException e) {
                             logger.error("Error while Invoking the Task : ", e);
                             event.setStatus(EventStatus.FAILED);
@@ -188,7 +187,7 @@ public class EventProcessor {
 
                 try {
                     invokeTask(nodeToMove.getSymbolicName(), machineInstance, event);
-                    event.setStatus(EventStatus.IN_PROGRESS);
+                    
                 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | NoSuchFieldException | SecurityException e) {
                     e.printStackTrace();
                     event.setStatus(EventStatus.FAILED);
@@ -330,7 +329,7 @@ public class EventProcessor {
                         field.set(task, applicationContext.getBean(field.getType()));
                     }
                 }
-            }
+            }            
             TaskScheduler.getScheduler().schedule(task, retry);
         } catch (Exception ex) {
             logger.error(ex);
diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/TaskThread.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/TaskThread.java
index 967ce1e6bc0af90c982ade5d4357c730f267b799..ee61c2d6beadd9d75886b2502371d587c086fe10 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/TaskThread.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/core/TaskThread.java
@@ -3,12 +3,12 @@
  */
 package com.vmware.vrealize.lcm.automata.core;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import com.vmware.vrealize.lcm.automata.common.status.EventStatus;
 import com.vmware.vrealize.lcm.automata.gateway.model.Event;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
-import com.vmware.vrealize.lcm.util.json.JsonUtil;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 /**
  * @author Thangamani K (TK)
@@ -28,18 +28,21 @@ public class TaskThread implements Runnable {
     public void run() {
 
         Event event = task.getEvent();
+        event.setStatus(EventStatus.IN_PROGRESS);
+        task.getEventService().saveEvent(event);
         try {
             if (retry) {
                 task.retry();
             } else {
                 task.execute();
             }
-            event.setStatus(EventStatus.PROCESSED);
-            task.getEventService().saveEvent(event);
+
         } catch (Exception e) {
-            e.printStackTrace();
-            logger.warn(e);
+            logger.error("Exception while running task : ", e);
             task.injectEvent("Failed");
+        } finally {
+            event.setStatus(EventStatus.PROCESSED);
+            task.getEventService().saveEvent(event);
         }
     }
 }
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/repository/ScheduledEngineRequestRepository.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/repository/ScheduledEngineRequestRepository.java
index 32947211465e90def511c3b5dcce39c90e8073a8..45bcd8b6515bea53ee95a918f2464cbca173f772 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/repository/ScheduledEngineRequestRepository.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/repository/ScheduledEngineRequestRepository.java
@@ -10,4 +10,6 @@ import org.springframework.data.jpa.repository.JpaRepository;
  * @author Thangamani K (TK)
  */
 public interface ScheduledEngineRequestRepository  extends JpaRepository<ScheduledEngineRequest, String> {
+
+    public ScheduledEngineRequest findOneByTargetId(String targetId);
 }
diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestService.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestService.java
index 32f9f64e4e2feebde71d053db74e468903ea1fb3..8857e71390818e90a9d0c960bb60bbf677279773 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestService.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestService.java
@@ -12,4 +12,7 @@ public interface ScheduledRequestService {
 
     public void schedule(ScheduledEngineRequestDTO scheduledEngineRequestDTO);
 
+    public ScheduledEngineRequestDTO getScheduleRequestByRequestKey(String requestKey);
+
+    public Boolean deleteScheduleRequest(ScheduledEngineRequestDTO scheduledEngineRequestDTO);
 }
diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestServiceImpl.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestServiceImpl.java
index b5d2ac2ca3da0f9895cfd8586aa48221e425a44a..9ae762c7471c4c497995c5d556e1cffbaa97cf58 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestServiceImpl.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/gateway/service/ScheduledRequestServiceImpl.java
@@ -34,6 +34,23 @@ public class ScheduledRequestServiceImpl implements ScheduledRequestService {
         Status status = engineService.queueJob(suite);
         scheduledEngineRequestDTO.setTargetId(status.getIdentifier());
         scheduledEngineRequestRepository.save(DTOConvertor.convertScheduledEngineRequestToScheduledEngineRequestDTO(scheduledEngineRequestDTO));
+    }
+
+    @Override
+    public Boolean deleteScheduleRequest(ScheduledEngineRequestDTO engineScheduleRequest) {
+
+        try {
+            scheduledEngineRequestRepository.delete(DTOConvertor.convertScheduledEngineRequestToScheduledEngineRequestDTO(engineScheduleRequest));
+            return true;
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            return false;
+        }
+    }
 
+    @Override
+    public ScheduledEngineRequestDTO getScheduleRequestByRequestKey(String requestKey) {
+        return DTOConvertor.convertScheduledEngineRequestDTOToScheduledEngineRequest(scheduledEngineRequestRepository.findOneByTargetId(requestKey));
     }
 }
+
diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/util/DTOConvertor.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/util/DTOConvertor.java
index 835c74886488895301559a44cc012fb20ab35812..de320e9953d7bee68240e2df77e99a9bacc69528 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/util/DTOConvertor.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/automata/util/DTOConvertor.java
@@ -13,6 +13,8 @@ import com.vmware.vrealize.lcm.automata.common.dto.ResultDTO;
 import com.vmware.vrealize.lcm.automata.gateway.model.EngineMessage;
 import com.vmware.vrealize.lcm.automata.gateway.model.Result;
 import com.vmware.vrealize.lcm.automata.property.model.ConfigurationProperty;
+import com.vmware.vrealize.lcm.domain.StateMachineInvocationRequest;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
 
 /**
  * @author Thangamani K (TK)
@@ -43,10 +45,18 @@ public abstract class DTOConvertor {
         return engineMessage;
     }
 
-    public static ScheduledEngineRequest convertScheduledEngineRequestToScheduledEngineRequestDTO(ScheduledEngineRequestDTO scheduledEngineRequestDTO){
+    public static ScheduledEngineRequest convertScheduledEngineRequestToScheduledEngineRequestDTO(ScheduledEngineRequestDTO scheduledEngineRequestDTO) {
         ModelMapper mapper = new ModelMapper();
         ScheduledEngineRequest scheduledEngineRequest = mapper.map(scheduledEngineRequestDTO, ScheduledEngineRequest.class);
+        scheduledEngineRequest.setRequestData(JsonUtil.getPrettyJson(scheduledEngineRequestDTO.getRequest()));
         return scheduledEngineRequest;
     }
+
+    public static ScheduledEngineRequestDTO convertScheduledEngineRequestDTOToScheduledEngineRequest(ScheduledEngineRequest ScheduledEngineRequest) {
+        ModelMapper mapper = new ModelMapper();
+        ScheduledEngineRequestDTO scheduledEngineRequestDTO = mapper.map(ScheduledEngineRequest, ScheduledEngineRequestDTO.class);
+        scheduledEngineRequestDTO.setRequest(JsonUtil.jsonStringToObject(ScheduledEngineRequest.getRequestData(), StateMachineInvocationRequest.class));
+        return scheduledEngineRequestDTO;
+    }
 }
 
diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/Task.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/Task.java
index b9eb8a7d29b1e04ef089ecfd5e79c5f5530e8fde..77eef0d4481a9e816b8aff6bf78c1f680faf613a 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/Task.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/Task.java
@@ -178,6 +178,7 @@ public abstract class Task {
                 }
 
                 event.setEventArgument(JsonUtil.jsonObjectToString(parameterMap));
+               // event.setStatus(EventStatus.PROCESSED);
                 event = eventService.saveEvent(event);
                 saveResults(event.getVmid());
             } catch (SecurityException | IllegalArgumentException | IllegalAccessException e) {
@@ -312,7 +313,6 @@ public abstract class Task {
 
         } catch (SecurityException | IllegalArgumentException | IllegalAccessException e) {
             logger.error("Exception while injectFailedEvent : ", e);
-            e.printStackTrace();
         }
     }
 
diff --git a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/task/FinalTask.java b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/task/FinalTask.java
index 190a6e89069ab20a227836870f1a591de20c3aad..b56b2d35d49d830ed2aebd2f0a660d6b5aa18b54 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/task/FinalTask.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-core/src/main/java/com/vmware/vrealize/lcm/platform/automata/service/task/FinalTask.java
@@ -4,9 +4,11 @@
 package com.vmware.vrealize.lcm.platform.automata.service.task;
 
 
+import com.vmware.vrealize.lcm.automata.common.status.EventStatus;
 import com.vmware.vrealize.lcm.automata.common.status.StateMachineInstanceStatus;
 import com.vmware.vrealize.lcm.automata.common.status.StateMachineStatus;
 import com.vmware.vrealize.lcm.automata.gateway.model.EngineRequest;
+import com.vmware.vrealize.lcm.automata.gateway.model.Event;
 import com.vmware.vrealize.lcm.automata.gateway.service.EngineRequestService;
 import com.vmware.vrealize.lcm.automata.gateway.service.StateMachineInstanceService;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
@@ -41,6 +43,10 @@ public class FinalTask extends Task {
             stateMachineInstanceService.saveStateMachineInstance(machineInstance);
 
         }
+        
+        Event event = this.getEvent();
+        event.setStatus(EventStatus.PROCESSED);
+        this.getEventService().saveEvent(event);
 
         if (engineRequestService != null) {
             EngineRequest newMachineCanBeProcessed = engineRequestService.findByVmid(machineInstance.getRequestInitiator());
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vropsplugin/vmlcm-vropsplugin-core/src/main/java/com/vmware/vrealize/lcm/domain/EnvironmentHealth.java b/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/EnvironmentHealth.java
similarity index 98%
rename from vmlcm-engineservice/vmlcm-plugins/vmlcm-vropsplugin/vmlcm-vropsplugin-core/src/main/java/com/vmware/vrealize/lcm/domain/EnvironmentHealth.java
rename to vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/EnvironmentHealth.java
index 045f667f04cefdde196fd2ada6308be6543e037a..e724c3691322bc377bef67219824603d5162b5bd 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vropsplugin/vmlcm-vropsplugin-core/src/main/java/com/vmware/vrealize/lcm/domain/EnvironmentHealth.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/EnvironmentHealth.java
@@ -1,4 +1,4 @@
-package com.vmware.vrealize.lcm.domain;
+package com.vmware.vrealize.lcm.common;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/LcmProperties.java b/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/LcmProperties.java
index 74fd014366ecd77041fd92a21fe4e85468de0b6b..7e6e100d8d4d298d55872b48742e0322893aa855 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/LcmProperties.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/LcmProperties.java
@@ -96,6 +96,7 @@ public enum LcmProperties {
     LCM_SNMP_AUTHENTICATION_PRIVACY_TYPES("lcm.snmp.supported.auth.privacy.types"),
     LCM_PATCH_BASE_PATH("lcm.patch.base.path"),
     LCM_PATCH_EXTERNAL_REPO_PATH("lcm.patch.external.repo.path"),
+    LCM_PSPACK_EXTERNAL_DOWNLOAD_PATH("lcm.pspack.external.product.bundles.url"),
     LCM_PATCH_PRODUCT_JSON("lcm.patch.product.json"),
     LCM_WINDOWS_ISO_BASE_PATH("lcm.window.iso.base.path"),
     LCM_UPGRADE_NOTIFICATION_REDIRECT_URL("lcm.upgrade.notification.redirect.url"),
diff --git a/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/error/ErrorCode.java b/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/error/ErrorCode.java
index 0980bafaecdba6e48a82c517c8c0634ca214e3fa..ab8ed55e85eefabab0bf30a707d1ef0a33827b94 100644
--- a/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/error/ErrorCode.java
+++ b/vmlcm-engineservice/vmlcm-engineservice-legacycommon/src/main/java/com/vmware/vrealize/lcm/common/error/ErrorCode.java
@@ -339,7 +339,9 @@ public enum ErrorCode {
     ERR_MISSING_VERSION(16004,"err.patch.missing.productversion"),
     ERR_MISSING_PATCHID(16005,"err.patch.missing.patchid"),
     ERR_PATCH_INSTALL_FAILED(16006,"err.patch.install.failed"),
-    ERR_SYSTEM_UPGRADE_FAILED(16007, "err.upgrade.install.failed");
+    ERR_SYSTEM_UPGRADE_FAILED(16007, "err.upgrade.install.failed"),
+    ERR_PSPACK_INSTALL_FAILED(16008,"err.pspack.install.failed"),
+    ERR_PSPACK_REFRESH_FAILED(16009,"err.pspack.refresh.failed");
 
     private int errorCode;
     private String errorKey;
diff --git a/vmlcm-engineservice/vmlcm-plugins/pom.xml b/vmlcm-engineservice/vmlcm-plugins/pom.xml
index 1a2e6e58a491b028ef82dce2acda738dfe139ca1..e28607f4d60962e8c844e02492347c4d1cc977a2 100644
--- a/vmlcm-engineservice/vmlcm-plugins/pom.xml
+++ b/vmlcm-engineservice/vmlcm-plugins/pom.xml
@@ -38,7 +38,7 @@
         <module>vmlcm-licensingplugin</module>
         <module>vmlcm-patchplugin</module>
         <module>vmlcm-migrationplugin</module>
-		<!--<module>vmlcm-notificationplugin</module>-->
+		<module>vmlcm-notificationplugin</module>
         <!--module>vmlcm-esrsplugin</module-->
         <!--module>vmlcm-engineservice-gui</module-->
 
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/pom.xml b/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/pom.xml
index 22f68a0e1569e14bbac09152dd5f52a1c744eead..29897958b01323a71e73b87a7b5493c0e65cea1e 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/pom.xml
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/pom.xml
@@ -34,6 +34,11 @@
 			<artifactId>vmlcm-engineservice-core</artifactId>
 			<version>${project.version}</version>
 		</dependency>
+		<dependency>
+			<groupId>com.vmware.vrealize.lcm.services</groupId>
+			<artifactId>vmlcm-engineservice-legacycommon</artifactId>
+			<version>${project.version}</version>
+		</dependency>
 		<dependency>
 			<groupId>com.vmware.vrealize.lcm.services</groupId>
 			<artifactId>vmlcm-locker-common</artifactId>
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/src/main/java/com/vmware/vrealize/lcm/drivers/commonplugin/task/inventory/EnvironmentHealthInventoryUpdateTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/src/main/java/com/vmware/vrealize/lcm/drivers/commonplugin/task/inventory/EnvironmentHealthInventoryUpdateTask.java
index e38b0c023e6d99bec2a3d64fb13b8ba41f158eb2..055e98a17770275f39323c3dde87bad32f3fb49f 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/src/main/java/com/vmware/vrealize/lcm/drivers/commonplugin/task/inventory/EnvironmentHealthInventoryUpdateTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/src/main/java/com/vmware/vrealize/lcm/drivers/commonplugin/task/inventory/EnvironmentHealthInventoryUpdateTask.java
@@ -12,12 +12,12 @@ import org.apache.logging.log4j.Logger;
 
 import com.google.common.base.Strings;
 import com.vmware.vrealize.lcm.automata.gateway.model.Result;
+import com.vmware.vrealize.lcm.common.EnvironmentHealth;
 import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
 import com.vmware.vrealize.lcm.domain.ProductSpecification;
 import com.vmware.vrealize.lcm.lcops.common.dto.EnvironmentDTO;
 import com.vmware.vrealize.lcm.lcops.common.dto.request.EnvironmentRequestDTO;
 import com.vmware.vrealize.lcm.lcops.controller.EnvironmentController;
-import com.vmware.vrealize.lcm.locker.controller.LockerReferenceController;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
@@ -39,8 +39,9 @@ public class EnvironmentHealthInventoryUpdateTask extends Task {
     @Inject
     private EnvironmentController environmentController;
 
-    @Inject
-    private LockerReferenceController lockerReferenceController;
+    @In
+    @Out
+    private EnvironmentHealth environmentHealth;
 
     @Override
     public void execute() {
@@ -51,23 +52,13 @@ public class EnvironmentHealthInventoryUpdateTask extends Task {
             }
             Map<String, String> properties = componentSpec.getComponent().getProperties();
             String environmentId = properties.get("environmentId");
-            String healthData = "";
-
-            List<Result> results = this.getResults();
-            if (results != null && results.size() > 0) {
-                Optional<Result> healthResult = results.stream().filter(res -> res.getResultKey().equalsIgnoreCase("health")).findFirst();
-                if (healthResult.isPresent()) {
-                    healthData = healthResult.get().getResultText();
-                }
-            }
-
-            logger.info("healthData : " + healthData);
+            logger.info("healthData : " + JsonUtil.getPrettyJson(environmentHealth));
             logger.info("environmentId : " + environmentId);
             if (!Strings.isNullOrEmpty(environmentId)) {
                 EnvironmentDTO environmentDTO = environmentController.getEnvironmentDataFromId(environmentId).getBody();
                 if (environmentDTO != null) {
                     EnvironmentRequestDTO environmentRequestDTO = JsonUtil.jsonStringToObject(environmentDTO.getEnvironmentData(), EnvironmentRequestDTO.class);
-                    environmentRequestDTO.setEnvironmentHealth(healthData);
+                    environmentRequestDTO.setEnvironmentHealth(JsonUtil.getPrettyJson(environmentHealth));
                     environmentDTO.setEnvironmentData(JsonUtil.getPrettyJson(environmentRequestDTO));
                     environmentController.updateEnvironment(environmentDTO);
                 }
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/src/main/java/com/vmware/vrealize/lcm/drivers/commonplugin/task/inventory/EnvironmentHealthScheduleTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/src/main/java/com/vmware/vrealize/lcm/drivers/commonplugin/task/inventory/EnvironmentHealthScheduleTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d7d79c36441040c59ee139b2ce67fd016268ce9
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-commonplugin/vmlcm-commonplugin-core/src/main/java/com/vmware/vrealize/lcm/drivers/commonplugin/task/inventory/EnvironmentHealthScheduleTask.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2019 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.drivers.commonplugin.task.inventory;
+
+import java.util.Map;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import com.google.common.base.Strings;
+import com.vmware.vrealize.lcm.automata.common.dto.ScheduledEngineRequestDTO;
+import com.vmware.vrealize.lcm.automata.gateway.service.ScheduledRequestService;
+import com.vmware.vrealize.lcm.domain.Component;
+import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
+import com.vmware.vrealize.lcm.domain.ProductSpecification;
+import com.vmware.vrealize.lcm.domain.StateMachineInvocationRequest;
+import com.vmware.vrealize.lcm.lcops.controller.EnvironmentController;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+
+public class EnvironmentHealthScheduleTask extends Task {
+
+    private static final Logger logger = LogManager.getLogger(EnvironmentHealthScheduleTask.class);
+
+    @In
+    @Out
+    public ProductSpecification productSpec;
+
+    @In
+    @Out
+    public ComponentDeploymentSpecification componentSpec = null;
+
+    @Inject
+    private EnvironmentController environmentController;
+
+    @Inject
+    private ScheduledRequestService scheduledRequestService;
+
+    @Override
+    public void execute() {
+
+        try {
+            if (componentSpec == null) {
+                componentSpec = productSpec.getComponents().get(0);
+            }
+            Map<String, String> properties = componentSpec.getComponent().getProperties();
+            String environmentId = properties.get("environmentId");
+            logger.info("environmentId : " + environmentId);
+
+            if (!Strings.isNullOrEmpty(environmentId)) {
+                StateMachineInvocationRequest engineJobSpec = createProductSpecification(properties, "environmentHealth", 0);
+                ScheduledEngineRequestDTO scheduledEngineRequestDTO = new ScheduledEngineRequestDTO();
+                scheduledEngineRequestDTO.setNextExecution(6000L);
+                scheduledEngineRequestDTO.setTargetId(environmentId);
+                scheduledEngineRequestDTO.setRequest(engineJobSpec);
+                scheduledRequestService.schedule(scheduledEngineRequestDTO);
+            }
+            injectEvent("OnEnvironmentHealthScheduleCompleted");
+        } catch (Exception ex) {
+            logger.error("Exception occured while scheduling the Environment health : ", ex);
+            injectEvent("OnEnvironmentHealthScheduleCompleted");
+        }
+    }
+
+    public static StateMachineInvocationRequest createProductSpecification(Map<String, String> componentPropertiesMap, String SymbolicName, long priority) {
+        StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
+
+        ProductSpecification pSpec = new ProductSpecification();
+        ComponentDeploymentSpecification nodeComponentSpec = new ComponentDeploymentSpecification();
+        pSpec.setSymbolicName(SymbolicName);
+        pSpec.setPriority(priority);
+        pSpec.getComponents().add(nodeComponentSpec);
+        Component component = new Component();
+        nodeComponentSpec.setComponent(component);
+        nodeComponentSpec.setPriority(priority);
+        component.setProperties(componentPropertiesMap);
+        component.setSymbolicName(SymbolicName);
+        nodeComponentSpec.setComponent(component);
+        engineJobSpec.addProduct(pSpec);
+        return engineJobSpec;
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-licensingplugin/vmlcm-licensingplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/licensing/task/ImportLicenseTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-licensingplugin/vmlcm-licensingplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/licensing/task/ImportLicenseTask.java
index 460332cbc2e93f3a44eb4dc161f232009bbacef5..4b94eaecf72cdbb9f15ed4db0bc4fa664aa5ab6a 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-licensingplugin/vmlcm-licensingplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/licensing/task/ImportLicenseTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-licensingplugin/vmlcm-licensingplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/licensing/task/ImportLicenseTask.java
@@ -46,6 +46,18 @@ public class ImportLicenseTask extends Task {
     @Out
     ProductSpecification productSpec;
 
+    @In
+    @Out
+    private String action;
+
+    @In
+    @Out
+    private String importedProductVersion;
+
+    @In
+    @Out
+    private String importedProductName;
+
     @In
     @Out
     private ComponentDeploymentSpecification componentSpec;
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/EnvironmentHealthNotificationDTO.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/EnvironmentHealthNotificationDTO.java
new file mode 100644
index 0000000000000000000000000000000000000000..563b15a865ed14f1f75891c24a2f46b153a0542d
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/EnvironmentHealthNotificationDTO.java
@@ -0,0 +1,19 @@
+/*
+  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
+*/
+
+package com.vmware.vrealize.lcm.common.notification;
+
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+
+public class EnvironmentHealthNotificationDTO extends NotificationDTO {
+
+    @Override
+    public String getNotificationKey() {
+
+        return String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, this.getProperties().get(NotificationConstants.ENVIRONMENT_ID), "BadHealthState",
+                NotificationConstants.ENVIRONMENT_HEALTH_NOTIFICATION_SYMBOLIC_LINK);
+    }
+
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMPSPackNotificationDTO.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMPSPackNotificationDTO.java
new file mode 100644
index 0000000000000000000000000000000000000000..a9f1ab59def5685b3da8fc30adb3fd41dcf433ba
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMPSPackNotificationDTO.java
@@ -0,0 +1,23 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.common.notification;
+
+import com.vmware.vrealize.lcm.common.LcmProperties;
+import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class LCMPSPackNotificationDTO extends NotificationDTO {
+    @Override
+    public String getNotificationKey() {
+
+        return String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, NotificationConstants.LCM, NotificationConstants.LCM,
+                NotificationConstants.LCM_PSPACK_NOTIFICATION_SYMBOLIC_LINK);
+    }
+
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMPatchNotificationDTO.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMPatchNotificationDTO.java
new file mode 100644
index 0000000000000000000000000000000000000000..905dfc5f4e698c5c4ba698b3c4c4ea43f55418f2
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMPatchNotificationDTO.java
@@ -0,0 +1,30 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.common.notification;
+
+import com.vmware.vrealize.lcm.common.LcmProperties;
+import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class LCMPatchNotificationDTO extends NotificationDTO {
+
+    @Override
+    public String getRedirectUrl() {
+
+        return LcmSystemPropertiesHelper.getInstance().getLcmProperty(LcmProperties.LCM_PATCH_NOTIFICATION_REDIRECT_URL);
+    }
+
+    @Override
+    public String getNotificationKey() {
+
+        return String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, NotificationConstants.LCM, NotificationConstants.LCM,
+                NotificationConstants.LCM_PATCHING_NOTIFICATION_SYMBOLIC_LINK);
+    }
+
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMUpgradeNotificationDTO.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMUpgradeNotificationDTO.java
new file mode 100644
index 0000000000000000000000000000000000000000..ef5f8b8c2159ffa57ca42fd476e5a23d55cefac2
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/LCMUpgradeNotificationDTO.java
@@ -0,0 +1,22 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.common.notification;
+
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class LCMUpgradeNotificationDTO extends NotificationDTO {
+
+    @Override
+    public String getNotificationKey() {
+
+        return String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, NotificationConstants.LCM, NotificationConstants.LCM,
+                NotificationConstants.LCM_UPGRADE_NOTIFICATION_SYMBOLIC_LINK);
+    }
+
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductHealthNotificationDTO.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductHealthNotificationDTO.java
new file mode 100644
index 0000000000000000000000000000000000000000..a4f2dfeac5ab8ea9e7086df10be08ff553729f71
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductHealthNotificationDTO.java
@@ -0,0 +1,22 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.common.notification;
+
+import com.vmware.vrealize.lcm.common.LcmProperties;
+import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class ProductHealthNotificationDTO extends NotificationDTO {
+
+    @Override
+    public String getNotificationKey() {
+        return String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, this.getProperties().get(NotificationConstants.ENVIRONMENT_ID),
+                this.getProperties().get(NotificationConstants.PRODUCT_NAME), NotificationConstants.PRODUCT_HEALTH_NOTIFICATION_SYMBOLIC_LINK);
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductPatchNotificationDTO.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductPatchNotificationDTO.java
new file mode 100644
index 0000000000000000000000000000000000000000..b02f14980eaa1c20b4bdf80d4966ee6fb99404a4
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductPatchNotificationDTO.java
@@ -0,0 +1,20 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.common.notification;
+
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class ProductPatchNotificationDTO extends NotificationDTO {
+
+    @Override
+    public String getNotificationKey() {
+        return String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, this.getProperties().get(NotificationConstants.ENVIRONMENT_ID),
+                this.getProperties().get(NotificationConstants.PRODUCT_NAME), NotificationConstants.PRODUCT_PATCHING_NOTIFICATION_SYMBOLIC_LINK);
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductUpgradeNotificationDTO.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductUpgradeNotificationDTO.java
new file mode 100644
index 0000000000000000000000000000000000000000..04be047dc06d377fb6fa4cc7e5882fcb0c16bd02
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/ProductUpgradeNotificationDTO.java
@@ -0,0 +1,21 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.common.notification;
+
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class ProductUpgradeNotificationDTO extends NotificationDTO {
+
+    @Override
+    public String getNotificationKey() {
+        return String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, this.getProperties().get(NotificationConstants.ENVIRONMENT_ID),
+                this.getProperties().get(NotificationConstants.PRODUCT_NAME), NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK);
+    }
+
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/pom.xml b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/pom.xml
index a0ae4921936179aa1bd3150700bcb98794596e02..d60c56782daf27cd00ff2310a5ae4b22f6f9c795 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/pom.xml
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/pom.xml
@@ -25,6 +25,11 @@
 			<artifactId>vmlcm-notificationplugin-driver</artifactId>
 			<version>${project.version}</version>
 		</dependency>
+		<dependency>
+			<groupId>com.vmware.vrealize.lcm.services</groupId>
+			<artifactId>vmlcm-engineservice-core</artifactId>
+			<version>${project.version}</version>
+		</dependency>
 		<dependency>
 			<groupId>org.mock-server</groupId>
 			<artifactId>mockserver-netty</artifactId>
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/util/NotificationUtil.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/common/notification/util/NotificationUtil.java
similarity index 62%
rename from vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/util/NotificationUtil.java
rename to vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/common/notification/util/NotificationUtil.java
index 759fb84c76a4401821a481929bc5cefd1144adf2..176942627298c816652aa598563807c6e395ac0d 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-common/src/main/java/com/vmware/vrealize/lcm/common/notification/util/NotificationUtil.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/common/notification/util/NotificationUtil.java
@@ -14,14 +14,18 @@ import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import com.vmware.vrealize.lcm.common.LcmProperties;
-import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
 import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
 import com.vmware.vrealize.lcm.domain.ProductSpecification;
 import com.vmware.vrealize.lcm.domain.StateMachineInvocationRequest;
+import com.vmware.vrealize.lcm.lcops.common.SettingConstants;
+import com.vmware.vrealize.lcm.lcops.common.dto.settings.ProxyConfigurationDTO;
+import com.vmware.vrealize.lcm.lcops.controller.SettingsController;
+import com.vmware.vrealize.lcm.plugin.core.notification.tasks.ErrorCode;
 import com.vmware.vrealize.lcm.util.ResponseType;
 import com.vmware.vrealize.lcm.util.RestHelper;
 import com.vmware.vrealize.lcm.util.json.JsonUtil;
+import com.vmware.vrealize.lcm.util.model.ProxyConfiguration;
 
 public class NotificationUtil {
 
@@ -48,14 +52,16 @@ public class NotificationUtil {
         return spec;
     }
 
-    public static ResponseType getLCMPatchingMetaData(String lcmCurrentVersion) {
+    public static ResponseType getLCMPatchingMetaData(String lcmCurrentVersion, ConfigurationPropertyService configurationPropertyService,
+            SettingsController settingsController) {
 
-        String productPatchDownloadUrl = LcmSystemPropertiesHelper.getInstance().getLcmProperty(LcmProperties.LCM_PATCH_EXTERNAL_REPO_PATH);
-        String productFile = "";
+        String productPatchDownloadUrl = configurationPropertyService.getValueFromKey("lcm.patch.external.repo.path");
+        String productFile = "/patchProductRegistry.json";
 
         productPatchDownloadUrl = productPatchDownloadUrl + LCM_PRODUCT + "/" + lcmCurrentVersion + productFile;
         try {
-            ResponseType response = RestHelper.readRemoteData(null, productPatchDownloadUrl, GET, null, null, false, null, null, null);
+            ResponseType response = RestHelper.readRemoteData(getProxyConfigurationFromDTO(settingsController), productPatchDownloadUrl, GET, null, null, false,
+                    null, null, null);
 
             if (response != null && response.getStatusCode() == 200) {
                 logger.info("LCM Patch Data fetched successfully : " + response.getStatusCode());
@@ -66,16 +72,31 @@ public class NotificationUtil {
             }
 
         } catch (UnknownHostException unKnownHostEx) {
-            //logger.error(ErrorUtils.getInstance().getErrorMessage(ErrorCode.ERR_LCM_POLICY_PATCH_FAILED), unKnownHostEx);
+            logger.error(ErrorCode.ERR_CONNECTING_POLICY_REFRESH, unKnownHostEx);
         } catch (org.apache.http.conn.ConnectTimeoutException | java.net.ConnectException connTimeoutExc) {
-            //logger.error(ErrorUtils.getInstance().getErrorMessage(ErrorCode.ERR_TIMEOUT_CONNECTING_POLICY_REFRESH), connTimeoutExc);
+            logger.error(ErrorCode.ERR_TIMEOUT_CONNECTING_POLICY_REFRESH, connTimeoutExc);
         } catch (IOException e) {
-            //logger.error(ErrorUtils.getInstance().getErrorMessage(ErrorCode.ERR_LCM_POLICY_PATCH_FAILED), e);
+            //logger.error(ErrorCode.ERR_LCM_POLICY_PATCH_FAILED, e);
         }
 
         return null;
     }
 
+    private static ProxyConfiguration getProxyConfigurationFromDTO(SettingsController settingsController) {
+        Object proxyData = settingsController.getSettingsData(SettingConstants.LCM_PROXY_SETTINGS, null).getBody();
+        ProxyConfigurationDTO proxyConfigurationDTO = JsonUtil.jsonStringToObject(JsonUtil.jsonObjectToString(proxyData), ProxyConfigurationDTO.class);
+        if (proxyConfigurationDTO == null) {
+            return null;
+        }
+        ProxyConfiguration proxyConfiguration = new ProxyConfiguration();
+        proxyConfiguration.setIsProxyEnabled("" + proxyConfigurationDTO.isProxyEnabled());
+        proxyConfiguration.setProxyHost(proxyConfigurationDTO.getHostName());
+        proxyConfiguration.setProxyUserName(proxyConfigurationDTO.getUserName());
+        proxyConfiguration.setProxyPassword(proxyConfigurationDTO.getPassword());
+        proxyConfiguration.setProxyPort(proxyConfigurationDTO.getPort());
+        return proxyConfiguration;
+    }
+
     public static HashMap<String, String> getLCMInfoFromManifest() {
 
         HashMap<String, String> result = new HashMap<String, String>();
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/DeleteNotificationsTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/DeleteNotificationsTask.java
index 555b535401e28a027c0c986552d02c1d6e94eec1..20775b0522cf5faff7a6b68b8bd3b80d84d7219e 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/DeleteNotificationsTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/DeleteNotificationsTask.java
@@ -13,10 +13,9 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import com.vmware.vrealize.lcm.automata.common.dto.ScheduledEngineRequestDTO;
-import com.vmware.vrealize.lcm.platform.automata.EngineScheduleRequestDTO;
+import com.vmware.vrealize.lcm.automata.gateway.service.ScheduledRequestService;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
-import com.vmware.vrealize.lcm.platform.automata.service.EngineScheduleRequestService;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
 import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
 import com.vmware.vrealize.lcm.shell.notification.service.NotificationService;
@@ -34,10 +33,13 @@ public class DeleteNotificationsTask extends Task {
 
     @In
     private ScheduledEngineRequestDTO engineScheduleRequestDTO;
+
     @In
     String engineScheduleRequestDTOList;
+
     @Inject
-    private EngineScheduleRequestService engineScheduleRequestService;
+    private ScheduledRequestService engineScheduleRequestService;
+
     @Inject
     NotificationService notificationService;
 
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/EnvironmentHealthNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/EnvironmentHealthNotificationTask.java
index c391f4e82d4de9239c901e8423b6f1f5c2fb09f3..d600910820736281df0692e60548fef08273eb0e 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/EnvironmentHealthNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/EnvironmentHealthNotificationTask.java
@@ -11,15 +11,17 @@ import org.apache.commons.lang.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
+import com.vmware.vrealize.lcm.common.EnvironmentHealth;
+import com.vmware.vrealize.lcm.common.LcmProperties;
 import com.vmware.vrealize.lcm.common.notification.EnvironmentHealthNotificationDTO;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationNameType;
-import com.vmware.vrealize.lcm.domain.EnvironmentHealth;
-import com.vmware.vrealize.lcm.domain.EnvironmentHealth.ProductHealth;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
 import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
 import com.vmware.vrealize.lcm.shell.common.notification.NotificationLevel;
 import com.vmware.vrealize.lcm.shell.notification.service.NotificationService;
@@ -29,7 +31,6 @@ public class EnvironmentHealthNotificationTask extends Task {
     private static final Logger logger = LogManager.getLogger(EnvironmentHealthNotificationTask.class);
 
     private static final String ENVIRONMENT_ID = "environmentId";
-    private NotificationCommonConstants notificationConstants;
 
     @In
     private EnvironmentHealth environmentHealth;
@@ -40,6 +41,9 @@ public class EnvironmentHealthNotificationTask extends Task {
     @Inject
     private NotificationService notificationService;
 
+    @Inject
+    private ConfigurationPropertyService configurationPropertyService;
+
     public EnvironmentHealthNotificationTask() {
 
     }
@@ -64,16 +68,13 @@ public class EnvironmentHealthNotificationTask extends Task {
                 String environmentId = environmentHealth.getEnvironmentId();
                 propertiesMap.put(ENVIRONMENT_ID, environmentId);
 
-                if (StringUtils.equalsIgnoreCase(environmentHealth.getHealthCheckErrorCode(),
-                        NotificationCommonConstants.VROPS_CONNECTION_ERROR_CODE)
-                        || StringUtils.equalsIgnoreCase(environmentHealth.getHealthCheckErrorCode(),
-                                NotificationCommonConstants.BACKEND_ERROR_CODE)) {
+                if (StringUtils.equalsIgnoreCase(environmentHealth.getHealthCheckErrorCode(), NotificationCommonConstants.VROPS_CONNECTION_ERROR_CODE)
+                        || StringUtils.equalsIgnoreCase(environmentHealth.getHealthCheckErrorCode(), NotificationCommonConstants.BACKEND_ERROR_CODE)) {
 
                     environmentBadHealth = true;
                     message.append("Health of environment ").append(environmentId).append(" is RED");
 
-                    if (StringUtils.equalsIgnoreCase(environmentHealth.getHealthCheckErrorCode(),
-                            NotificationCommonConstants.VROPS_CONNECTION_ERROR_CODE)) {
+                    if (StringUtils.equalsIgnoreCase(environmentHealth.getHealthCheckErrorCode(), NotificationCommonConstants.VROPS_CONNECTION_ERROR_CODE)) {
 
                         message.append(" : Unable to connect to vRealize Operations");
                     } else {
@@ -84,14 +85,13 @@ public class EnvironmentHealthNotificationTask extends Task {
 
                     StringBuilder productHealthMessage = new StringBuilder();
 
-                    for (ProductHealth ph : environmentHealth.getProductHealthList()) {
+                    for (EnvironmentHealth.ProductHealth ph : environmentHealth.getProductHealthList()) {
 
-                        logger.info("\n HEALTH of PROD " + ph.getLcmProductName() + " in ENV "
-                                + environmentHealth.getEnvironmentId() + " : " + ph.getProductHealthColor());
+                        logger.info("\n HEALTH of PROD " + ph.getLcmProductName() + " in ENV " + environmentHealth.getEnvironmentId() + " : "
+                                + ph.getProductHealthColor());
                         if (StringUtils.equalsIgnoreCase(ph.getProductHealthColor(), "RED")) {
                             environmentBadHealth = true;
-                            productHealthMessage
-                                    .append(NotificationCommonConstants.PRODUCT_NAMES.get(ph.getLcmProductName()) + " ,");
+                            productHealthMessage.append(NotificationCommonConstants.PRODUCT_NAMES.get(ph.getLcmProductName()) + " ,");
                         }
                     }
 
@@ -100,18 +100,16 @@ public class EnvironmentHealthNotificationTask extends Task {
                         productHealthMessage.deleteCharAt(productHealthMessage.length() - 1);
                         propertiesMap.put("products in bad health", productHealthMessage.toString());
 
-                        message.append("Health of ").append(productHealthMessage).append(" in environment ")
-                                .append(environmentId).append(" is RED");
+                        message.append("Health of ").append(productHealthMessage).append(" in environment ").append(environmentId).append(" is RED");
                     } else {
-                       if(StringUtils.isNotBlank(environmentId)) {
-                          String notificationKey = String.format(notificationConstants.NOTIFICATION_KEY_FORMAT,
-                                environmentId, "BadHealthState",
-                                notificationConstants.ENVIRONMENT_HEALTH_NOTIFICATION_SYMBOLIC_LINK);
-                          NotificationDTO notificationDTO = notificationService.getNotificationByKey(notificationKey);
-                          if(notificationDTO != null) {
-                             notificationService.deleteByVmid(notificationDTO.getVmid());
-                          }
-                       }
+                        if (StringUtils.isNotBlank(environmentId)) {
+                            String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, environmentId, "BadHealthState",
+                                    NotificationConstants.ENVIRONMENT_HEALTH_NOTIFICATION_SYMBOLIC_LINK);
+                            NotificationDTO notificationDTO = notificationService.getNotificationByKey(notificationKey);
+                            if (notificationDTO != null) {
+                                notificationService.deleteByVmid(notificationDTO.getVmid());
+                            }
+                        }
                     }
                 }
 
@@ -125,7 +123,14 @@ public class EnvironmentHealthNotificationTask extends Task {
 
                     notificationDTO.setProperties(propertiesMap);
 
-                    notificationDTO.setRedirectUrl(notificationDTO.getRedirectUrl());
+                    String redirectUrl = "";
+                    if (propertiesMap != null) {
+                        redirectUrl = String.format(
+                                configurationPropertyService.getValueFromKey(LcmProperties.ENVIRONMENT_HEALTH_NOTIFICATION_REDIRECT_URL.getPropertyKey()),
+                                propertiesMap.get(NotificationConstants.ENVIRONMENT_ID));
+                    }
+
+                    notificationDTO.setRedirectUrl(redirectUrl);
                     notificationDTO.setNotificationKey(notificationDTO.getNotificationKey());
                 } else {
                     logger.info("Environment Health is GREEN for environment with id : " + environmentId);
@@ -140,7 +145,5 @@ public class EnvironmentHealthNotificationTask extends Task {
         } finally {
             injectEvent(NotificationCommonConstants.ENVIRONMENT_HEALTH_TASK_SUCCESS);
         }
-
     }
-
 }
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ErrorCode.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ErrorCode.java
new file mode 100644
index 0000000000000000000000000000000000000000..cab42402937001c049b14f82269cb9f3b89322bd
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ErrorCode.java
@@ -0,0 +1,7 @@
+package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
+
+public class ErrorCode {
+
+    public static final String ERR_CONNECTING_POLICY_REFRESH = "err.connecting.policyrefresh";
+    public static final String ERR_TIMEOUT_CONNECTING_POLICY_REFRESH = "err.timeout.connecting.policyrefresh";
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPSPackNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPSPackNotificationTask.java
index 6d3f93334f0014a63bd510fa2a664f13b1cd4710..c720e62f1d7406a2c6f424194253aad44e6518c2 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPSPackNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPSPackNotificationTask.java
@@ -4,95 +4,77 @@
 
 package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.commons.lang3.StringUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.springframework.util.CollectionUtils;
-
-import com.vmware.vrealize.lcm.common.exception.EngineException;
-import com.vmware.vrealize.lcm.common.notification.LCMPSPackNotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationLevel;
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationErrorConstants;
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationNameType;
-import com.vmware.vrealize.lcm.platform.automata.annotation.In;
-import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
-import com.vmware.vrealize.lcm.util.policy.LCMPolicyRefreshPackUtil;
-import com.vmware.vrealize.lcm.util.policy.documents.PolicyProductDetails;
-import com.vmware.vrealize.lcm.util.policy.documents.ProductVersionDetails;
 
 public class LCMPSPackNotificationTask extends Task {
 
+    // TODO : Need to fix this
+    @Override
+    public void execute() {
+
+    }
+    /*
     private static final Logger logger = LogManager.getLogger(LCMPSPackNotificationTask.class);
     private static final String PSPACK_VERSION = "pspack-version";
     private static final String SUPPORTED_VERSIONS = "supported-versions";
     private static final String REDIRECT_LINK = "redirect-link";
     private static final String PRODUCT_NAME = "productName";
-
+    
     @Out
     private NotificationDTO notificationDTO;
-
+    
     @In
     private String productName;
-
+    
     public LCMPSPackNotificationTask() {
-
+    
     }
-
+    
     boolean supportPacksAvailable = false;
     StringBuilder policyLongDescription = new StringBuilder();
-
+    
     @Override
     public void execute() {
-
+    
         try {
             logger.info("Starting :: LCM PSPack NotificationTask");
-
+    
             // Get the policyProduct details from the remote url utility and
             // remove
             // the current Policy
             List<PolicyProductDetails> policyProductDetails = LCMPolicyRefreshPackUtil.getPolicyProductDetails();
-
+    
             if (policyProductDetails != null) {
                 PolicyProductDetails currentPolicy = new PolicyProductDetails();
                 currentPolicy = getCurrentPolicy(policyProductDetails);
                 policyProductDetails.remove(currentPolicy);
-
+    
                 // After removing current policy there are no more support packs
                 if (!policyProductDetails.isEmpty()) {
-
+    
                     // productId , List<versions> for current policy products.
                     Map<String, List<String>> currentVersionMap = prepareMaps(currentPolicy);
-
+    
                     // PolicyId , {productId[versions], productId[versions] EG:
                     // (1.3.4
                     // vra[7.4],vrbc[7.1,7.2])
                     Map<String, String> policyUpdatesMap = getPolicyProductSupportPacks(policyProductDetails,
                             currentVersionMap);
-
+    
                     if (supportPacksAvailable) { // support packs available and
                                                  // there
                                                  // are no new versions.
                         notificationDTO = constructNotificationDTOObject(policyUpdatesMap);
-
+    
                     } else {
                         logger.info("No product support packs are available");
                     }
-
+    
                 } else {
                     logger.info("No product support packs are available");
                 }
             }
-
+    
             injectEvent(NotificationCommonConstants.LCM_PSPACK_TASK_SUCCESS);
         } catch (Exception e) {
             logger.error("Exception caught while executing LCMPSPack support check Notification Task. Cause : ", e);
@@ -100,20 +82,20 @@ public class LCMPSPackNotificationTask extends Task {
                     new EngineException("Exception caught while executing LCMPSPack support check Notification Task"));
         }
     }
-
+    
     private NotificationDTO constructNotificationDTOObject(Map<String, String> policyUpdatesMap) {
-
+    
         StringBuilder productSupportPackMessage = new StringBuilder(
                 "vRealize Suite Lifecycle Manager product support pack : \n");
         notificationDTO = new LCMPSPackNotificationDTO();
         notificationDTO.setName(NotificationNameType.LCM_PSPACK.toString());
-
+    
         notificationDTO.setType(notificationDTO.getClass().getName());
         notificationDTO.setLevel(NotificationLevel.INFO);
-
+    
         List<String> policySupportPacks = new ArrayList<String>();
         StringBuilder supportPacks = new StringBuilder();
-
+    
         Map<String, String> propertiesMap = new HashMap<String, String>();
         for (Map.Entry<String, String> entry : policyUpdatesMap.entrySet()) {
             policySupportPacks.add(entry.getKey());
@@ -132,49 +114,49 @@ public class LCMPSPackNotificationTask extends Task {
         }
         notificationDTO.setShortDescription(description.toString());
         notificationDTO.setProperties(propertiesMap);
-
+    
         policyLongDescription.deleteCharAt(policyLongDescription.length() - 1);
         productSupportPackMessage.append(policyLongDescription);
         notificationDTO.setDescription(productSupportPackMessage.toString());
-
+    
         notificationDTO.setRedirectUrl(notificationDTO.getRedirectUrl());
         notificationDTO.setNotificationKey(notificationDTO.getNotificationKey());
-
+    
         return notificationDTO;
-
+    
     }
-
+    
     private Map<String, String> getPolicyProductSupportPacks(List<PolicyProductDetails> policyProductDetails,
             Map<String, List<String>> currentVersionMap) {
-
+    
         boolean productLongDescriptionAvailable = false;
-
+    
         Map<String, String> policyUpdatesMap = new HashMap<String, String>();
-
+    
         for (PolicyProductDetails newPolicy : policyProductDetails) {
-
+    
             StringBuilder productLongDescription = new StringBuilder();
-
+    
             Map<String, List<String>> newVersionMap = prepareMaps(newPolicy);
-
+    
             for (String productId : newVersionMap.keySet()) {
-
+    
                 // Removing support for vvd.
                 if (StringUtils.equalsIgnoreCase("vvd", productId)) {
                     continue;
                 }
-
+    
                 Set<String> versionSet = new HashSet<String>(newVersionMap.get(productId));
                 if(!CollectionUtils.isEmpty(currentVersionMap.get(productId))) {
                    Set<String> currentSet = new HashSet<String>(currentVersionMap.get(productId));
                    versionSet.removeAll(currentSet);
                 }
-
+    
                 if (!versionSet.isEmpty()) {
-
+    
                     productLongDescriptionAvailable = true;
                     supportPacksAvailable = true;
-
+    
                     if (policyUpdatesMap.get(newPolicy.getPolicyVersion()) != null) {
                         String updatedVersions = policyUpdatesMap.get(newPolicy.getPolicyVersion());
                         updatedVersions = updatedVersions + "," + productId + versionSet.toString();
@@ -182,14 +164,14 @@ public class LCMPSPackNotificationTask extends Task {
                     } else {
                         policyUpdatesMap.put(newPolicy.getPolicyVersion(), productId + versionSet.toString());
                     }
-
+    
                     productLongDescription.append(NotificationCommonConstants.PRODUCT_NAMES.get(productId));
-
+    
                     productLongDescription.append(" ").append(versionSet.toString()).append(",");
-
+    
                 }
             }
-
+    
             if (productLongDescriptionAvailable) {
                 productLongDescription.deleteCharAt(productLongDescription.length() - 1);
                 policyLongDescription.append(newPolicy.getPolicyVersion()).append(" supports ")
@@ -197,15 +179,15 @@ public class LCMPSPackNotificationTask extends Task {
                 productLongDescription.setLength(0);
                 productLongDescriptionAvailable = false;
             }
-
+    
         }
-
+    
         return policyUpdatesMap;
-
+    
     }
-
+    
     private static PolicyProductDetails getCurrentPolicy(List<PolicyProductDetails> policyProductDetails) {
-
+    
         for (PolicyProductDetails policy : policyProductDetails) {
             if (StringUtils.equals("true", policy.getIsCurrentVersion())) {
                 return policy;
@@ -213,16 +195,16 @@ public class LCMPSPackNotificationTask extends Task {
         }
         return null;
     }
-
+    
     private static Map<String, List<String>> prepareMaps(PolicyProductDetails policy) {
-
+    
         Map<String, List<String>> versionMap = new HashMap<String, List<String>>();
-
+    
         List<ProductVersionDetails> productVersions = policy.getPolicyVersionDetailsList();
         for (ProductVersionDetails version : productVersions) {
             versionMap.put(version.getProductId(), version.getVersions());
         }
         return versionMap;
-    }
+    }*/
 
 }
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPatchingNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPatchingNotificationTask.java
index 7ab4a8ebf9bb8502634da6f2fd965a945ce6ca5d..c1056f4ba1552dec9a7ee04dd4cef57ab4fef395 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPatchingNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPatchingNotificationTask.java
@@ -6,27 +6,31 @@ package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TreeMap;
 import java.util.Map.Entry;
+import java.util.TreeMap;
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
+import com.vmware.vrealize.lcm.common.LcmProperties;
 import com.vmware.vrealize.lcm.common.exception.EngineException;
 import com.vmware.vrealize.lcm.common.notification.LCMPatchNotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationLevel;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationErrorConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationNameType;
 import com.vmware.vrealize.lcm.common.notification.util.NotificationUtil;
-import com.vmware.vrealize.lcm.common.patch.Patch;
-import com.vmware.vrealize.lcm.common.patch.PatchInfo;
-import com.vmware.vrealize.lcm.common.patch.ProductPatchRegistry;
+import com.vmware.vrealize.lcm.commons.patch.Patch;
+import com.vmware.vrealize.lcm.commons.patch.PatchInfo;
+import com.vmware.vrealize.lcm.commons.patch.ProductPatchRegistry;
+import com.vmware.vrealize.lcm.lcops.controller.SettingsController;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationLevel;
 import com.vmware.vrealize.lcm.util.ResponseType;
 import com.vmware.vrealize.lcm.util.json.JsonUtil;
 
@@ -44,6 +48,12 @@ public class LCMPatchingNotificationTask extends Task {
     @In
     private String productName;
 
+    @Inject
+    private ConfigurationPropertyService configurationPropertyService;
+
+    @Inject
+    private SettingsController settingsController;
+
     public LCMPatchingNotificationTask() {
 
     }
@@ -61,12 +71,11 @@ public class LCMPatchingNotificationTask extends Task {
 
             if (StringUtils.isNotBlank(lcmCurrentVersion) && StringUtils.isNotBlank(lcmName)) {
 
-                ResponseType response = NotificationUtil.getLCMPatchingMetaData(lcmCurrentVersion);
+                ResponseType response = NotificationUtil.getLCMPatchingMetaData(lcmCurrentVersion, configurationPropertyService, settingsController);
 
                 if (response != null && StringUtils.isNotBlank(response.getOutputData())) {
 
-                    ProductPatchRegistry productPatchRegistry = JsonUtil.jsonStringToObject(response.getOutputData(),
-                            ProductPatchRegistry.class);
+                    ProductPatchRegistry productPatchRegistry = JsonUtil.jsonStringToObject(response.getOutputData(), ProductPatchRegistry.class);
 
                     if (productPatchRegistry != null) {
                         TreeMap<Long, PatchInfo> patchInfoObjects = new TreeMap<Long, PatchInfo>();
@@ -100,22 +109,20 @@ public class LCMPatchingNotificationTask extends Task {
 
                             notificationDTO.setProperties(propertiesMap);
 
-                            notificationDTO.setRedirectUrl(notificationDTO.getRedirectUrl());
+                            notificationDTO.setRedirectUrl(
+                                    configurationPropertyService.getValueFromKey(LcmProperties.LCM_PATCH_NOTIFICATION_REDIRECT_URL.getPropertyKey()));
                             notificationDTO.setNotificationKey(notificationDTO.getNotificationKey());
 
                         } else {
-                            logger.info("No product patches found for the product : " + lcmName + " for the version : "
-                                    + lcmCurrentVersion);
+                            logger.info("No product patches found for the product : " + lcmName + " for the version : " + lcmCurrentVersion);
                         }
 
                     } else {
-                        logger.info("No product patches found for the product : " + lcmName + " for the version : "
-                                + lcmCurrentVersion);
+                        logger.info("No product patches found for the product : " + lcmName + " for the version : " + lcmCurrentVersion);
                     }
 
                 } else {
-                    logger.info("No product patches found for the product : " + lcmName + " for the version : "
-                            + lcmCurrentVersion);
+                    logger.info("No product patches found for the product : " + lcmName + " for the version : " + lcmCurrentVersion);
                 }
 
                 injectEvent(NotificationCommonConstants.LCM_PATCH_TASK_SUCCESS);
@@ -133,5 +140,4 @@ public class LCMPatchingNotificationTask extends Task {
         }
 
     }
-
 }
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMUpgradeNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMUpgradeNotificationTask.java
index 884b9d7c0ab65425e3deeacf4de5669f235efa91..f3d4c299d2da19406aca58c2f148f4765c7d77ce 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMUpgradeNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMUpgradeNotificationTask.java
@@ -15,17 +15,20 @@ import org.apache.commons.lang.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
+import com.vmware.vrealize.lcm.common.LcmProperties;
 import com.vmware.vrealize.lcm.common.exception.EngineException;
 import com.vmware.vrealize.lcm.common.notification.LCMUpgradeNotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationLevel;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationErrorConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationNameType;
 import com.vmware.vrealize.lcm.common.notification.util.NotificationUtil;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationLevel;
 import com.vmware.vrealize.lcm.util.ShellExecutor;
 import com.vmware.vrealize.lcm.util.exception.ProcessExecutionException;
 
@@ -47,6 +50,9 @@ public class LCMUpgradeNotificationTask extends Task {
     @In
     private String productName;
 
+    @Inject
+    private ConfigurationPropertyService configurationPropertyService;
+
     public LCMUpgradeNotificationTask() {
 
     }
@@ -93,7 +99,8 @@ public class LCMUpgradeNotificationTask extends Task {
 
                     notificationDTO.setProperties(propertiesMap);
 
-                    notificationDTO.setRedirectUrl(notificationDTO.getRedirectUrl());
+                    notificationDTO
+                            .setRedirectUrl(configurationPropertyService.getValueFromKey(LcmProperties.LCM_UPGRADE_NOTIFICATION_REDIRECT_URL.getPropertyKey()));
                     notificationDTO.setNotificationKey(notificationDTO.getNotificationKey());
 
                 } else {
@@ -108,9 +115,7 @@ public class LCMUpgradeNotificationTask extends Task {
             }
 
         } catch (ProcessExecutionException ex) {
-            logger.error(
-                    "No Upgrades found for the LCM. Please check the connectivity to : " + UPDATE_URL + " .Cause : ",
-                    ex);
+            logger.error("No Upgrades found for the LCM. Please check the connectivity to : " + UPDATE_URL + " .Cause : ", ex);
             retryParams.add(UPDATE_URL);
             injectFailedEvent(NotificationErrorConstants.LCM_UPGRADE_ERROR, retryParams, ex);
 
@@ -135,8 +140,7 @@ public class LCMUpgradeNotificationTask extends Task {
             buildInfo = updateMatcher.group(2);
         }
         if (StringUtils.isNotBlank(availableUpdateVersion) && StringUtils.isNotBlank(buildInfo)) {
-            messagesMap.put(DESCRIPTION, "vRealize Suite Lifecycle Manager " + availableUpdateVersion
-                    + " is available. BuildNo - " + buildInfo);
+            messagesMap.put(DESCRIPTION, "vRealize Suite Lifecycle Manager " + availableUpdateVersion + " is available. BuildNo - " + buildInfo);
             messagesMap.put(AVAILABLE_UPGRADE_VERSION, availableUpdateVersion);
             messagesMap.put(BUILD_NUMBER, buildInfo);
         }
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyNotificationSchedulerTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyNotificationSchedulerTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..7e33dea6462af98a403e5088fec87fae4d693167
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyNotificationSchedulerTask.java
@@ -0,0 +1,69 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.springframework.util.CollectionUtils;
+
+import com.vmware.vrealize.lcm.automata.common.dto.ScheduledEngineRequestDTO;
+import com.vmware.vrealize.lcm.automata.gateway.service.ScheduledRequestService;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class ModifyNotificationSchedulerTask extends Task {
+
+    private static final Logger logger = LogManager.getLogger(ModifyNotificationSchedulerTask.class);
+
+    @In
+    private String nextState;
+
+    @In
+    private List<ScheduledEngineRequestDTO> engineScheduleRequestDTOList = new ArrayList<ScheduledEngineRequestDTO>();
+
+    @In
+    private ScheduledEngineRequestDTO engineScheduleRequestDTO;
+
+    @Inject
+    private ScheduledRequestService engineScheduleRequestService;
+
+    @Override
+    public void execute() {
+
+        try {
+
+            if (CollectionUtils.isEmpty(engineScheduleRequestDTOList)) {
+                engineScheduleRequestDTOList = new ArrayList<ScheduledEngineRequestDTO>();
+                engineScheduleRequestDTOList.add(engineScheduleRequestDTO);
+            }
+
+            for (ScheduledEngineRequestDTO dto : engineScheduleRequestDTOList) {
+
+                ScheduledEngineRequestDTO er = engineScheduleRequestService.getScheduleRequestByRequestKey(dto.getTargetId());
+
+                ScheduledEngineRequestDTO engineScheduleRequest = new ScheduledEngineRequestDTO();
+                engineScheduleRequest.setVmid(er.getVmid());
+                engineScheduleRequest.setInterval(dto.getInterval());
+                engineScheduleRequest.setRequest(dto.getRequest());
+                logger.info("Modifying Notification Schedule with info : \n" + JsonUtil.jsonObjectToString(engineScheduleRequest));
+                engineScheduleRequestService.schedule(engineScheduleRequest);
+
+            }
+
+        } catch (Exception ex) {
+            logger.error("Exception caught while modifying the notification registrations. Cause : " + ex);
+        } finally {
+            injectEvent("OnNotificationSchedulerModified");
+        }
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyPatchNotificationPropertiesTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyPatchNotificationPropertiesTask.java
index 2fcce992a9152d717eb3fb3949163b49a90703f9..bb9341e236a8c4231be41dfb0b1943ab63107ec7 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyPatchNotificationPropertiesTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyPatchNotificationPropertiesTask.java
@@ -40,11 +40,11 @@ public class ModifyPatchNotificationPropertiesTask extends Task {
             String patchLevelName = props.get(NotificationConstants.PATCH_LEVEL_NAME);
             String environmentId = props.get(NotificationConstants.ENVIRONMENT_ID);
 
-            if (StringUtils.isNotBlank(productName) && StringUtils.isNotBlank(patchReleaseDate)
-                    && StringUtils.isNotBlank(patchLevelName) && StringUtils.isNotBlank(environmentId)) {
+            if (StringUtils.isNotBlank(productName) && StringUtils.isNotBlank(patchReleaseDate) && StringUtils.isNotBlank(patchLevelName)
+                    && StringUtils.isNotBlank(environmentId)) {
 
-                String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, environmentId,
-                        productName, NotificationConstants.PRODUCT_PATCHING_NOTIFICATION_SYMBOLIC_LINK);
+                String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, environmentId, productName,
+                        NotificationConstants.PRODUCT_PATCHING_NOTIFICATION_SYMBOLIC_LINK);
                 NotificationDTO notificationDTO = notificationService.getNotificationByKey(notificationKey);
                 if (notificationDTO != null) {
                     notificationDTO.getProperties().put(NotificationConstants.PATCH_RELEASE_DATE, patchReleaseDate);
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/NotificationSchedulesTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/NotificationSchedulesTask.java
index fde126298d53b6ebcae9ba07579560aa6dbd3719..b45b0796e1271b8861b9e3804f16a3172ef85250 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/NotificationSchedulesTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/NotificationSchedulesTask.java
@@ -33,10 +33,13 @@ public class NotificationSchedulesTask extends Task {
 
     @In
     private ComponentDeploymentSpecification componentSpec = null;
+
     @Out
     private ScheduledEngineRequestDTO engineScheduleRequestDTO;
+
     @Out
     private String engineScheduleRequestDTOList;
+
     @In
     @Out
     private String action;
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductHealthNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductHealthNotificationTask.java
index accd14a7961cfe64a1e8877d4eaae63f2afe4c71..52adfed5a18f29ef9f5759df66cb44b6fc076b88 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductHealthNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductHealthNotificationTask.java
@@ -7,7 +7,7 @@ package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
 import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductPatchingNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductPatchingNotificationTask.java
index 77152d2813d44a75d25ac5de2337587ab465123a..0b819d5c66a1008cfba2ca96ef58dbfd12a40101 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductPatchingNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductPatchingNotificationTask.java
@@ -4,7 +4,6 @@
 
 package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
 
-import java.io.IOException;
 import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -18,32 +17,34 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.springframework.util.CollectionUtils;
 
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
 import com.vmware.vrealize.lcm.common.LcmProperties;
-import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
-import com.vmware.vrealize.lcm.common.error.ErrorCode;
-import com.vmware.vrealize.lcm.common.error.ErrorUtils;
 import com.vmware.vrealize.lcm.common.exception.EngineException;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationLevel;
-import com.vmware.vrealize.lcm.common.notification.NotificationStateType;
 import com.vmware.vrealize.lcm.common.notification.ProductPatchNotificationDTO;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationErrorConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationNameType;
-import com.vmware.vrealize.lcm.common.patch.Patch;
-import com.vmware.vrealize.lcm.common.patch.Patch.PatchStatus;
-import com.vmware.vrealize.lcm.common.patch.PatchInfo;
-import com.vmware.vrealize.lcm.common.patch.Payload;
-import com.vmware.vrealize.lcm.common.patch.ProductPatchRegistry;
+import com.vmware.vrealize.lcm.commons.patch.Patch;
+import com.vmware.vrealize.lcm.commons.patch.Patch.PatchStatus;
+import com.vmware.vrealize.lcm.commons.patch.PatchInfo;
+import com.vmware.vrealize.lcm.commons.patch.Payload;
+import com.vmware.vrealize.lcm.commons.patch.ProductPatchRegistry;
+import com.vmware.vrealize.lcm.lcops.common.SettingConstants;
+import com.vmware.vrealize.lcm.lcops.common.dto.settings.ProxyConfigurationDTO;
+import com.vmware.vrealize.lcm.lcops.controller.SettingsController;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
-import com.vmware.vrealize.lcm.services.notification.service.NotificationService;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationLevel;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationStateType;
+import com.vmware.vrealize.lcm.shell.notification.service.NotificationService;
 import com.vmware.vrealize.lcm.util.ResponseType;
 import com.vmware.vrealize.lcm.util.RestHelper;
 import com.vmware.vrealize.lcm.util.json.JsonUtil;
-import com.vmware.vrealize.lcm.util.patch.PatchConstants;
+import com.vmware.vrealize.lcm.util.model.ProxyConfiguration;
 
 public class ProductPatchingNotificationTask extends Task {
 
@@ -56,8 +57,6 @@ public class ProductPatchingNotificationTask extends Task {
     private static final String CURRENT_VERSION = "currentVersion";
     private static final String PATCH_NAME = "availableUpgradeVersion";
 
-    private NotificationConstants notificationConstants;
-
     private static final String GET = "GET";
 
     @In
@@ -81,6 +80,12 @@ public class ProductPatchingNotificationTask extends Task {
     @Inject
     private NotificationService notificationService;
 
+    @Inject
+    private ConfigurationPropertyService configurationPropertyService;
+
+    @Inject
+    private SettingsController settingsController;
+
     public ProductPatchingNotificationTask() {
 
     }
@@ -159,8 +164,15 @@ public class ProductPatchingNotificationTask extends Task {
                                     propertiesMap.put(PATCH_NAME, latestPatchInfo.getName());
 
                                     notificationDTO.setProperties(propertiesMap);
-
-                                    notificationDTO.setRedirectUrl(notificationDTO.getRedirectUrl());
+                                    String redirectUrl = "";
+                                    if (propertiesMap != null) {
+                                        redirectUrl = String.format(
+                                                configurationPropertyService
+                                                        .getValueFromKey(LcmProperties.PRODUCT_UPGRADE_NOTIFICATION_REDIRECT_URL.getPropertyKey()),
+                                                propertiesMap.get(NotificationConstants.ENVIRONMENT_ID));
+                                    }
+
+                                    notificationDTO.setRedirectUrl(redirectUrl);
                                     notificationDTO.setNotificationKey(notificationDTO.getNotificationKey());
                                 } else {
                                     logger.debug("Already in the latest patch");
@@ -199,12 +211,12 @@ public class ProductPatchingNotificationTask extends Task {
     }
 
     private boolean checkForPatchAppliedStatus(String patchName, long releaseDate) {
-        String notificationKey = String.format(notificationConstants.NOTIFICATION_KEY_FORMAT, environmentId, productName,
-                notificationConstants.PRODUCT_PATCHING_NOTIFICATION_SYMBOLIC_LINK);
+        String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, environmentId, productName,
+                NotificationConstants.PRODUCT_PATCHING_NOTIFICATION_SYMBOLIC_LINK);
         NotificationDTO notificationDTO = notificationService.getNotificationByKey(notificationKey);
         if (notificationDTO != null && !CollectionUtils.isEmpty(notificationDTO.getProperties())) {
-            String existingReleseDate = notificationDTO.getProperties().get(notificationConstants.PATCH_RELEASE_DATE);
-            String existingLevel = notificationDTO.getProperties().get(notificationConstants.PATCH_LEVEL_NAME);
+            String existingReleseDate = notificationDTO.getProperties().get(NotificationConstants.PATCH_RELEASE_DATE);
+            String existingLevel = notificationDTO.getProperties().get(NotificationConstants.PATCH_LEVEL_NAME);
             if (StringUtils.isNotBlank(existingReleseDate) && StringUtils.isNotBlank(existingLevel)) {
                 if (Long.valueOf(existingReleseDate).equals(releaseDate) && StringUtils.equalsIgnoreCase(patchName, existingLevel)) {
                     updateNotificationAsArchived(notificationDTO);
@@ -227,14 +239,30 @@ public class ProductPatchingNotificationTask extends Task {
         }
     }
 
+    private ProxyConfiguration getProxyConfigurationFromDTO() {
+        Object proxyData = settingsController.getSettingsData(SettingConstants.LCM_PROXY_SETTINGS, null).getBody();
+        ProxyConfigurationDTO proxyConfigurationDTO = JsonUtil.jsonStringToObject(JsonUtil.jsonObjectToString(proxyData), ProxyConfigurationDTO.class);
+        if (proxyConfigurationDTO == null) {
+            return null;
+        }
+        ProxyConfiguration proxyConfiguration = new ProxyConfiguration();
+        proxyConfiguration.setIsProxyEnabled("" + proxyConfigurationDTO.isProxyEnabled());
+        proxyConfiguration.setProxyHost(proxyConfigurationDTO.getHostName());
+        proxyConfiguration.setProxyUserName(proxyConfigurationDTO.getUserName());
+        proxyConfiguration.setProxyPassword(proxyConfigurationDTO.getPassword());
+        proxyConfiguration.setProxyPort(proxyConfigurationDTO.getPort());
+        return proxyConfiguration;
+    }
+
     private ResponseType getProductPatchingMetaData() {
 
-        String productPatchDownloadUrl = LcmSystemPropertiesHelper.getInstance().getLcmProperty(LcmProperties.LCM_PATCH_EXTERNAL_REPO_PATH);
-        String productFile = PatchConstants.PATCH_PRODUCT_REGISTRY_FILE;
+        String externalURL = configurationPropertyService.getValueFromKey("lcm.patch.external.repo.path");
+        String productFile = "/patchProductRegistry.json";
 
-        productPatchDownloadUrl = productPatchDownloadUrl + productName + "/" + currentVersion + productFile;
+        String productPatchDownloadUrl = externalURL + productName + "/" + currentVersion + productFile;
         try {
-            ResponseType response = RestHelper.readRemoteData(null, productPatchDownloadUrl, GET, null, null, false, null, null, null);
+            ResponseType response =
+                    RestHelper.readRemoteData(getProxyConfigurationFromDTO(), productPatchDownloadUrl, GET, null, null, false, null, null, null);
 
             if (response != null && response.getStatusCode() == 200) {
                 logger.info("Product Patch Data fetched successfully : " + response.getStatusCode());
@@ -245,11 +273,11 @@ public class ProductPatchingNotificationTask extends Task {
             }
 
         } catch (UnknownHostException unKnownHostEx) {
-            logger.error(ErrorUtils.getInstance().getErrorMessage(ErrorCode.ERR_CONNECTING_POLICY_REFRESH), unKnownHostEx);
+            logger.error(ErrorCode.ERR_CONNECTING_POLICY_REFRESH, unKnownHostEx);
         } catch (org.apache.http.conn.ConnectTimeoutException | java.net.ConnectException connTimeoutExc) {
-            logger.error(ErrorUtils.getInstance().getErrorMessage(ErrorCode.ERR_TIMEOUT_CONNECTING_POLICY_REFRESH), connTimeoutExc);
-        } catch (IOException e) {
-            logger.error(ErrorUtils.getInstance().getErrorMessage(ErrorCode.ERR_CONNECTING_POLICY_REFRESH), e);
+            logger.error(ErrorCode.ERR_TIMEOUT_CONNECTING_POLICY_REFRESH, connTimeoutExc);
+        } catch (Exception e) {
+            logger.error(ErrorCode.ERR_CONNECTING_POLICY_REFRESH, e);
         }
 
         return null;
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradeNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradeNotificationTask.java
index d880d4bc9241eea68c5acdd41a0095f47cc69ce8..68988de44449dfee6195560def7d984819cc31ac 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradeNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradeNotificationTask.java
@@ -13,17 +13,21 @@ import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
+import com.vmware.vrealize.lcm.common.LcmProperties;
 import com.vmware.vrealize.lcm.common.exception.EngineException;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.NotificationLevel;
 import com.vmware.vrealize.lcm.common.notification.ProductUpgradeNotificationDTO;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationErrorConstants;
 import com.vmware.vrealize.lcm.common.notification.constants.NotificationNameType;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
-import com.vmware.vrealize.lcm.util.policy.PolicyUtil;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationConstants;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationLevel;
+
 
 public class ProductUpgradeNotificationTask extends Task {
 
@@ -54,12 +58,14 @@ public class ProductUpgradeNotificationTask extends Task {
     @Out
     private NotificationDTO notificationDTO;
 
+    @Inject
+    private ConfigurationPropertyService configurationPropertyService;
+
     public ProductUpgradeNotificationTask() {
 
     }
 
-    public ProductUpgradeNotificationTask(String productId, String currentVersion, String environmentId,
-            String environmentName, String productName) {
+    public ProductUpgradeNotificationTask(String productId, String currentVersion, String environmentId, String environmentName, String productName) {
 
         this.productId = productId;
         this.currentVersion = currentVersion;
@@ -76,10 +82,9 @@ public class ProductUpgradeNotificationTask extends Task {
         try {
             logger.info("Starting :: Product Upgrade NotificationTask");
 
-            if (StringUtils.isNotBlank(productName)
-                    && StringUtils.isNotBlank(environmentId) && StringUtils.isNotBlank(environmentName)
+            if (StringUtils.isNotBlank(productName) && StringUtils.isNotBlank(environmentId) && StringUtils.isNotBlank(environmentName)
                     && StringUtils.isNotBlank(currentVersion)) {
-                String upgradeVersion = PolicyUtil.getUpgradeVersion(productName, currentVersion);
+                String upgradeVersion = "";// PolicyUtil.getUpgradeVersion(productName, currentVersion);
                 String description = "";
 
                 if (upgradeVersion != null) {
@@ -94,8 +99,7 @@ public class ProductUpgradeNotificationTask extends Task {
 
                     description = NotificationCommonConstants.PRODUCT_NAMES.get(productName);
 
-                    description = description + " " + upgradeVersion + " is available for environment "
-                            + environmentName;
+                    description = description + " " + upgradeVersion + " is available for environment " + environmentName;
 
                     notificationDTO = new ProductUpgradeNotificationDTO();
                     notificationDTO.setName(NotificationNameType.PRODUCT_UPGRADE.toString());
@@ -112,12 +116,18 @@ public class ProductUpgradeNotificationTask extends Task {
 
                     notificationDTO.setProperties(propertiesMap);
 
-                    notificationDTO.setRedirectUrl(notificationDTO.getRedirectUrl());
+                    String redirectUrl = "";
+                    if (propertiesMap != null) {
+                        redirectUrl = String.format(
+                                configurationPropertyService.getValueFromKey(LcmProperties.PRODUCT_UPGRADE_NOTIFICATION_REDIRECT_URL.getPropertyKey()),
+                                propertiesMap.get(NotificationConstants.ENVIRONMENT_ID));
+                    }
+
+                    notificationDTO.setRedirectUrl(redirectUrl);
                     notificationDTO.setNotificationKey(notificationDTO.getNotificationKey());
 
                 } else {
-                    logger.info("No product upgrades found for the product : " + productName + " for the version : "
-                            + currentVersion);
+                    logger.info("No product upgrades found for the product : " + productName + " for the version : " + currentVersion);
                 }
 
                 injectEvent(NotificationCommonConstants.PRODUCT_UPGRADE_TASK_SUCCESS);
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradePatchSchedulerModificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradePatchSchedulerModificationTask.java
index 4a1ef176236bb0502cc259791b86c08e9301d961..e13f9499343d49ac3fc8d64c0ee0176e2b5333e9 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradePatchSchedulerModificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradePatchSchedulerModificationTask.java
@@ -14,6 +14,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import com.vmware.vrealize.lcm.automata.common.dto.ScheduledEngineRequestDTO;
+import com.vmware.vrealize.lcm.automata.gateway.service.ScheduledRequestService;
 import com.vmware.vrealize.lcm.common.notification.util.NotificationUtil;
 import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
 import com.vmware.vrealize.lcm.domain.ProductSpecification;
@@ -21,166 +22,136 @@ import com.vmware.vrealize.lcm.domain.StateMachineInvocationRequest;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
-import com.vmware.vrealize.lcm.platform.automata.service.EngineScheduleRequestService;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
-import com.vmware.vrealize.lcm.platform.automata.service.domain.EngineScheduleRequest;
-import com.vmware.vrealize.lcm.platform.automata.service.task.NotificationSchedulerDTOUtil;
 import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
 import com.vmware.vrealize.lcm.shell.notification.service.NotificationService;
-import com.vmware.vrealize.lcm.util.json.JsonUtil;
 
 public class ProductUpgradePatchSchedulerModificationTask extends Task {
 
-   public static final String NOTIFICATION_TYPE = "notificationType";
-   public static final String PRODUCT_PATCHING_NOTIFICATION = "productPatchingNotification";
+    public static final String NOTIFICATION_TYPE = "notificationType";
+    public static final String PRODUCT_PATCHING_NOTIFICATION = "productPatchingNotification";
 
-   private static final Logger logger = LogManager
-         .getLogger(ProductUpgradePatchSchedulerModificationTask.class);
+    private static final Logger logger = LogManager.getLogger(ProductUpgradePatchSchedulerModificationTask.class);
 
-   public static final String PRODUCT_PATCH_NOTIFICATION = "productPatchNotification";
+    public static final String PRODUCT_PATCH_NOTIFICATION = "productPatchNotification";
 
-   @In
-   ComponentDeploymentSpecification componentSpec;
+    @In
+    ComponentDeploymentSpecification componentSpec;
 
-   @In
-   String currentVersion;
+    @In
+    String currentVersion;
 
-   @In
-   @Out
-   ProductSpecification productSpec;
+    @In
+    @Out
+    ProductSpecification productSpec;
 
-   @Out
-   List<ScheduledEngineRequestDTO> engineScheduleRequestDTOList = new ArrayList<ScheduledEngineRequestDTO>();
+    @Out
+    List<ScheduledEngineRequestDTO> engineScheduleRequestDTOList = new ArrayList<ScheduledEngineRequestDTO>();
 
-   @Inject
-   private EngineScheduleRequestService engineScheduleRequestService;
+    @Inject
+    private ScheduledRequestService engineScheduleRequestService;
 
-   @Inject
-   private NotificationService notificationService;
+    @Inject
+    private NotificationService notificationService;
 
-   @Override
-   public void execute() {
+    @Override
+    public void execute() {
 
-      try {
+        try {
 
-         if ((productSpec != null || componentSpec != null)
-               && StringUtils.isNotBlank(currentVersion)) {
+            if ((productSpec != null || componentSpec != null) && StringUtils.isNotBlank(currentVersion)) {
 
-            if (componentSpec == null) {
-               componentSpec = productSpec.getComponents().get(0);
+                if (componentSpec == null) {
+                    componentSpec = productSpec.getComponents().get(0);
+                }
+
+                String environmentId = componentSpec.getComponent().getProperties().get("environmentId");
+                String environmentName = componentSpec.getComponent().getProperties().get("environmentName");
+                String productId = componentSpec.getComponent().getProperties().get("productLink");
+                String productName = componentSpec.getComponent().getProperties().get("product");
+                String upgradedVersion = componentSpec.getComponent().getProperties().get("version");
+
+                Map<String, String> properties = new HashMap<>();
+
+                properties.put(NotificationConstants.ENVIRONMENT_ID, environmentId);
+                properties.put(NotificationConstants.PRODUCT_ID, productId);
+                properties.put(NotificationConstants.PRODUCT_NAME, productName);
+                properties.put(NotificationConstants.CURRENT_VERSION, upgradedVersion);
+                properties.put(NotificationConstants.ENVIRONMENT_NAME, StringUtils.isNotBlank(environmentName) ? environmentName : environmentId);
+
+                // Update Product engine schedule request
+                if (StringUtils.isBlank(environmentName)) {
+                    String existingEnvironmentName =
+                            getEnvironmentNameFromExistingNotificationProperties(properties, NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK);
+                    if (StringUtils.isNotBlank(existingEnvironmentName)) {
+                        properties.put(NotificationConstants.ENVIRONMENT_NAME, existingEnvironmentName);
+                    }
+                }
+
+                engineScheduleRequestDTOList.add(createEngineScheduleRequestWithProperties(properties,
+                        NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK, upgradedVersion));
+
+                // mark notification existing for this product upgrade as ARCHIVED
+                markNotificationAsArchived(properties, NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK);
+
+                // Update Product Patching Schedule request
+                engineScheduleRequestDTOList.add(createEngineScheduleRequestWithProperties(properties, PRODUCT_PATCHING_NOTIFICATION, upgradedVersion));
+
+                // mark notification existing for this product patching as ARCHIVED
+                markNotificationAsArchived(properties, PRODUCT_PATCH_NOTIFICATION);
+
+            } else {
+                logger.info("Could not find the parameters required for ProductUpgradeSchedulerModificationTask");
             }
 
-            String environmentId = componentSpec.getComponent().getProperties()
-                  .get("environmentId");
-            String environmentName = componentSpec.getComponent().getProperties()
-                  .get("environmentName");
-            String productId = componentSpec.getComponent().getProperties().get("productLink");
-            String productName = componentSpec.getComponent().getProperties().get("product");
-            String upgradedVersion = componentSpec.getComponent().getProperties().get("version");
-
-            Map<String, String> properties = new HashMap<>();
-
-            properties.put(NotificationConstants.ENVIRONMENT_ID, environmentId);
-            properties.put(NotificationConstants.PRODUCT_ID, productId);
-            properties.put(NotificationConstants.PRODUCT_NAME, productName);
-            properties.put(NotificationConstants.CURRENT_VERSION, upgradedVersion);
-            properties.put(NotificationConstants.ENVIRONMENT_NAME,
-                  StringUtils.isNotBlank(environmentName) ? environmentName : environmentId);
-
-            // Update Product engine schedule request
-            if(StringUtils.isBlank(environmentName)) {
-               String existingEnvironmentName = getEnvironmentNameFromExistingNotificationProperties(properties, NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK);
-               if(StringUtils.isNotBlank(existingEnvironmentName)) {
-                  properties.put(NotificationConstants.ENVIRONMENT_NAME, existingEnvironmentName);
-               }
+        } catch (Exception ex) {
+            logger.error("Exception caught while updating the ProductUpgradeSchedulerModificationTask : " + ex);
+        } finally {
+            injectEvent("OnUpgradeNotificationSchedulerTaskCompletion");
+        }
+
+    }
+
+    private String getEnvironmentNameFromExistingNotificationProperties(Map<String, String> properties, String notificationType) {
+        String environmentName = null;
+        String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, properties.get(NotificationConstants.ENVIRONMENT_ID),
+                properties.get(NotificationConstants.PRODUCT_NAME), notificationType);
+        NotificationDTO existingNotification = notificationService.getNotificationByKey(notificationKey);
+        if (existingNotification != null && existingNotification.getProperties() != null) {
+            environmentName = existingNotification.getProperties().get("environmentName");
+            if (StringUtils.isNotBlank(environmentName)) {
+                return environmentName;
             }
+        }
+
+        return null;
+    }
+
+    private void markNotificationAsArchived(Map<String, String> properties, String notificationType) {
+        String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT, properties.get(NotificationConstants.ENVIRONMENT_ID),
+                properties.get(NotificationConstants.PRODUCT_NAME), notificationType);
+        notificationService.markNotificationAsArchivedByNotificationKey(notificationKey);
+    }
+
+    private ScheduledEngineRequestDTO createEngineScheduleRequestWithProperties(Map<String, String> properties, String notificationType,
+            String upgradedVersion) {
+
+        StateMachineInvocationRequest spec;
+
+        properties.put(NOTIFICATION_TYPE, notificationType);
+
+        String requestKey = properties.get("environmentId") + "," + properties.get("productName") + "," + currentVersion + "," + notificationType;
+
+        ScheduledEngineRequestDTO scheduledRequest = engineScheduleRequestService.getScheduleRequestByRequestKey(requestKey);
+
+        if (scheduledRequest != null) {
+            spec = NotificationUtil.createNotificationSpec(properties, notificationType);
+            scheduledRequest.setRequest(spec);
+            scheduledRequest
+                    .setTargetId(properties.get("environmentId") + "," + properties.get("productName") + "," + upgradedVersion + "," + notificationType);
 
-            engineScheduleRequestDTOList.add(createEngineScheduleRequestWithProperties(properties,
-                  NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK, upgradedVersion));
-
-            // mark notification existing for this product upgrade as ARCHIVED
-            markNotificationAsArchived(properties,
-                  NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK);
-
-            // Update Product Patching Schedule request
-            engineScheduleRequestDTOList.add(createEngineScheduleRequestWithProperties(properties,
-                  PRODUCT_PATCHING_NOTIFICATION, upgradedVersion));
-
-            // mark notification existing for this product patching as ARCHIVED
-            markNotificationAsArchived(properties, PRODUCT_PATCH_NOTIFICATION);
-
-         } else {
-            logger.info(
-                  "Could not find the parameters required for ProductUpgradeSchedulerModificationTask");
-         }
-
-      } catch (Exception ex) {
-         logger.error(
-               "Exception caught while updating the ProductUpgradeSchedulerModificationTask : "
-                     + ex);
-      } finally {
-         injectEvent("OnUpgradeNotificationSchedulerTaskCompletion");
-      }
-
-   }
-
-   private String getEnvironmentNameFromExistingNotificationProperties(
-         Map<String, String> properties, String notificationType) {
-      String environmentName = null;
-      String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT,
-            properties.get(NotificationConstants.ENVIRONMENT_ID),
-            properties.get(NotificationConstants.PRODUCT_NAME),
-            notificationType);
-      NotificationDTO existingNotification = notificationService.getNotificationByKey(notificationKey);
-      if(existingNotification != null && existingNotification.getProperties() != null) {
-         environmentName = existingNotification.getProperties().get("environmentName");
-         if(StringUtils.isNotBlank(environmentName)) {
-            return environmentName;
-         }
-      }
-
-      return null;
-   }
-
-   private void markNotificationAsArchived(Map<String, String> properties,
-         String notificationType) {
-      String notificationKey = String.format(NotificationConstants.NOTIFICATION_KEY_FORMAT,
-            properties.get(NotificationConstants.ENVIRONMENT_ID),
-            properties.get(NotificationConstants.PRODUCT_NAME),
-            notificationType);
-      notificationService.markNotificationAsArchivedByNotificationKey(notificationKey);
-   }
-
-   private ScheduledEngineRequestDTO createEngineScheduleRequestWithProperties(
-         Map<String, String> properties,
-         String notificationType, String upgradedVersion) {
-
-       ScheduledEngineRequestDTO engineScheduleRequestDTO;
-      StateMachineInvocationRequest spec;
-
-      properties.put(NOTIFICATION_TYPE, notificationType);
-
-      String requestKey = properties.get("environmentId") + "," + properties.get("productName")
-            + "," + currentVersion
-            + "," + notificationType;
-
-      EngineScheduleRequest scheduledRequest = engineScheduleRequestService
-            .getScheduleRequestByRequestKey(requestKey);
-
-      if (scheduledRequest != null) {
-         engineScheduleRequestDTO = NotificationSchedulerDTOUtil
-               .getEngineScheduleRequestDTOFromRequest(scheduledRequest);
-
-         spec = NotificationUtil.createNotificationSpec(properties, notificationType);
-
-         String specJson = JsonUtil.getJsonDataFromObject(spec);
-
-         engineScheduleRequestDTO.setRequest(spec);
-         engineScheduleRequestDTO.setNewRequestKey(properties.get("environmentId") + ","
-               + properties.get("productName") + "," + upgradedVersion + "," + notificationType);
-
-         return engineScheduleRequestDTO;
-      }
-      return null;
-   }
+            return scheduledRequest;
+        }
+        return null;
+    }
 }
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMUpgradeNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMUpgradeNotificationTask.java
index ec09b2ace515c85d17bf04f6d0669e4d77b8ba9e..750c53aa9e0ec8a96e815851c663bceaec0c81a1 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMUpgradeNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMUpgradeNotificationTask.java
@@ -17,7 +17,6 @@ import com.vmware.vrealize.lcm.domain.StateMachineInvocationRequest;
 import com.vmware.vrealize.lcm.platform.automata.annotation.In;
 import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
 import com.vmware.vrealize.lcm.platform.automata.service.Task;
-import com.vmware.vrealize.lcm.util.json.JsonUtil;
 
 public class RegisterLCMUpgradeNotificationTask extends Task {
 
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterNotificationSchedulerTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterNotificationSchedulerTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..e52c39cda822bab34da008872d18e6fde2b79f1a
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterNotificationSchedulerTask.java
@@ -0,0 +1,69 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import com.vmware.vrealize.lcm.automata.common.dto.ScheduledEngineRequestDTO;
+import com.vmware.vrealize.lcm.automata.gateway.service.ScheduledRequestService;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class RegisterNotificationSchedulerTask extends Task {
+    private static final Logger logger = LogManager.getLogger(RegisterNotificationSchedulerTask.class);
+
+    @In
+    private String nextState;
+
+    @In
+    private ScheduledEngineRequestDTO engineScheduleRequestDTO;
+
+    @In
+    private String engineScheduleRequestDTOList;
+
+    @Inject
+    private ScheduledRequestService engineScheduleRequestService;
+
+    @Override
+    public void execute() {
+        logger.info("Starting :: RegisterNotificationSchedulerTask");
+        List<ScheduledEngineRequestDTO> notificationsScheduleRequestList =
+                JsonUtil.jsonStringToListObject(engineScheduleRequestDTOList, ScheduledEngineRequestDTO.class);
+        if (notificationsScheduleRequestList == null || notificationsScheduleRequestList.size() == 0) {
+            notificationsScheduleRequestList = new ArrayList<>(1);
+            notificationsScheduleRequestList.add(engineScheduleRequestDTO);
+        }
+        logger.info("RegisterNotificationSchedulerTask.engineScheduleRequestDTOList : \n" + JsonUtil.getJsonDataFromObject(engineScheduleRequestDTOList));
+
+        try {
+
+            if (nextState == null) {
+                for (ScheduledEngineRequestDTO dto : notificationsScheduleRequestList) {
+                    logger.info("Creating Notification Schedule with info : \n" + JsonUtil.jsonObjectToString(dto));
+                    engineScheduleRequestService.schedule(dto);
+                }
+                injectEvent("OnNotificationSchedulerRegistered");
+            } else {
+                injectEvent(nextState);
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            if (nextState == null) {
+                injectEvent("OnNotificationSchedulerRegistered");
+            } else {
+                injectEvent(nextState);
+            }
+        }
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductPatchingNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductPatchingNotificationTask.java
index ed982fceef75377e6ace0868bc37b22df12de31a..a0386fb03352a85e54539b921cc7e96da18b11f2 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductPatchingNotificationTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductPatchingNotificationTask.java
@@ -56,5 +56,4 @@ public class RegisterProductPatchingNotificationTask extends Task {
         injectEvent("OnRegisterProductPatchingTaskSuccess");
 
     }
-
 }
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/SendNotificationTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/SendNotificationTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..108713dbb9314bed6aa79495e897be433a1271fb
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/SendNotificationTask.java
@@ -0,0 +1,70 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+
+package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
+
+import org.apache.commons.lang.StringUtils;
+
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationDTO;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationStateType;
+import com.vmware.vrealize.lcm.shell.notification.service.NotificationService;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class SendNotificationTask extends Task {
+
+    @In
+    private NotificationDTO notificationDTO;
+
+    @In
+    private String nextState;
+
+    @Inject
+    private NotificationService notificationService;
+
+    @Override
+    public void execute() {
+
+        if (notificationDTO != null) {
+            NotificationDTO nDTO = notificationService.getNotificationByKey(notificationDTO.getNotificationKey());
+
+            if (nDTO == null) {
+                notificationService.createNotification(notificationDTO);
+            } else {
+
+                /*
+                 * 1. If there is change in short description 2. If there is change in properties like
+                 * currentVersion, upgradedVersion 3. If 1&&2 and the state is archived, mark it as
+                 * created since it means some change in the notification which should be visible to
+                 * user.
+                 */
+
+                if ((nDTO.getState().equals(NotificationStateType.ARCHIVED))
+                        && (!StringUtils.equals(nDTO.getShortDescription(), notificationDTO.getShortDescription()))
+                        || !(nDTO.getProperties().equals(notificationDTO.getProperties()))) {
+                    notificationDTO.setState(NotificationStateType.CREATED);
+
+                } else {
+                    notificationDTO.setState(nDTO.getState());
+                }
+                notificationDTO.setVmid(nDTO.getVmid());
+                notificationDTO.setRedirectUrl(notificationDTO.getRedirectUrl());
+                notificationDTO.setNotificationKey(notificationDTO.getNotificationKey());
+                notificationDTO.setCreatedOn(nDTO.getCreatedOn());
+                notificationService.updateNotification(notificationDTO);
+            }
+        }
+
+        if (nextState == null)
+            injectEvent("OnNotificationCreated");
+        else
+            injectEvent(nextState);
+    }
+
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/UnRegisterNotificationSchedulerTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/UnRegisterNotificationSchedulerTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..5e2ab0557daf21fb246cd611f05341ff09bfa57e
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/UnRegisterNotificationSchedulerTask.java
@@ -0,0 +1,78 @@
+/*
+ *  Copyright (c) 2015-2018 VMware, Inc. All Rights Reserved.
+ */
+package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import com.vmware.vrealize.lcm.automata.common.dto.ScheduledEngineRequestDTO;
+import com.vmware.vrealize.lcm.automata.gateway.service.ScheduledRequestService;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
+
+/**
+ * @author Thangamani K (TK)
+ *
+ */
+public class UnRegisterNotificationSchedulerTask extends Task {
+    private static final Logger logger = LogManager.getLogger(RegisterNotificationSchedulerTask.class);
+
+    @In
+    private String nextState;
+
+    @In
+    private ScheduledEngineRequestDTO engineScheduleRequestDTO;
+
+    @In
+    @Out
+    private String engineScheduleRequestDTOList;
+
+    @Inject
+    private ScheduledRequestService engineScheduleRequestService;
+
+    @Override
+    public void execute() {
+        logger.info("Starting :: UnRegisterNotificationSchedulerTask");
+
+        List<ScheduledEngineRequestDTO> notificationsScheduleRequestList =
+                JsonUtil.jsonStringToListObject(engineScheduleRequestDTOList, ScheduledEngineRequestDTO.class);
+        if (notificationsScheduleRequestList == null || notificationsScheduleRequestList.size() == 0) {
+            notificationsScheduleRequestList = new ArrayList<>(1);
+            notificationsScheduleRequestList.add(engineScheduleRequestDTO);
+        }
+        logger.info(
+                "UnRegisterNotificationSchedulerTask.NotificationsScheduleRequestList  : \n" + JsonUtil.getJsonDataFromObject(engineScheduleRequestDTOList));
+        try {
+            if (nextState == null) {
+
+                for (ScheduledEngineRequestDTO dto : notificationsScheduleRequestList) {
+
+                    logger.info("EngineScheduleRequest.RequestKey  : " + dto.getTargetId());
+
+                    ScheduledEngineRequestDTO er = engineScheduleRequestService.getScheduleRequestByRequestKey(dto.getTargetId());
+
+                    if (er != null) {
+                        engineScheduleRequestService.deleteScheduleRequest(er);
+                    }
+                }
+                injectEvent("OnNotificationSchedulerUnRegistered");
+            } else {
+                injectEvent(nextState);
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            if (nextState == null) {
+                injectEvent("OnNotificationSchedulerUnRegistered");
+            } else {
+                injectEvent(nextState);
+            }
+        }
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test.zip b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test.zip
new file mode 100644
index 0000000000000000000000000000000000000000..01579388e5387d938ee066c3d3429c9898e98610
Binary files /dev/null and b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test.zip differ
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/DeleteNotificationsTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/DeleteNotificationsTaskTest.java
deleted file mode 100644
index 90ec1aacfcffed911c2ce9855574713a29783747..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/DeleteNotificationsTaskTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.NotificationConstants;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.platform.automata.EngineScheduleRequestDTO;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.services.notification.service.NotificationService;
-import com.vmware.vrealize.lcm.services.notification.service.NotificationServiceImpl;
-import com.vmware.vrealize.lcm.services.notification.service.repository.NotificationRepository;
-import com.vmware.vrealize.lcm.util.json.JsonUtil;
-
-@RunWith(PowerMockRunner.class)
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class DeleteNotificationsTaskTest {
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-    @Mock
-    NotificationRepository notifRepo;
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-    @InjectMocks
-    private NotificationService notificationService = new NotificationServiceImpl();
-
-    private DeleteNotificationsTask task = new DeleteNotificationsTask();
-    private NotificationDTO nDTO;
-    private static String ENV_ID = "1";
-    private static String ENV_NAME = "one";
-    private static String PROD_NAME = "vra";
-
-    @Before
-    public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-        task = new DeleteNotificationsTask();
-        task.notificationService = notificationService;
-        when(notificationService.getNotificationByKey(any(String.class))).thenReturn(nDTO);
-    }
-
-    @Test
-    public void deleteNotificationsTest() throws Exception {
-        setInput();
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnNotificationsDeleted", argument.getValue().getEventName());
-    }
-
-
-    public void setInput() {
-        List<EngineScheduleRequestDTO> dtoLIst = new ArrayList<>();
-        EngineScheduleRequestDTO dto = new EngineScheduleRequestDTO();
-        dtoLIst.add(dto);
-        dto.setRequestKey(String.format("%s,%s,%s,%s", ENV_ID, ENV_NAME, PROD_NAME, NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK));
-        task.engineScheduleRequestDTOList = JsonUtil.getJsonDataFromObject(dtoLIst);
-        task.setEventService(eventService);
-        nDTO = new NotificationDTO();
-        nDTO.setVmid((ENV_ID + "," + PROD_NAME + "," + NotificationConstants.PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK));
-    }
-
-
-}
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/EnvironmentHealthNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/EnvironmentHealthNotificationTaskTest.java
deleted file mode 100644
index 2834bab4d67af27ce8df2b17feb9d824298846cf..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/EnvironmentHealthNotificationTaskTest.java
+++ /dev/null
@@ -1,208 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-import org.powermock.reflect.Whitebox;
-
-import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.domain.EnvironmentHealth;
-import com.vmware.vrealize.lcm.domain.EnvironmentHealth.ProductHealth;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.services.notification.service.NotificationService;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class EnvironmentHealthNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private EnvironmentHealthNotificationTask task;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-    @Mock
-    private LcmSystemPropertiesHelper systemPropertiesHelper;
-    @Mock
-    private NotificationService notificationService;
-
-    @Before
-    public void setUp() throws Exception {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        LcmSystemPropertiesHelper mockSingleton = PowerMockito.mock(LcmSystemPropertiesHelper.class);
-        Whitebox.setInternalState(LcmSystemPropertiesHelper.class, "instance", mockSingleton);
-        PowerMockito.when(mockSingleton.getLcmProperty(any())).thenReturn("redirectUrl");
-    }
-
-    @Test
-    public void checkEnvironmentHealthGreenSuccessTest() throws Exception {
-
-        EnvironmentHealth health = constructGreenEnvironmentHealth();
-        task = new EnvironmentHealthNotificationTask(health);
-        task.setEventService(eventService);
-        injectField(task, "notificationService", notificationService);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenReturn(new NotificationDTO());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.ENVIRONMENT_HEALTH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkEnvironmentHealthRedVropsErrorSuccessTest() throws Exception {
-
-        EnvironmentHealth health = constructRedEnvironmentHealth(2);
-        task = new EnvironmentHealthNotificationTask(health);
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.ENVIRONMENT_HEALTH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkEnvironmentHealthRedBackendErrorSuccessTest() throws Exception {
-
-        EnvironmentHealth health = constructRedEnvironmentHealth(3);
-        task = new EnvironmentHealthNotificationTask(health);
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.ENVIRONMENT_HEALTH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    private EnvironmentHealth constructRedEnvironmentHealth(int i) {
-
-        EnvironmentHealth health = new EnvironmentHealth();
-        health.setEnvironmentId("xxx");
-        if (i == 2) {
-            health.setHealthCheckError(EnvironmentHealth.HealthCheckError._2);
-        } else if (i == 3) {
-            health.setHealthCheckError(EnvironmentHealth.HealthCheckError._3);
-        }
-        return health;
-    }
-
-    @Test
-    public void checkEnvironmentHealthVraProductRedTest() throws Exception {
-
-        EnvironmentHealth health = constructRedProductEnvironmentHealth();
-        task = new EnvironmentHealthNotificationTask(health);
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.ENVIRONMENT_HEALTH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkEnvironmentHealthInvalidParametersTest() throws Exception {
-
-        task = new EnvironmentHealthNotificationTask();
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.ENVIRONMENT_HEALTH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkEnvironmentHealthDeleteExceptionTest() throws Exception {
-
-        EnvironmentHealth health = constructGreenEnvironmentHealth();
-        task = new EnvironmentHealthNotificationTask(health);
-        task.setEventService(eventService);
-        injectField(task, "notificationService", notificationService);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenReturn(new NotificationDTO());
-        PowerMockito.doThrow(new NullPointerException()).when(notificationService).deleteByVmid(anyString());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.ENVIRONMENT_HEALTH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    private EnvironmentHealth constructRedProductEnvironmentHealth() {
-
-        EnvironmentHealth health = new EnvironmentHealth();
-        health.setEnvironmentId("xxx");
-        health.setHealthCheckError(EnvironmentHealth.HealthCheckError._1);
-
-        List<ProductHealth> productHealthList = new ArrayList<ProductHealth>();
-        ProductHealth vropsHealth = new ProductHealth();
-        vropsHealth.setProductHealthColor("GREEN");
-        ProductHealth vraHealth = new ProductHealth();
-        vraHealth.setProductHealthColor("RED");
-        productHealthList.add(vraHealth);
-        productHealthList.add(vropsHealth);
-
-        health.setProductHealthList(productHealthList);
-        return health;
-    }
-
-    private EnvironmentHealth constructGreenEnvironmentHealth() {
-
-        EnvironmentHealth health = new EnvironmentHealth();
-        health.setEnvironmentId("xxx");
-        health.setHealthCheckError(EnvironmentHealth.HealthCheckError._1);
-
-        List<ProductHealth> productHealthList = new ArrayList<ProductHealth>();
-        ProductHealth vropsHealth = new ProductHealth();
-        vropsHealth.setProductHealthColor("GREEN");
-        ProductHealth vraHealth = new ProductHealth();
-        vraHealth.setProductHealthColor("GREEN");
-        productHealthList.add(vraHealth);
-        productHealthList.add(vropsHealth);
-
-        health.setProductHealthList(productHealthList);
-        return health;
-    }
-
-    private void injectField(EnvironmentHealthNotificationTask task, String fieldName, NotificationService value) {
-
-        try {
-            final java.lang.reflect.Field field = task.getClass().getDeclaredField(fieldName);
-            final boolean origionalValue = field.isAccessible();
-            field.setAccessible(true);
-            field.set(task, value);
-            field.setAccessible(origionalValue);
-        } catch (final NoSuchFieldException | IllegalAccessException e) {
-            throw new RuntimeException(e.getMessage(), e);
-        }
-
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPSPackNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPSPackNotificationTaskTest.java
deleted file mode 100644
index 0235aac4178e9e2734133b05efeb13ff91946277..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPSPackNotificationTaskTest.java
+++ /dev/null
@@ -1,202 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.util.policy.LCMPolicyRefreshPackUtil;
-import com.vmware.vrealize.lcm.util.policy.documents.PolicyProductDetails;
-import com.vmware.vrealize.lcm.util.policy.documents.ProductVersionDetails;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({ LCMPolicyRefreshPackUtil.class })
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class LCMPSPackNotificationTaskTest {
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-    private LCMPSPackNotificationTask task = new LCMPSPackNotificationTask();
-
-    @Before
-    public void setUp() throws Exception {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        PowerMockito.mockStatic(LCMPolicyRefreshPackUtil.class);
-    }
-
-    @Test
-    public void checkLCMPSPack1TaskSuccessTest() throws Exception {
-
-        task = new LCMPSPackNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(LCMPolicyRefreshPackUtil.getPolicyProductDetails())
-                .thenReturn(getConstructedPolicyProductDeatails(1));
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PSPACK_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMPSPack2TaskSuccessTest() throws Exception {
-
-        task = new LCMPSPackNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(LCMPolicyRefreshPackUtil.getPolicyProductDetails())
-                .thenReturn(getConstructedPolicyProductDeatails(2));
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PSPACK_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    private List<PolicyProductDetails> getConstructedPolicyProductDeatails(int no) {
-
-        List<PolicyProductDetails> policyProductDetails = new ArrayList<PolicyProductDetails>();
-        PolicyProductDetails currentPolicy = createCurrentPolicy();
-        policyProductDetails.add(currentPolicy);
-        PolicyProductDetails policy_1_3_2 = createPolicy132();
-        policyProductDetails.add(policy_1_3_2);
-        if (no == 2) {
-            PolicyProductDetails policy_1_3_3 = createPolicy133();
-            policyProductDetails.add(policy_1_3_3);
-        }
-        return policyProductDetails;
-    }
-
-    private PolicyProductDetails createPolicy133() {
-
-        PolicyProductDetails policy133 = new PolicyProductDetails();
-        policy133.setPolicyVersion("1.3.0.3");
-        policy133.setCurrentVersion(null);
-        List<ProductVersionDetails> policyVersionDetailsList = new ArrayList<ProductVersionDetails>();
-
-        ProductVersionDetails vra = new ProductVersionDetails();
-        vra.setProductId("vra");
-        vra.setVersions(Arrays.asList("7.4.0", "7.4.1"));
-
-        ProductVersionDetails vrops = new ProductVersionDetails();
-        vrops.setProductId("vrops");
-        vrops.setVersions(Arrays.asList("6.6.1", "6.7.0", "6.8.0"));
-
-        ProductVersionDetails vrli = new ProductVersionDetails();
-        vrli.setProductId("vrli");
-        vrli.setVersions(Arrays.asList("4.5.1", "4.5.3", "4.5.4"));
-
-        policyVersionDetailsList.add(vra);
-        policyVersionDetailsList.add(vrli);
-        policyVersionDetailsList.add(vrops);
-        policy133.setPolicyVersionDetailsList(policyVersionDetailsList);
-        return policy133;
-    }
-
-    private PolicyProductDetails createPolicy132() {
-
-        PolicyProductDetails policy132 = new PolicyProductDetails();
-        policy132.setPolicyVersion("1.3.0.2");
-        policy132.setCurrentVersion(null);
-        List<ProductVersionDetails> policyVersionDetailsList = new ArrayList<ProductVersionDetails>();
-
-        ProductVersionDetails vra = new ProductVersionDetails();
-        vra.setProductId("vra");
-        vra.setVersions(Arrays.asList("7.5.0", "7.4.1", "7.5.1"));
-
-        ProductVersionDetails vrops = new ProductVersionDetails();
-        vrops.setProductId("vrops");
-        vrops.setVersions(Arrays.asList("6.6.1", "6.7.0"));
-
-        ProductVersionDetails vrli = new ProductVersionDetails();
-        vrli.setProductId("vrli");
-        vrli.setVersions(Arrays.asList("4.5.1", "4.5.3", "4.5.4"));
-
-        policyVersionDetailsList.add(vra);
-        policyVersionDetailsList.add(vrli);
-        policyVersionDetailsList.add(vrops);
-        policy132.setPolicyVersionDetailsList(policyVersionDetailsList);
-        return policy132;
-    }
-
-    private PolicyProductDetails createCurrentPolicy() {
-
-        PolicyProductDetails currentPolicy = new PolicyProductDetails();
-        currentPolicy.setPolicyVersion("1.3.0.1");
-        currentPolicy.setCurrentVersion("true");
-        List<ProductVersionDetails> policyVersionDetailsList = new ArrayList<ProductVersionDetails>();
-
-        ProductVersionDetails vra = new ProductVersionDetails();
-        vra.setProductId("vra");
-        vra.setVersions(Arrays.asList("7.4.0", "7.4.1"));
-
-        ProductVersionDetails vrops = new ProductVersionDetails();
-        vrops.setProductId("vrops");
-        vrops.setVersions(Arrays.asList("6.6.1", "6.7.0"));
-
-        ProductVersionDetails vrli = new ProductVersionDetails();
-        vrli.setProductId("vrli");
-        vrli.setVersions(Arrays.asList("4.5.1", "4.5.3"));
-
-        policyVersionDetailsList.add(vra);
-        policyVersionDetailsList.add(vrli);
-        policyVersionDetailsList.add(vrops);
-        currentPolicy.setPolicyVersionDetailsList(policyVersionDetailsList);
-        return currentPolicy;
-    }
-
-    @Test
-    public void checkLCMPSPackTaskNoPacksTest() throws Exception {
-
-        task = new LCMPSPackNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(LCMPolicyRefreshPackUtil.getPolicyProductDetails()).thenReturn(null);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PSPACK_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMPSPackTaskExceptionTest() throws Exception {
-
-        task = new LCMPSPackNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(LCMPolicyRefreshPackUtil.getPolicyProductDetails()).thenThrow(new NullPointerException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-}
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPatchingNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPatchingNotificationTaskTest.java
deleted file mode 100644
index 3fe0861b5d79f8ea906ed998e2e01c557d70645f..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMPatchingNotificationTaskTest.java
+++ /dev/null
@@ -1,192 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.common.notification.util.NotificationUtil;
-import com.vmware.vrealize.lcm.common.patch.Patch;
-import com.vmware.vrealize.lcm.common.patch.PatchInfo;
-import com.vmware.vrealize.lcm.common.patch.ProductPatchRegistry;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.util.ResponseType;
-import com.vmware.vrealize.lcm.util.json.JsonUtil;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({ NotificationUtil.class, JsonUtil.class })
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class LCMPatchingNotificationTaskTest {
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-    private LCMPatchingNotificationTask task = new LCMPatchingNotificationTask();
-
-    private String lcmName = "Vrealize Suite Lifecycle Manager";
-
-    @Before
-    public void setUp() throws Exception {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        PowerMockito.mockStatic(NotificationUtil.class);
-        PowerMockito.mockStatic(JsonUtil.class);
-    }
-
-    @Test
-    public void checkLCMPatchingSuccessTest() throws Exception {
-
-        task = new LCMPatchingNotificationTask();
-        task.setEventService(eventService);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "2.0.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(lcmInfo);
-        PowerMockito.when(NotificationUtil.trimVersion(anyString())).thenReturn("2.0.0");
-        ResponseType responseType = new ResponseType();
-        responseType.setOutputData("Patches found");
-        PowerMockito.when(NotificationUtil.getLCMPatchingMetaData(anyString())).thenReturn(responseType);
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(getConstructedPatchRegistryDetails());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMPatchingEmptyPatchesSuccessTest() throws Exception {
-
-        task = new LCMPatchingNotificationTask();
-        task.setEventService(eventService);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "2.0.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(lcmInfo);
-        PowerMockito.when(NotificationUtil.trimVersion(anyString())).thenReturn("2.0.0");
-        ResponseType responseType = new ResponseType();
-        responseType.setOutputData("Patches found");
-        PowerMockito.when(NotificationUtil.getLCMPatchingMetaData(anyString())).thenReturn(responseType);
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(new ProductPatchRegistry());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMPatchingNullPatchRegistrySuccessTest() throws Exception {
-
-        task = new LCMPatchingNotificationTask();
-        task.setEventService(eventService);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "2.0.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(lcmInfo);
-        PowerMockito.when(NotificationUtil.trimVersion(anyString())).thenReturn("2.0.0");
-        ResponseType responseType = new ResponseType();
-        responseType.setOutputData("Patches found");
-        PowerMockito.when(NotificationUtil.getLCMPatchingMetaData(anyString())).thenReturn(responseType);
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(null);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMPatchingNoPatchDataSuccessTest() throws Exception {
-
-        task = new LCMPatchingNotificationTask();
-        task.setEventService(eventService);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "2.0.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(lcmInfo);
-        PowerMockito.when(NotificationUtil.trimVersion(anyString())).thenReturn("2.0.0");
-        PowerMockito.when(NotificationUtil.getLCMPatchingMetaData(anyString())).thenReturn(new ResponseType());
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(getConstructedPatchRegistryDetails());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    private ProductPatchRegistry getConstructedPatchRegistryDetails() {
-
-        ProductPatchRegistry patchRegistry = new ProductPatchRegistry();
-        Patch patch1 = constructPatch(1);
-        Patch patch2 = constructPatch(2);
-        Map<String, Patch> patchMap = new HashMap<String, Patch>();
-        patchMap.put("patch1", patch1);
-        patchMap.put("patch2", patch2);
-        patchRegistry.setPatches(patchMap);
-        return patchRegistry;
-    }
-
-    private Patch constructPatch(int releaseDate) {
-
-        Patch patch = new Patch();
-        PatchInfo patchInfo = new PatchInfo();
-        patchInfo.setReleaseDate(releaseDate);
-        patch.setPatchInfo(patchInfo);
-        return patch;
-    }
-
-    @Test
-    public void checkLCMPatchingCurrentVersionFailedTest() throws Exception {
-
-        task = new LCMPatchingNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(new HashMap<String, String>());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMPatchingExceptionTest() throws Exception {
-
-        task = new LCMPatchingNotificationTask();
-        task.setEventService(eventService);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "1.3.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenThrow(new NullPointerException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-}
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMUpgradeNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMUpgradeNotificationTaskTest.java
deleted file mode 100644
index 9b42b315035da15feb777c45b7c08590cfa47ba1..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/LCMUpgradeNotificationTaskTest.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.HashMap;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.common.notification.util.NotificationUtil;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.util.ShellExecutor;
-import com.vmware.vrealize.lcm.util.exception.ProcessExecutionException;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({ ShellExecutor.class, NotificationUtil.class })
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class LCMUpgradeNotificationTaskTest {
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-    private LCMUpgradeNotificationTask task = new LCMUpgradeNotificationTask();
-
-    private String successUpgradeOutput = "Checking for available updates, this process can take a few minutes.....\n"
-            + "Available Updates -\n"
-            + "   1.3.0.14 Build 9069107, Important: Check this KB article before triggering Upgrade - https://kb.vmware.com/s/article/56511";
-
-    private String wrongUpgradeOutput = "No Updates";
-
-    private String lcmName = "Vrealize Suite Lifecycle Manager";
-
-    @Before
-    public void setUp() throws Exception {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        PowerMockito.mockStatic(ShellExecutor.class);
-        PowerMockito.mockStatic(NotificationUtil.class);
-    }
-
-    @Test
-    public void checkLCMUpgradeTaskSuccessTest() throws Exception {
-
-        task = new LCMUpgradeNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(ShellExecutor.execute(anyString(), anyString(), anyString()))
-                .thenReturn(successUpgradeOutput);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "1.3.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(lcmInfo);
-        PowerMockito.when(NotificationUtil.trimVersion(anyString())).thenReturn("1.3.0");
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_UPGRADE_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMUpgradeCurrentVersionFailedTest() throws Exception {
-
-        task = new LCMUpgradeNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(new HashMap<String, String>());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMUpgradeTaskNoUpgradesSuccessTest() throws Exception {
-
-        task = new LCMUpgradeNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(ShellExecutor.execute(anyString(), anyString(), anyString())).thenReturn(wrongUpgradeOutput);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "1.3.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(lcmInfo);
-        PowerMockito.when(NotificationUtil.trimVersion(anyString())).thenReturn("1.3.0");
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_UPGRADE_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkLCMUpgradeTaskShellExecutorExceptionTest() throws Exception {
-
-        task = new LCMUpgradeNotificationTask();
-        task.setEventService(eventService);
-        HashMap<String, String> lcmInfo = new HashMap<String, String>();
-        lcmInfo.put("name", lcmName);
-        lcmInfo.put("version", "1.3.0");
-        PowerMockito.when(NotificationUtil.getLCMInfoFromManifest()).thenReturn(lcmInfo);
-        PowerMockito.when(NotificationUtil.trimVersion(anyString())).thenReturn("1.3.0");
-        PowerMockito.when(ShellExecutor.class, "execute", anyString(), anyString(), anyString())
-                .thenThrow(new ProcessExecutionException("exception", 1, "lcm upgrade check"));
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-}
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyPatchNotificationPropertiesTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyPatchNotificationPropertiesTaskTest.java
deleted file mode 100644
index e561664f838738b63de2b53cbe5e74c3810b2bd3..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ModifyPatchNotificationPropertiesTaskTest.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.services.notification.service.NotificationService;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class ModifyPatchNotificationPropertiesTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private ModifyPatchNotificationPropertiesTask task;
-
-    private ComponentDeploymentSpecification componentSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-    @Mock
-    private NotificationService notificationService;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testModifyPatchPropertiesSuccessTask() {
-
-        task = new ModifyPatchNotificationPropertiesTask();
-        Map<String, Object> injectableProperties = new HashMap<String, Object>();
-        injectableProperties.put("notificationService", notificationService);
-        injectableProperties.put("componentSpec", TestUtil.constructComponentSpecForPatch(componentSpec));
-        TestUtil.injectField(task, injectableProperties);
-        task.setEventService(eventService);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString()))
-                .thenReturn(returnExistingNotificationDTO());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnPatchNotificationPropertiesModified", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void testModifyPatchPropertiesExceptionTask() {
-
-        task = new ModifyPatchNotificationPropertiesTask();
-        Map<String, Object> injectableProperties = new HashMap<String, Object>();
-        injectableProperties.put("notificationService", notificationService);
-        injectableProperties.put("componentSpec", TestUtil.constructComponentSpecForPatch(componentSpec));
-        TestUtil.injectField(task, injectableProperties);
-        task.setEventService(eventService);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenThrow(new NullPointerException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnPatchNotificationPropertiesModified", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void testModifyPatchPropertiesMissingInputsTask() {
-
-        task = new ModifyPatchNotificationPropertiesTask();
-        Map<String, Object> injectableProperties = new HashMap<String, Object>();
-        injectableProperties.put("notificationService", notificationService);
-        injectableProperties.put("componentSpec", new ComponentDeploymentSpecification());
-        TestUtil.injectField(task, injectableProperties);
-        task.setEventService(eventService);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenThrow(new NullPointerException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnPatchNotificationPropertiesModified", argument.getValue().getEventName());
-    }
-
-    private NotificationDTO returnExistingNotificationDTO() {
-
-        NotificationDTO dto = new NotificationDTO();
-        Map<String, String> properties = new HashMap<String, String>();
-        properties.put("environmentName", "vrniImport");
-        dto.setProperties(properties);
-        return dto;
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/NotificationSchedulesTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/NotificationSchedulesTaskTest.java
deleted file mode 100644
index 836819400a62fb0f527d4b2db01c4b6e3f32e193..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/NotificationSchedulesTaskTest.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.NotificationConstants;
-import com.vmware.vrealize.lcm.common.notification.NotificationScheduleRequest;
-import com.vmware.vrealize.lcm.domain.Component;
-import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.util.json.JsonUtil;
-
-@RunWith(PowerMockRunner.class)
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class NotificationSchedulesTaskTest {
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private NotificationSchedulesTask task = new NotificationSchedulesTask();
-
-    @Before
-    public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-    }
-
-    @Test
-    public void initiateRegisterNotificationsTest() throws Exception {
-        setInput(NotificationConstants.REGISTER);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnRegisterNotificationSchedulesTaskInitiated", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void initiateUnRegisterNotificationsTest() throws Exception {
-        setInput(NotificationConstants.UNREGISTER);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnUnRegisterNotificationSchedulesTaskInitiated", argument.getValue().getEventName());
-    }
-
-    public void setInput(String action) {
-        task = new NotificationSchedulesTask();
-        ProductSpecification prodSpec = new ProductSpecification();
-        ComponentDeploymentSpecification cdSpec = new ComponentDeploymentSpecification();
-        List<ComponentDeploymentSpecification> cdSpecList = new ArrayList<>();
-        Component component = new Component();
-        List<NotificationScheduleRequest> list = new ArrayList<>();
-        NotificationScheduleRequest req = new NotificationScheduleRequest();
-        req.setEnvironmentId("1111111");
-        req.setEnvironmentName("one");
-        Map<String, String> products = new HashMap<>();
-        products.put("vra", "7.5.0");
-        req.setProducts(products);
-        list.add(req);
-        Map<String, String> requestParams = new HashMap<>();
-        requestParams.put(NotificationConstants.INCLULDE_LCM, "true");
-        requestParams.put(NotificationConstants.ACTION, action);
-        requestParams.put(NotificationConstants.ENVIRONMENTS, JsonUtil.getJsonDataFromObject(list));
-        component.setProperties(requestParams);
-        cdSpec.setComponent(component);
-        cdSpecList.add(cdSpec);
-        prodSpec.setComponents(cdSpecList);
-        task.productSpec = prodSpec;
-        task.setEventService(eventService);
-    }
-
-
-}
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductPatchingNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductPatchingNotificationTaskTest.java
deleted file mode 100644
index ee6f0c187eefff4ffa69a61788551083311e40cc..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductPatchingNotificationTaskTest.java
+++ /dev/null
@@ -1,314 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.apache.http.conn.ConnectTimeoutException;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-import org.powermock.reflect.Whitebox;
-
-import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.common.notification.util.NotificationUtil;
-import com.vmware.vrealize.lcm.common.patch.Patch;
-import com.vmware.vrealize.lcm.common.patch.Patch.PatchStatus;
-import com.vmware.vrealize.lcm.common.patch.PatchInfo;
-import com.vmware.vrealize.lcm.common.patch.Payload;
-import com.vmware.vrealize.lcm.common.patch.ProductPatchRegistry;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.services.notification.service.NotificationService;
-import com.vmware.vrealize.lcm.util.ResponseType;
-import com.vmware.vrealize.lcm.util.RestHelper;
-import com.vmware.vrealize.lcm.util.json.JsonUtil;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({ LcmSystemPropertiesHelper.class, NotificationUtil.class, JsonUtil.class, RestHelper.class })
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class ProductPatchingNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private ProductPatchingNotificationTask task;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-    @Mock
-    private LcmSystemPropertiesHelper systemPropertiesHelper;
-    @Mock
-    private NotificationService notificationService;
-
-    private String productUuid = "yyyyyyyyyyy";
-    private String environmentId = "xxxxxxxxxxxx";
-    private String productName = "vra";
-    private String currentVersion = "7.4.0";
-    private String environmentName = "UpgradeEnvironment";
-
-    @Before
-    public void setUp() throws Exception {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        LcmSystemPropertiesHelper mockSingleton = PowerMockito.mock(LcmSystemPropertiesHelper.class);
-        Whitebox.setInternalState(LcmSystemPropertiesHelper.class, "instance", mockSingleton);
-        PowerMockito.when(mockSingleton.getLcmProperty(any())).thenReturn("redirectUrl");
-        PowerMockito.mockStatic(NotificationUtil.class);
-        PowerMockito.mockStatic(JsonUtil.class);
-        PowerMockito.mockStatic(RestHelper.class);
-    }
-
-    @Test
-    public void checkProductPatchingSuccessTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        injectField(task, "notificationService", notificationService);
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(getConstructedPatchRegistryDetails());
-        Map<String, String> properties = new HashMap<String, String>();
-        properties.put("patchReleaseDate", "1");
-        properties.put("patchLevelName", "p1");
-        NotificationDTO dto = new NotificationDTO();
-        dto.setProperties(properties);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenReturn(new ResponseType(200, "", "Patches found"));
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenReturn(dto);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    private void injectField(ProductPatchingNotificationTask task, String fieldName, NotificationService value) {
-
-        try {
-            final java.lang.reflect.Field field = task.getClass().getDeclaredField(fieldName);
-            final boolean origionalValue = field.isAccessible();
-            field.setAccessible(true);
-            field.set(task, value);
-            field.setAccessible(origionalValue);
-        } catch (final NoSuchFieldException | IllegalAccessException e) {
-            throw new RuntimeException(e.getMessage(), e);
-        }
-
-    }
-
-    @Test
-    public void checkProductPatchingInvalidParametersTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask();
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductPatchingNoResponseDataTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenReturn(new ResponseType(200, "", ""));
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductPatchingUpdateNotificationExceptionSuccessTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        injectField(task, "notificationService", notificationService);
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(getConstructedPatchRegistryDetails());
-        Map<String, String> properties = new HashMap<String, String>();
-        properties.put("patchReleaseDate", "2");
-        properties.put("patchLevelName", "p2");
-        NotificationDTO dto = new NotificationDTO();
-        dto.setProperties(properties);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenReturn(new ResponseType(200, "", "Patches found"));
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenReturn(dto);
-        PowerMockito.when(notificationService.updateNotification(any())).thenThrow(new NullPointerException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductPatchingRemoteUrlExceptionTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenThrow(new ConnectTimeoutException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductPatchingResponseNullExceptionTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenReturn(null);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductPatchingNoProductRegistryTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenReturn(new ResponseType(200, "", "Patches found"));
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(null);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductPatchingNoActivePatchesTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any()))
-                .thenReturn(getConstructedRevokedPatchRegistryDetails());
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenReturn(new ResponseType(200, "", "Patches found"));
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    private Object getConstructedRevokedPatchRegistryDetails() {
-
-        ProductPatchRegistry patchRegistry = new ProductPatchRegistry();
-        Patch patch1 = constructRevokedPatch(1, "p1");
-        Map<String, Patch> patchMap = new HashMap<String, Patch>();
-        patchMap.put("patch1", patch1);
-        patchRegistry.setPatches(patchMap);
-        return patchRegistry;
-    }
-
-    private Patch constructRevokedPatch(int releaseDate, String patchLevel) {
-
-        Patch patch = new Patch();
-        PatchInfo patchInfo = new PatchInfo();
-        patch.setPatchStatus(PatchStatus.REVOKED);
-        patchInfo.setReleaseDate(releaseDate);
-        patch.setPatchInfo(patchInfo);
-        Payload payload = new Payload();
-        payload.setProductPatchLevel(patchLevel);
-        patch.setPayload(payload);
-        return patch;
-    }
-
-    @Test
-    public void checkProductPatchingAlreadyPatchAppliedTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        injectField(task, "notificationService", notificationService);
-        PowerMockito.when(JsonUtil.jsonStringToObject(any(), any())).thenReturn(getConstructedPatchRegistryDetails());
-        Map<String, String> properties = new HashMap<String, String>();
-        properties.put("patchReleaseDate", "2");
-        properties.put("patchLevelName", "p2");
-        NotificationDTO dto = new NotificationDTO();
-        dto.setProperties(properties);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenReturn(new ResponseType(200, "", "Patches found"));
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenReturn(dto);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCH_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    private ProductPatchRegistry getConstructedPatchRegistryDetails() {
-
-        ProductPatchRegistry patchRegistry = new ProductPatchRegistry();
-        Patch patch1 = constructPatch(1, "p1");
-        Patch patch2 = constructPatch(2, "p2");
-        Map<String, Patch> patchMap = new HashMap<String, Patch>();
-        patchMap.put("patch1", patch1);
-        patchMap.put("patch2", patch2);
-        patchRegistry.setPatches(patchMap);
-        return patchRegistry;
-    }
-
-    private Patch constructPatch(int releaseDate, String patchLevel) {
-
-        Patch patch = new Patch();
-        PatchInfo patchInfo = new PatchInfo();
-        patch.setPatchStatus(PatchStatus.ACTIVE);
-        patchInfo.setReleaseDate(releaseDate);
-        patch.setPatchInfo(patchInfo);
-        Payload payload = new Payload();
-        payload.setProductPatchLevel(patchLevel);
-        patch.setPayload(payload);
-        return patch;
-    }
-
-    @Test
-    public void checkProductPatchingExceptionTest() throws Exception {
-
-        task = new ProductPatchingNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(RestHelper.readRemoteData(anyString(), anyString(), anyString(), any(), anyBoolean(),
-                anyString(), anyString(), any())).thenThrow(new NullPointerException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-}
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradeNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradeNotificationTaskTest.java
deleted file mode 100644
index 42facb3dce78c870959bc09023366449f5923ee6..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradeNotificationTaskTest.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-import org.powermock.reflect.Whitebox;
-
-import com.vmware.vrealize.lcm.common.LcmSystemPropertiesHelper;
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.util.policy.PolicyUtil;
-
-@RunWith(PowerMockRunner.class)
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*",
-        "javax.security.auth.x500.X500Principal" })
-@PrepareForTest({ PolicyUtil.class, LcmSystemPropertiesHelper.class })
-public class ProductUpgradeNotificationTaskTest {
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-    @Mock
-    private LcmSystemPropertiesHelper systemPropertiesHelper;
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-    private ProductUpgradeNotificationTask task = new ProductUpgradeNotificationTask();
-
-    private String productUuid = "yyyyyyyyyyy";
-    private String environmentId = "xxxxxxxxxxxx";
-    private String productName = "vra";
-    private String currentVersion = "7.4.0";
-    private String environmentName = "UpgradeEnvironment";
-
-    @Before
-    public void setUp() throws Exception {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-        PowerMockito.mockStatic(PolicyUtil.class);
-        LcmSystemPropertiesHelper mockSingleton = PowerMockito.mock(LcmSystemPropertiesHelper.class);
-        Whitebox.setInternalState(LcmSystemPropertiesHelper.class, "instance", mockSingleton);
-        PowerMockito.when(mockSingleton.getLcmProperty(any())).thenReturn("redirectUrl");
-    }
-
-    @Test
-    public void checkProductUpgradeSuccessTest() throws Exception {
-
-        task = new ProductUpgradeNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(PolicyUtil.getUpgradeVersion(anyString(), anyString())).thenReturn("7.5.0");
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_UPGRADE_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductUpgradeInvalidParametersTest() throws Exception {
-
-        task = new ProductUpgradeNotificationTask();
-        task.setEventService(eventService);
-        PowerMockito.when(PolicyUtil.getUpgradeVersion(anyString(), anyString())).thenReturn("7.5.0");
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductUpgradeNoUpgradesAvailableTest() throws Exception {
-
-        task = new ProductUpgradeNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(PolicyUtil.getUpgradeVersion(anyString(), anyString())).thenReturn(null);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_UPGRADE_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void checkProductUpgradesExceptionTest() throws Exception {
-
-        task = new ProductUpgradeNotificationTask(productUuid, currentVersion, environmentId, environmentName,
-                productName);
-        task.setEventService(eventService);
-        PowerMockito.when(PolicyUtil.getUpgradeVersion(anyString(), anyString())).thenThrow(new NullPointerException());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("Failed", argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradePatchSchedulerModificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradePatchSchedulerModificationTaskTest.java
deleted file mode 100644
index 42fb8ccc615d8a4395f954e26a33a29a05804b07..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/ProductUpgradePatchSchedulerModificationTaskTest.java
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.NotificationDTO;
-import com.vmware.vrealize.lcm.domain.Component;
-import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.platform.automata.service.EngineScheduleRequestService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.platform.automata.service.domain.EngineScheduleRequest;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-import com.vmware.vrealize.lcm.services.notification.service.NotificationService;
-
-@RunWith(PowerMockRunner.class)
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*",
-        "javax.security.auth.x500.X500Principal" })
-@PrepareForTest({})
-public class ProductUpgradePatchSchedulerModificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private ProductUpgradePatchSchedulerModificationTask task;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-    @Mock
-    private NotificationService notificationService;
-    @Mock
-    private EngineScheduleRequestService engineScheduleRequestService;
-
-    private ComponentDeploymentSpecification componentSpec;
-    private ProductSpecification productSpec;
-
-    @Before
-    public void setUp() throws Exception {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testSchedulerModificationTaskSuccess() throws Exception {
-
-        task = new ProductUpgradePatchSchedulerModificationTask();
-        task.setEventService(eventService);
-        Map<String, Object> injectableProperties = new HashMap<String, Object>();
-        injectableProperties.put("notificationService", notificationService);
-        injectableProperties.put("engineScheduleRequestService", engineScheduleRequestService);
-        injectableProperties.put("componentSpec", constructComponentSpec());
-        injectableProperties.put("currentVersion", "4.6.1");
-        TestUtil.injectField(task, injectableProperties);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString()))
-                .thenReturn(returnExistingNotificationDTO());
-        PowerMockito.when(engineScheduleRequestService.getScheduleRequestByRequestKey(anyString()))
-                .thenReturn(returnExistingScheduleRequest());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnUpgradeNotificationSchedulerTaskCompletion", argument.getValue().getEventName());
-        assertTrue(task.engineScheduleRequestDTOList.size() == 2);
-    }
-
-    @Test
-    public void testSchedulerModificationTaskProductSpecSuccess() throws Exception {
-
-        task = new ProductUpgradePatchSchedulerModificationTask();
-        task.setEventService(eventService);
-        Map<String, Object> injectableProperties = new HashMap<String, Object>();
-        injectableProperties.put("notificationService", notificationService);
-        injectableProperties.put("engineScheduleRequestService", engineScheduleRequestService);
-        injectableProperties.put("componentSpec", constructComponentSpec());
-        injectableProperties.put("currentVersion", "4.6.1");
-        TestUtil.injectField(task, injectableProperties);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString()))
-                .thenReturn(returnExistingNotificationDTO());
-        PowerMockito.when(engineScheduleRequestService.getScheduleRequestByRequestKey(anyString()))
-                .thenReturn(returnExistingScheduleRequest());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnUpgradeNotificationSchedulerTaskCompletion", argument.getValue().getEventName());
-        assertTrue(task.engineScheduleRequestDTOList.size() == 2);
-    }
-
-    @Test
-    public void testSchedulerModificationTaskMissingInputs() throws Exception {
-
-        task = new ProductUpgradePatchSchedulerModificationTask();
-        task.setEventService(eventService);
-        Map<String, Object> injectableProperties = new HashMap<String, Object>();
-        injectableProperties.put("notificationService", notificationService);
-        injectableProperties.put("engineScheduleRequestService", engineScheduleRequestService);
-        injectableProperties.put("currentVersion", "4.6.1");
-        TestUtil.injectField(task, injectableProperties);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnUpgradeNotificationSchedulerTaskCompletion", argument.getValue().getEventName());
-        assertTrue(task.engineScheduleRequestDTOList.isEmpty());
-    }
-
-    @Test
-    public void testSchedulerModificationTaskException() throws Exception {
-
-        task = new ProductUpgradePatchSchedulerModificationTask();
-        task.setEventService(eventService);
-        Map<String, Object> injectableProperties = new HashMap<String, Object>();
-        injectableProperties.put("notificationService", notificationService);
-        injectableProperties.put("engineScheduleRequestService", engineScheduleRequestService);
-        injectableProperties.put("componentSpec", constructComponentSpec());
-        injectableProperties.put("currentVersion", "4.6.1");
-        TestUtil.injectField(task, injectableProperties);
-        PowerMockito.when(notificationService.getNotificationByKey(anyString())).thenThrow(new NullPointerException());
-        PowerMockito.when(engineScheduleRequestService.getScheduleRequestByRequestKey(anyString()))
-                .thenReturn(returnExistingScheduleRequest());
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnUpgradeNotificationSchedulerTaskCompletion", argument.getValue().getEventName());
-        assertTrue(task.engineScheduleRequestDTOList.isEmpty());
-    }
-
-    private EngineScheduleRequest returnExistingScheduleRequest() {
-
-        EngineScheduleRequest scheduledRequest = new EngineScheduleRequest();
-        scheduledRequest.setRequestKey("abc");
-        return scheduledRequest;
-    }
-
-    private NotificationDTO returnExistingNotificationDTO() {
-
-        NotificationDTO dto = new NotificationDTO();
-        Map<String, String> properties = new HashMap<String, String>();
-        properties.put("environmentName", "vrliImportEnvironment");
-        dto.setProperties(properties);
-        return dto;
-    }
-
-    private Object constructComponentSpec() {
-
-        Component comp = new Component();
-        Map<String, String> properties = new HashMap<String, String>();
-        properties.put("environmentId", "xxx");
-        properties.put("productLink", "yyy");
-        properties.put("product", "vrli");
-        properties.put("version", "4.7.0");
-        comp.setProperties(properties);
-        componentSpec = new ComponentDeploymentSpecification();
-        componentSpec.setComponent(comp);
-        return componentSpec;
-    }
-
-
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMPSPackNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMPSPackNotificationTaskTest.java
deleted file mode 100644
index 7eb34ae506f42397f547daaf9506431f2e2ec73c..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMPSPackNotificationTaskTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class RegisterLCMPSPackNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private RegisterLCMPSPackNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testRegisterLCMPatchingTask() {
-
-        task = new RegisterLCMPSPackNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnRegisterLCMPSPackTaskSuccess", argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMPatchingNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMPatchingNotificationTaskTest.java
deleted file mode 100644
index b1d5a2f401094318d375b6fe65edeea3454d4d27..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMPatchingNotificationTaskTest.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class RegisterLCMPatchingNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private RegisterLCMPatchingNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testRegisterLCMPatchingTask() {
-
-        task = new RegisterLCMPatchingNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnRegisterLCMPatchingTaskSuccess", argument.getValue().getEventName());
-    }
-
-
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMUpgradeNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMUpgradeNotificationTaskTest.java
deleted file mode 100644
index 601b9be50b9e5d08e2155ecd240a1391578af0c8..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterLCMUpgradeNotificationTaskTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class RegisterLCMUpgradeNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private RegisterLCMUpgradeNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testRegisterLCMUpgradeTask() {
-
-        task = new RegisterLCMUpgradeNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnRegisterLCMUpgradeTaskSuccess", argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductPatchingNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductPatchingNotificationTaskTest.java
deleted file mode 100644
index 172460a3f475635f9bc98c74f76cc5612b911740..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductPatchingNotificationTaskTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class RegisterProductPatchingNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private RegisterProductPatchingNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testRegisterProductPatchingTask() {
-
-        task = new RegisterProductPatchingNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnRegisterProductPatchingTaskSuccess", argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductUpgradeNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductUpgradeNotificationTaskTest.java
deleted file mode 100644
index c83086bfa2278f49e8843e0b876c41bc5b005521..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/RegisterProductUpgradeNotificationTaskTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class RegisterProductUpgradeNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private RegisterProductUpgradeNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testRegisterProductUpgradeTask() {
-
-        task = new RegisterProductUpgradeNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals("OnRegisterProductUpgradeTaskSuccess", argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMPSPackNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMPSPackNotificationTaskTest.java
deleted file mode 100644
index 3afe0f0e055debf6ffae21f5e07de46f22c87e23..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMPSPackNotificationTaskTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class StartLCMPSPackNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private StartLCMPSPackNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testStartLCMPSPackTask() {
-
-        task = new StartLCMPSPackNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PSPACK_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void testSetProductSpec() {
-
-        task = new StartLCMPSPackNotificationTask();
-        task.setProductSpec(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PSPACK_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMPatchingNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMPatchingNotificationTaskTest.java
deleted file mode 100644
index 15f6fa21eb4b5db02536521ebbe58f607e251630..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMPatchingNotificationTaskTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class StartLCMPatchingNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private StartLCMPatchingNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testStartLCMPatchingTask() {
-
-        task = new StartLCMPatchingNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PATCHING_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void testSetProductSpec() {
-
-        task = new StartLCMPatchingNotificationTask();
-        task.setProductSpec(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_PATCHING_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMUpgradeNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMUpgradeNotificationTaskTest.java
deleted file mode 100644
index b23e80211b796ce2c98004af2d7a8d340e78eab4..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartLCMUpgradeNotificationTaskTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class StartLCMUpgradeNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private StartLCMUpgradeNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testStartLCMUpgradeTask() {
-
-        task = new StartLCMUpgradeNotificationTask(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_UPGRADE_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void testSetProductSpec() {
-
-        task = new StartLCMUpgradeNotificationTask();
-        task.setProductSpec(TestUtil.constructLCMProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.LCM_UPGRADE_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartProductPatchingNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartProductPatchingNotificationTaskTest.java
deleted file mode 100644
index cd9b4cb07f136220a5ddb2bda8a6105a45f126c7..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartProductPatchingNotificationTaskTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class StartProductPatchingNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private StartProductPatchingNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testStartPatchingTask() {
-
-        task = new StartProductPatchingNotificationTask(TestUtil.constructProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCHING_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void testSetProductSpec() {
-
-        task = new StartProductPatchingNotificationTask();
-        task.setProductSpec(TestUtil.constructProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_PATCHING_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartProductUpgradeNotificationTaskTest.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartProductUpgradeNotificationTaskTest.java
deleted file mode 100644
index 07950b199cedf3d56c0a57f66d3085ab0241f45b..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/StartProductUpgradeNotificationTaskTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-
-import com.vmware.vrealize.lcm.common.notification.constants.NotificationCommonConstants;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventService;
-import com.vmware.vrealize.lcm.automata.gateway.service.EventServiceImpl;
-import com.vmware.vrealize.lcm.automata.gateway.model.Event;
-import com.vmware.vrealize.lcm.automata.gateway.repository.EventRepository;
-
-@RunWith(PowerMockRunner.class)
-@PrepareForTest({})
-@PowerMockIgnore({ "javax.net.ssl.*", "javax.crypto.*", "javax.management.*" })
-public class StartProductUpgradeNotificationTaskTest {
-
-    @InjectMocks
-    private EventService eventService = new EventServiceImpl();
-
-    private StartProductUpgradeNotificationTask task;
-
-    private ProductSpecification productSpec;
-
-    @Mock
-    protected Event event;
-    @Mock
-    private EventRepository eventRepository;
-
-    @Before
-    public void setUp() {
-
-        MockitoAnnotations.initMocks(this);
-        when(eventService.saveEvent(any(Event.class))).thenReturn(event);
-    }
-
-    @Test
-    public void testStartProductUpgradeTask() {
-
-        task = new StartProductUpgradeNotificationTask(TestUtil.constructProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_UPGRADE_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-    @Test
-    public void testSetProductSpec() {
-
-        task = new StartProductUpgradeNotificationTask();
-        task.setProductSpec(TestUtil.constructProductSpec(productSpec));
-        task.setEventService(eventService);
-        task.execute();
-        ArgumentCaptor<Event> argument = ArgumentCaptor.forClass(Event.class);
-        verify(eventRepository, times((1))).saveAndFlush(argument.capture());
-        assertEquals(NotificationCommonConstants.PRODUCT_UPGRADE_START_TASK_SUCCESS, argument.getValue().getEventName());
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/TestUtil.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/TestUtil.java
deleted file mode 100644
index 2c0e4ab938c6e5d8470d9acca0bb9bc54069892a..0000000000000000000000000000000000000000
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-notificationplugin/vmlcm-notificationplugin-core/src/test/java/com/vmware/vrealize/lcm/plugin/core/notification/tasks/TestUtil.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
-  * Copyright 2018 VMware, Inc. All Rights Reserved. -- VMware Confidential
-*/
-
-package com.vmware.vrealize.lcm.plugin.core.notification.tasks;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import com.vmware.vrealize.lcm.domain.Component;
-import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
-import com.vmware.vrealize.lcm.domain.ProductSpecification;
-
-public class TestUtil {
-
-    public static ProductSpecification constructLCMProductSpec(ProductSpecification productSpec) {
-
-        ComponentDeploymentSpecification cs = new ComponentDeploymentSpecification();
-        Component component = new Component();
-        component.addProperty("environmentId", "lcm");
-        component.addProperty("productName", "lcm");
-        cs.setComponent(component);
-        List<ComponentDeploymentSpecification> listComps = new ArrayList<>();
-        listComps.add(cs);
-        productSpec = new ProductSpecification();
-        productSpec.setComponents(listComps);
-        return productSpec;
-    }
-
-    public static ComponentDeploymentSpecification constructComponentSpecForPatch(
-            ComponentDeploymentSpecification componentSpec) {
-
-        componentSpec = new ComponentDeploymentSpecification();
-        Component component = new Component();
-        component.addProperty("patchReleaseDate", "1");
-        component.addProperty("patchLevelName", "p1");
-        component.addProperty("product", "vrni");
-        component.addProperty("environmentId", "xxx");
-        componentSpec.setComponent(component);
-        List<ComponentDeploymentSpecification> listComps = new ArrayList<>();
-        listComps.add(componentSpec);
-        return componentSpec;
-    }
-
-    public static ProductSpecification constructProductSpec(ProductSpecification productSpec) {
-
-        ComponentDeploymentSpecification cs = new ComponentDeploymentSpecification();
-        Component component = new Component();
-        component.addProperty("productId", "xxx");
-        component.addProperty("currentVersion", "4.6.0");
-        component.addProperty("environmentId", "yyy");
-        component.addProperty("environmentName", "vrliCreate");
-        component.addProperty("productName", "vrli");
-        cs.setComponent(component);
-        List<ComponentDeploymentSpecification> listComps = new ArrayList<>();
-        listComps.add(cs);
-        productSpec = new ProductSpecification();
-        productSpec.setComponents(listComps);
-        return productSpec;
-    }
-
-    public static void injectField(Object task, Map<String, Object> properties) {
-
-        try {
-            for (Map.Entry<String, Object> entry : properties.entrySet()) {
-                String fieldName = entry.getKey();
-                Object value = entry.getValue();
-                final java.lang.reflect.Field field = task.getClass().getDeclaredField(fieldName);
-                final boolean origionalValue = field.isAccessible();
-                field.setAccessible(true);
-                field.set(task, value);
-                field.setAccessible(origionalValue);
-            }
-
-        } catch (final NoSuchFieldException | IllegalAccessException e) {
-            throw new RuntimeException(e.getMessage(), e);
-        }
-
-    }
-
-}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/exceptions/PspackException.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/exceptions/PspackException.java
new file mode 100644
index 0000000000000000000000000000000000000000..90a7b0bac194b6ac8ef0bc861513e59a379ccaaa
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/exceptions/PspackException.java
@@ -0,0 +1,21 @@
+/**
+ * Copyright 2019 VMware, Inc.  All rights reserved. -- VMware Confidential
+ */
+package com.vmware.vrealize.lcm.commons.patch.exceptions;
+
+import com.vmware.vrealize.lcm.common.error.ErrorCode;
+import com.vmware.vrealize.lcm.common.exception.LcmException;
+
+public class PspackException extends LcmException {
+
+    private static final long serialVersionUID = 1L;
+
+    public PspackException(String message) {
+        super(message);
+    }
+
+    public PspackException(String message, ErrorCode errorCode) {
+        super(message, errorCode);
+    }
+
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/PolicyDetails.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/PolicyDetails.java
new file mode 100644
index 0000000000000000000000000000000000000000..dd7564ccaa9db19c8afef7da8ea5fdeab9f2f089
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/PolicyDetails.java
@@ -0,0 +1,23 @@
+package com.vmware.vrealize.lcm.commons.patch.model;
+
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
+import java.util.List;
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class PolicyDetails {
+    private List<PolicyProductDetails> policyProductDetailsList;
+
+    public PolicyDetails() {
+    }
+
+    public List<PolicyProductDetails> getPolicyProductDetailsList() {
+        return policyProductDetailsList;
+    }
+
+    public void setPolicyProductDetailsList(List<PolicyProductDetails> policyProductDetailsList) {
+        this.policyProductDetailsList = policyProductDetailsList;
+    }
+}
+
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/PolicyProductDetails.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/PolicyProductDetails.java
new file mode 100644
index 0000000000000000000000000000000000000000..397a2a2d6601a48490c1a17a619ea03f5e419ea7
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/PolicyProductDetails.java
@@ -0,0 +1,67 @@
+package com.vmware.vrealize.lcm.commons.patch.model;
+
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
+import java.util.List;
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class PolicyProductDetails {
+    private String policyVersion;
+    private String fileName;
+    private String isCurrentVersion;
+    private String patchLevelRequired;
+    private List<ProductVersionDetails> policyVersionDetailsList;
+
+    public PolicyProductDetails() {
+    }
+
+    public String getPolicyVersion() {
+        return this.policyVersion;
+    }
+
+    public void setPolicyVersion(String policyVersion) {
+        this.policyVersion = policyVersion;
+    }
+
+    public String getFileName() {
+        return this.fileName;
+    }
+
+    public void setFileName(String fileName) {
+        this.fileName = fileName;
+    }
+
+    public List<ProductVersionDetails> getPolicyVersionDetailsList() {
+        return this.policyVersionDetailsList;
+    }
+
+    public void setPolicyVersionDetailsList(List<ProductVersionDetails> policyVersionDetailsList) {
+        this.policyVersionDetailsList = policyVersionDetailsList;
+    }
+
+    public String isCurrentVersion() {
+        return this.isCurrentVersion;
+    }
+
+    public void setCurrentVersion(String isCurrentVersion) {
+        this.isCurrentVersion = isCurrentVersion;
+    }
+
+    public String getIsCurrentVersion() {
+        return this.isCurrentVersion;
+    }
+
+    public void setIsCurrentVersion(String isCurrentVersion) {
+        this.isCurrentVersion = isCurrentVersion;
+    }
+
+    public String getPatchLevelRequired() {
+        return this.patchLevelRequired;
+    }
+
+    public void setPatchLevelRequired(String patchLevelRequired) {
+        this.patchLevelRequired = patchLevelRequired;
+    }
+}
+
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/ProductVersionDetails.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/ProductVersionDetails.java
new file mode 100644
index 0000000000000000000000000000000000000000..90ca9d8c9eb88203980f17b07194bf7599a98047
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/model/ProductVersionDetails.java
@@ -0,0 +1,31 @@
+package com.vmware.vrealize.lcm.commons.patch.model;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
+import java.util.List;
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class ProductVersionDetails {
+    private String productId;
+    private List<String> versions;
+
+    public ProductVersionDetails() {
+    }
+
+    public String getProductId() {
+        return this.productId;
+    }
+
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    public List<String> getVersions() {
+        return this.versions;
+    }
+
+    public void setVersions(List<String> versions) {
+        this.versions = versions;
+    }
+}
+
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/GetPatchDetailsTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/GetPatchDetailsTask.java
index af5bf7affcf8253c32597e56c993b6e2542d6ebd..3346e58168349262dd11eb03025c0000fc0e1c78 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/GetPatchDetailsTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/GetPatchDetailsTask.java
@@ -3,6 +3,7 @@ package com.vmware.vrealize.lcm.plugin.core.patch.tasks;
 import java.util.ArrayList;
 import java.util.List;
 
+import com.vmware.vrealize.lcm.drivers.patch.helper.PatchConstants;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -62,7 +63,7 @@ public class GetPatchDetailsTask extends Task {
                 if (!Strings.isNullOrEmpty(product) && !Strings.isNullOrEmpty(product) && !Strings.isNullOrEmpty(availability)) {
                     logger.info(String.format("Fetching Patches for Product - %s, Version - %s, availability - %s", product, version, availability));
                     patches = PatchUtil.getPatches(product, version, "DOWNLOADED".equalsIgnoreCase(availability) ? Availability.DOWNLOADED : null,
-                            contentDownloadController);
+                            contentDownloadController, PatchConstants.PATCH_PRODUCT_REGISTRY_ABS_LOC_FORMAT);
                 } else {
 
                     patches = PatchUtil.getAllPatchesWithAvaliablity(contentDownloadController, contentRepositoryController);
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/GetPolicyRefreshDetailsTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/GetPolicyRefreshDetailsTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f9c6a8a2639b28c108bc58b67f7b916e463dd6d
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/GetPolicyRefreshDetailsTask.java
@@ -0,0 +1,74 @@
+package com.vmware.vrealize.lcm.plugin.core.patch.tasks;
+
+import com.google.common.base.Strings;
+import com.vmware.vrealize.lcm.commons.patch.Patch;
+import com.vmware.vrealize.lcm.commons.patch.model.PolicyProductDetails;
+import com.vmware.vrealize.lcm.contentrepo.controller.ContentDownloadController;
+import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
+import com.vmware.vrealize.lcm.domain.ProductSpecification;
+import com.vmware.vrealize.lcm.drivers.patch.helper.PatchConstants;
+import com.vmware.vrealize.lcm.drivers.patch.helper.PatchUtil;
+import com.vmware.vrealize.lcm.lcops.common.SettingConstants;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class GetPolicyRefreshDetailsTask extends Task {
+
+    private static final Logger logger = LogManager.getLogger(GetPolicyRefreshDetailsTask.class);
+
+    @In
+    @Out
+    private ProductSpecification productSpec;
+
+    @Inject
+    private ContentDownloadController contentDownloadController;
+
+    @In
+    @Out
+    private ComponentDeploymentSpecification componentSpec = null;
+
+    @Override
+    public void execute() {
+
+        try {
+
+            logger.info("Starting :: GetPolicyRefreshDetailsTask Task....");
+            if (componentSpec == null) {
+                componentSpec = productSpec.getComponents().get(0);
+            }
+
+            String settingsName = componentSpec.getComponent().getProperties().get("settingsName");
+            String methodType = componentSpec.getComponent().getProperties().get("method");
+            String product = componentSpec.getComponent().getProperties().get("productId");
+            String version = componentSpec.getComponent().getProperties().get("productVersion");
+
+            logger.info("Setting Name : " + settingsName);
+            logger.info("Setting method : " + methodType);
+            List<PolicyProductDetails> pspackList = new ArrayList<>();
+            List<Patch> policyRegistryList = new ArrayList<>();
+            if (!Strings.isNullOrEmpty(settingsName) && settingsName.equalsIgnoreCase(SettingConstants.LCM_PSPACK_SETTINGS)) {
+                if (!Strings.isNullOrEmpty(product) && !Strings.isNullOrEmpty(version)) {
+                    logger.info(String.format("Fetching Patches for Product - %s, Version - %s", product, version));
+                    pspackList = PatchUtil.getPspacks(product, version, contentDownloadController);
+                    policyRegistryList = PatchUtil.getPatches(product, version, null, contentDownloadController, PatchConstants.PSPACK_PRODUCT_REGISTRY_ABS_LOC_FORMAT);
+                    logger.info("policyRegistryAvailablityInformation : " + JsonUtil.getPrettyJson(policyRegistryList));
+                }
+
+                logger.info("pspacksAvailablityInformation : " + JsonUtil.getPrettyJson(pspackList));
+                this.addResult("settings", pspackList);
+            }
+            injectEvent("OnPsPackCompleted");
+        } catch (Exception ex) {
+            logger.error("Exception occured while getting PsPack Policy Data ", ex);
+            injectEvent("OnPsPackCompleted");
+        }
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/ProductSupportUpdateTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/ProductSupportUpdateTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..a6b2130d2fc9a0a5215c2a0c20234b75f21e7379
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/ProductSupportUpdateTask.java
@@ -0,0 +1,163 @@
+package com.vmware.vrealize.lcm.plugin.core.patch.tasks;
+
+import com.google.common.base.Strings;
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
+import com.vmware.vrealize.lcm.common.error.ErrorCode;
+import com.vmware.vrealize.lcm.commons.patch.Constants;
+import com.vmware.vrealize.lcm.commons.patch.exceptions.PspackException;
+import com.vmware.vrealize.lcm.commons.patch.model.PolicyProductDetails;
+import com.vmware.vrealize.lcm.contentrepo.controller.ContentDownloadController;
+import com.vmware.vrealize.lcm.contentrepo.controller.ContentLeaseController;
+import com.vmware.vrealize.lcm.contentrepo.controller.ContentRepositoryController;
+import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
+import com.vmware.vrealize.lcm.domain.ProductSpecification;
+import com.vmware.vrealize.lcm.drivers.patch.helper.LcmSelfPatchUtil;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.util.file.FileUtil;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+public class ProductSupportUpdateTask extends Task {
+
+    private static final String POLICY_DATA = "/data/policyrefresh/";
+    private static final String POLICY_FILE = "policy.json";
+    private static final String LCM_POLICY_EXTENSION = "pspak";
+    private static final String ONLINE = "ONLINE-";
+
+    private static final Logger logger = LogManager.getLogger(ProductSupportUpdateTask.class);
+
+    @Inject
+    private ContentRepositoryController contentRepositoryController;
+
+    @Inject
+    private ConfigurationPropertyService configurationPropertyService;
+
+    @Inject
+    private ContentDownloadController contentDownloadController;
+
+    @Inject
+    ContentLeaseController contentLeaseController;
+
+    @In
+    @Out
+    ProductSpecification productSpec = null;
+
+    @In
+    @Out
+    ComponentDeploymentSpecification componentSpec = null;
+
+    private String pspackFileName;
+
+    private static final String getPatchCliProxyLocation() {
+
+        return System.getProperty("vlcm.patch.patchcliproxy", "/opt/vmware/vlcm/selfpatch/patchcliproxy");
+    }
+
+    @Override
+    public void execute() {
+
+        logger.info("Applying pspack - started ");
+
+        boolean valid = false;
+
+        valid = initParams(productSpec, componentSpec);
+        logger.info("init params " + valid);
+        if (valid) {
+
+            if (pspackFileName.startsWith(ONLINE)) {
+                pspackFileName = pspackFileName.split("-")[1] + "." + LCM_POLICY_EXTENSION;
+                logger.info("Policy file available online.");
+                injectEvent("pspackOnlinePatchInstall");
+            } else {
+                injectEvent("");
+            }
+
+        }
+    }
+
+    public boolean isValidFileExtension(String fileName) {
+        if (!FilenameUtils.getExtension(fileName).equalsIgnoreCase(LCM_POLICY_EXTENSION)) {
+            logger.error("Invalid File Extension : " + FilenameUtils.getExtension(fileName));
+            injectFailedEvent(Constants.LCM_PSPACK_UPDATE_ERROR, false, null,
+                    new PspackException("Invalid File Extension : " + FilenameUtils.getExtension(fileName), ErrorCode.ERR_PSPACK_INSTALL_FAILED));
+            return false;
+        }
+        return true;
+    }
+
+    public boolean checkPatchLevel(String policyFilePath) {
+        String policyJsonContent = FileUtil.readFileAsString(policyFilePath);
+        PolicyProductDetails policyProductDetails = JsonUtil.jsonStringToObject(policyJsonContent, PolicyProductDetails.class);
+        String lcmPatchVersion = LcmSelfPatchUtil.getCurrentPatchVersion();
+
+        logger.info("Current Patch level : " + lcmPatchVersion);
+
+        if (!Strings.isNullOrEmpty(policyProductDetails.getPatchLevelRequired())) {
+            logger.info("Patch level required : " + policyProductDetails.getPatchLevelRequired());
+            if (Strings.isNullOrEmpty(lcmPatchVersion) || !lcmPatchVersion.equalsIgnoreCase(policyProductDetails.getPatchLevelRequired())) {
+                String message = policyProductDetails.getPatchLevelRequired() + " needs to be installed before installing addition Product Support.";
+                logger.error(message);
+                injectFailedEvent(Constants.LCM_PSPACK_UPDATE_ERROR, false, null,
+                        new PspackException(message, ErrorCode.ERR_PSPACK_INSTALL_FAILED));
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private boolean initParams(ProductSpecification productSpec, ComponentDeploymentSpecification componentSpec) {
+
+        logger.info("Initializing Parameters ");
+        List<ComponentDeploymentSpecification> compSpecs = productSpec.getComponents();
+        if (compSpecs != null) {
+            for (ComponentDeploymentSpecification compSpec : compSpecs) {
+                if (compSpec.getComponent().getSymbolicName().equals("pspackinstall")) {
+                    Map<String, String> pspackParams = compSpec.getComponent().getProperties();
+                    List<String> retryParams = new ArrayList<>();
+                    if (pspackParams == null) {
+                        logger.error("parameters are missing.");
+                        injectFailedEvent(Constants.LCM_PSPACK_UPDATE_ERROR, false, null,
+                                new PspackException("parameters are missing", ErrorCode.ERR_PSPACK_INSTALL_FAILED));
+                        return false;
+                    }
+                    logger.info("pspackParams map " + pspackParams.size());
+                    String fileName = pspackParams.get("pspackId");
+                    if (StringUtils.isBlank(fileName)) {
+                        logger.error("Policy Refresh File Missing.");
+                        retryParams.add("fileName");
+                        injectFailedEvent(Constants.LCM_PSPACK_UPDATE_ERROR, true, retryParams,
+                                new PspackException("Policy Refresh File Missing", ErrorCode.ERR_PSPACK_INSTALL_FAILED));
+                        return false;
+                    } else {
+                        pspackFileName = fileName;
+                    }
+
+                    String patchFolderPath = POLICY_DATA + FilenameUtils.getBaseName(fileName);
+                    String policyfileNamePath = patchFolderPath + File.separator + POLICY_FILE;
+
+                    if (!isValidFileExtension(fileName)) {
+                        return false;
+                    }
+
+                    if (!checkPatchLevel(policyfileNamePath)) {
+                        return false;
+                    }
+
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/RefreshPspackTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/RefreshPspackTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb4b4e5120415575adb321a4d5d0f0ba71b4a15b
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/patch/tasks/RefreshPspackTask.java
@@ -0,0 +1,226 @@
+/**
+ * Copyright 2019 VMware, Inc.  All rights reserved. -- VMware Confidential
+ */
+package com.vmware.vrealize.lcm.plugin.core.patch.tasks;
+
+import com.google.common.base.Strings;
+import com.vmware.vrealize.lcm.automata.property.service.ConfigurationPropertyService;
+import com.vmware.vrealize.lcm.common.error.ErrorCode;
+import com.vmware.vrealize.lcm.common.server.ServerContext;
+import com.vmware.vrealize.lcm.commons.patch.Patch;
+import com.vmware.vrealize.lcm.commons.patch.ProductPatchRegistry;
+import com.vmware.vrealize.lcm.commons.patch.ProductPatchRegistry.Availability;
+import com.vmware.vrealize.lcm.commons.patch.exceptions.PatchException;
+import com.vmware.vrealize.lcm.commons.patch.model.PolicyProductDetails;
+import com.vmware.vrealize.lcm.commons.patch.model.ProductVersionDetails;
+import com.vmware.vrealize.lcm.contentrepo.controller.ContentDownloadController;
+import com.vmware.vrealize.lcm.contentrepo.controller.ContentRepositoryController;
+import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
+import com.vmware.vrealize.lcm.domain.ProductSpecification;
+import com.vmware.vrealize.lcm.drivers.patch.helper.ContentRepositoryUtil;
+import com.vmware.vrealize.lcm.drivers.patch.helper.PatchConstants;
+import com.vmware.vrealize.lcm.drivers.patch.helper.PatchHelper;
+import com.vmware.vrealize.lcm.lcops.common.SettingConstants;
+import com.vmware.vrealize.lcm.lcops.common.dto.settings.ProxyConfigurationDTO;
+import com.vmware.vrealize.lcm.lcops.controller.ProductPolicyController;
+import com.vmware.vrealize.lcm.lcops.controller.SettingsController;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Inject;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.util.VersionUtil;
+import com.vmware.vrealize.lcm.util.file.FileUtil;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
+import com.vmware.vrealize.lcm.util.model.ProxyConfiguration;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+public class RefreshPspackTask extends Task {
+    private static final Logger logger = LogManager.getLogger(RefreshPspackTask.class);
+
+    @In
+    @Out
+    ProductSpecification productSpec = null;
+
+    @In
+    @Out
+    ComponentDeploymentSpecification componentSpec = null;
+
+    @Inject
+    private ContentRepositoryController contentRepositoryController;
+
+    @Inject
+    private ContentDownloadController contentDownloadController;
+
+    @Inject
+    private ProductPolicyController productPolicyController;
+
+    @Inject
+    private ConfigurationPropertyService configurationPropertyService;
+
+    @Inject
+    private SettingsController settingsController;
+
+    private ProxyConfiguration assignProxyConfigurationFromDTO() {
+        Object proxyData = settingsController.getSettingsData(SettingConstants.LCM_PROXY_SETTINGS, null).getBody();
+        ProxyConfigurationDTO proxyConfigurationDTO = JsonUtil.jsonStringToObject(JsonUtil.jsonObjectToString(proxyData), ProxyConfigurationDTO.class);
+        if (proxyConfigurationDTO == null) {
+            return null;
+        }
+        ProxyConfiguration proxyConfiguration = new ProxyConfiguration();
+        proxyConfiguration.setIsProxyEnabled("" + proxyConfigurationDTO.isProxyEnabled());
+        proxyConfiguration.setProxyHost(proxyConfigurationDTO.getHostName());
+        proxyConfiguration.setProxyUserName(proxyConfigurationDTO.getUserName());
+        proxyConfiguration.setProxyPassword(proxyConfigurationDTO.getPassword());
+        proxyConfiguration.setProxyPort(proxyConfigurationDTO.getPort());
+        return proxyConfiguration;
+    }
+
+    public static PolicyProductDetails getCurrentPolicyData() {
+        String policyHome = ServerContext.getPolicyHome();
+        String lcmPolicyFilePath = policyHome + File.separator + PatchConstants.PSPACK_PRODUCT_POLICY_FILE;
+        String policyData = FileUtil.readFileAsString(lcmPolicyFilePath);
+        PolicyProductDetails policyProductDetails = JsonUtil.jsonStringToObject(policyData, PolicyProductDetails.class);
+        // Todo :: Need to fetch this info using API
+        policyProductDetails.setPolicyVersionDetailsList(new ArrayList<>());
+        policyProductDetails.setCurrentVersion("true");
+        return policyProductDetails;
+    }
+
+    @Override
+    public void execute() {
+        ProxyConfiguration proxyConfiguration = assignProxyConfigurationFromDTO();
+        logger.info("Inside Patch Refresh Task");
+        try {
+            String externalURL = configurationPropertyService.getValueFromKey(PatchConstants.LCM_PATCH_EXTERNAL_REPO_PATH);
+            String policyDownloadUrl = configurationPropertyService.getValueFromKey(PatchConstants.LCM_PSPACK_EXTERNAL_DOWNLOAD_PATH);
+            List<PolicyProductDetails> policyDataList = new ArrayList<>();
+            String version = "8.0.0";
+            if (Strings.isNullOrEmpty(version)) {
+                version = "8.0.0";
+            }
+
+            String versionurl = String.format(policyDownloadUrl, version) + PatchConstants.PSPACK_PRODUCT_POLICY_FILE;
+            String finalPolicyUrl = externalURL + versionurl;
+            logger.info("Final Url to VMware server to download policy files : " + finalPolicyUrl);
+            PolicyProductDetails currentPolicyData = getCurrentPolicyData();
+            String PSPACK_POLICY_LOC_COPY = System.getProperty("java.io.tmpdir") + PatchConstants.PSPACK_PRODUCT_POLICY_FILE + "_copy";
+            logger.info("Syncing product registry file: External Repo File : " + finalPolicyUrl + " Destination File: "
+                    + PSPACK_POLICY_LOC_COPY);
+
+            PatchHelper.downloadFileFromExternalRepo(proxyConfiguration, finalPolicyUrl, PSPACK_POLICY_LOC_COPY);
+            if (FileUtil.fileExists(PSPACK_POLICY_LOC_COPY)) {
+                String policyFileContent = FileUtil.readFileAsString(PSPACK_POLICY_LOC_COPY);
+                List<PolicyProductDetails> policyDataFromWeb = JsonUtil.jsonStringToListObject(policyFileContent, PolicyProductDetails.class);
+
+                for (PolicyProductDetails policyData : policyDataFromWeb) {
+                    // check with current version if higher then add else don't add
+                    if (VersionUtil.versionCompare(policyData.getPolicyVersion(), currentPolicyData.getPolicyVersion()) > 0) {
+                        // Remove vvd spec from pspack
+                        List<ProductVersionDetails> policyVersions = policyData.getPolicyVersionDetailsList();
+                        policyVersions.removeIf(policy -> policy.getProductId().equals("vvd"));
+                        // add the policy
+                        policyDataList.add(policyData);
+                    }
+                }
+
+                if (policyDataList.isEmpty()) {
+                    logger.error("Policy is missing in external repo or downloading external product policy failed.");
+                    injectFailedEvent(ErrorCode.ERR_PSPACK_REFRESH_FAILED.name(), true,
+                            new PatchException("Policy is missing in external repo or downloading external policy failed.",
+                                    ErrorCode.ERR_PSPACK_REFRESH_FAILED));
+                }
+
+            } else {
+                logger.error("Policy information from external repo is not accessible");
+            }
+
+
+            String pspackProductExternalRepo = externalURL + String.format(policyDownloadUrl, version) + PatchConstants.POLICY_PRODUCT_REGISTRY_FILE;
+            logger.info("Final Url to VMware server to download policy product registry files : " + pspackProductExternalRepo);
+            String PATCH_PRODUCT_REGISTRY_LOC_COPY = System.getProperty("java.io.tmpdir") + PatchConstants.POLICY_PRODUCT_REGISTRY_FILE + "_copy";
+            logger.info("Synching product registry file: External Repo File : " + pspackProductExternalRepo + " Destination File: "
+                    + PATCH_PRODUCT_REGISTRY_LOC_COPY);
+
+            PatchHelper.downloadFileFromExternalRepo(proxyConfiguration, pspackProductExternalRepo, PATCH_PRODUCT_REGISTRY_LOC_COPY);
+
+
+            if (FileUtil.fileExists(PATCH_PRODUCT_REGISTRY_LOC_COPY)) {
+                String productFileContent = FileUtil.readFileAsString(PATCH_PRODUCT_REGISTRY_LOC_COPY);
+                ProductPatchRegistry productPatchRegistry = JsonUtil.jsonStringToObject(productFileContent, ProductPatchRegistry.class);
+                if (productPatchRegistry != null) {
+
+                    ProductPatchRegistry oldProductPatchRegistry = null;
+                    String oldProductPatchRegistryLoc = String.format(PatchConstants.PSPACK_PRODUCT_REGISTRY_ABS_LOC_FORMAT,
+                            PatchConstants.PATCH_BASE_PATH, "vrlcm", version);
+                    String oldFileContent = ContentRepositoryUtil.getContentData(PatchConstants.PRODUCT_PATCH_REPO,
+                            oldProductPatchRegistryLoc, contentDownloadController);
+                    if (!Strings.isNullOrEmpty(oldFileContent)) {
+                        oldProductPatchRegistry = JsonUtil.jsonStringToObject(oldFileContent, ProductPatchRegistry.class);
+                    }
+
+                    Map<String, Patch> patches = productPatchRegistry.getPatches();
+                    for (String patchId : patches.keySet()) {
+                        Availability availability = Availability.NOTAVAILABLE;
+                        // If Patch exists, then assign
+                        // its availability to new
+                        // Registry
+                        if (oldProductPatchRegistry != null && oldProductPatchRegistry.getPatchAvailability().containsKey(patchId)) {
+                            availability = oldProductPatchRegistry.getPatchAvailability().get(patchId);
+                            logger.info(String.format("Setting availability status  %s of patch %s to new registry",
+                                    availability.toString(), patchId));
+                        }
+                        productPatchRegistry.getPatchAvailability().put(patchId, availability);
+                    }
+
+                    // handle uploaded patches
+                    if (oldProductPatchRegistry != null && oldProductPatchRegistry.getUploadedPatches() != null) {
+                        // iterate over uploaded patches
+                        for (String uploadedPatchId : oldProductPatchRegistry.getUploadedPatches()) {
+                            if (!productPatchRegistry.getPatches().containsKey(uploadedPatchId)
+                                    && oldProductPatchRegistry.getPatches().containsKey(uploadedPatchId)) {
+                                logger.info("Retaining uploaded patch " + uploadedPatchId);
+                                // uploaded patch is not
+                                // present in new patch
+                                // registry
+                                productPatchRegistry.getPatches().put(uploadedPatchId,
+                                        oldProductPatchRegistry.getPatches().get(uploadedPatchId));
+                                productPatchRegistry.getPatchAvailability().put(uploadedPatchId,
+                                        oldProductPatchRegistry.getPatchAvailability().get(uploadedPatchId));
+                                productPatchRegistry.getUploadedPatches().add(uploadedPatchId);
+                            }
+                        }
+                    }
+
+                    // Finally flush new Patch Registry
+                    productFileContent = JsonUtil.jsonObjectToString(productPatchRegistry);
+                    ContentRepositoryUtil.uploadToContentRepo(PatchConstants.PRODUCT_PATCH_REPO,
+                            String.format(PatchConstants.PSPACK_PRODUCT_REGISTRY_ABS_LOC_FORMAT,
+                                    PatchConstants.PATCH_BASE_PATH, "vrlcm", version), productFileContent, contentRepositoryController,
+                            contentDownloadController);
+                    logger.info("Updated Patch in Product Registry" + (String.format(PatchConstants.PSPACK_PRODUCT_REGISTRY_ABS_LOC_FORMAT,
+                            PatchConstants.PATCH_BASE_PATH, "vrlcm", version)));
+                } else {
+                    logger.error("External Policy Product Registry is corrupt.");
+                    injectFailedEvent(ErrorCode.ERR_PSPACK_REFRESH_FAILED.name(), true,
+                            new PatchException("External Policy Product Registry is corrupt.", ErrorCode.ERR_PSPACK_REFRESH_FAILED));
+                }
+                // Delete _copy File
+                FileUtil.deleteFileOrFolder(PATCH_PRODUCT_REGISTRY_LOC_COPY);
+            } else {
+                logger.error("Policy Product Registry is missing in external repo or downloading external product policy failed.");
+                injectFailedEvent(ErrorCode.ERR_PSPACK_REFRESH_FAILED.name(), true,
+                        new PatchException("Policy Product Registry is missing in external repo or downloading external product policy failed.",
+                                ErrorCode.ERR_PSPACK_REFRESH_FAILED));
+            }
+            injectEvent("OnPspackRefreshSuccess");
+        } catch (Exception e) {
+            injectFailedEvent(ErrorCode.ERR_PSPACK_REFRESH_FAILED.name(), true, e);
+        }
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.lcmpspacksetting.vmf b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.lcmpspacksetting.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..ace03059d79b52c42a33a86fca91d3f87824819e
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.lcmpspacksetting.vmf
@@ -0,0 +1,41 @@
+{
+	"names": [
+		"lcmpspacksetting"
+	],
+	"symbolicName": "com.vmware.vrealize.lcm.plugin.flows.patch.lcmpspacksetting",
+	"version": "1.0.0",
+	"startState": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.GetPolicyRefreshDetailsTask",
+	"finishState": "",
+	"errorState": "",
+	"properties": [
+    ],
+	"states": [
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.GetPolicyRefreshDetailsTask",
+			"onEntry": {
+				"type": "SIMPLE",
+				"symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.GetPolicyRefreshDetailsTask",
+				"stateMachine": null,
+				"workFlow": null
+			},
+			"onExit": null,
+			"onError": null,
+			"events": {
+				"OnPsPackCompleted": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask"
+			}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"onEntry": {
+				"type": "SIMPLE",
+				"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+				"stateMachine": null,
+				"workFlow": null
+			},
+			"onExit": null,
+			"onError": null,
+			"events": {
+			}
+		}
+	]
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.pspackinstall.vmf b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.pspackinstall.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..01e6ce761b7725f710aea422778d9503e6d136c7
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.pspackinstall.vmf
@@ -0,0 +1,55 @@
+{
+	"names": [
+		"pspackinstall"
+	],
+	"symbolicName": "com.vmware.vrealize.lcm.plugin.flows.patch.pspackinstall",
+	"version": "1.0.0",
+	"startState": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.ProductSupportUpdateTask",
+	"finishState": "",
+	"errorState": "",
+	"properties": [
+    ],
+	"states": [
+		{
+            "symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.ProductSupportUpdateTask",
+            "onEntry": {
+                "type": "SIMPLE",
+                "symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.ProductSupportUpdateTask",
+                "stateMachine": null,
+                "workFlow": null
+            },
+            "onExit": null,
+            "onError": null,
+            "events": {
+                "pspackOnlinePatchInstall": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.PatchUpdateTask"
+            }
+        },
+		{
+            "symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.PatchUpdateTask",
+            "onEntry": {
+                "type": "SIMPLE",
+                "symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.PatchUpdateTask",
+                "stateMachine": null,
+                "workFlow": null
+            },
+            "onExit": null,
+            "onError": null,
+            "events": {
+                "OnSuccess": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask"
+            }
+        },
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"onEntry": {
+				"type": "SIMPLE",
+				"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+				"stateMachine": null,
+				"workFlow": null
+			},
+			"onExit": null,
+			"onError": null,
+			"events": {
+			}
+		}
+	]
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.pspackrefresh.vmf b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.pspackrefresh.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..375f561965b9b76b5899d906bf924429ce46187f
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-core/src/main/resources/flows/com.vmware.vrealize.lcm.plugin.flows.patch.pspackrefresh.vmf
@@ -0,0 +1,41 @@
+{
+	"names": [
+		"pspackrefresh"
+	],
+	"symbolicName": "com.vmware.vrealize.lcm.plugin.flows.patch.pspackrefresh",
+	"version": "1.0.0",
+	"startState": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.RefreshPspackTask",
+	"finishState": "",
+	"errorState": "",
+	"properties": [
+    ],
+	"states": [
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.RefreshPspackTask",
+			"onEntry": {
+				"type": "SIMPLE",
+				"symbolicName": "com.vmware.vrealize.lcm.plugin.core.patch.tasks.RefreshPspackTask",
+				"stateMachine": null,
+				"workFlow": null
+			},
+			"onExit": null,
+			"onError": null,
+			"events": {
+				"OnPspackRefreshSuccess": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask"
+			}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"onEntry": {
+				"type": "SIMPLE",
+				"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+				"stateMachine": null,
+				"workFlow": null
+			},
+			"onExit": null,
+			"onError": null,
+			"events": {
+			}
+		}
+	]
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchConstants.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchConstants.java
index 2fdf7d34aaaad77cd00478c4f28b95c66c8e5c04..7bdded0b0ca35738c8ede6076ebaaa4aed0dd588 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchConstants.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchConstants.java
@@ -6,15 +6,23 @@ public class PatchConstants {
     public static final String PATCH_DOWNLOAD_BASE_PATH = "/data/patches";
     public static final String PATCH_MASTER_REGISTRY_FILE = "patchMasterRegistry.json";
     public static final String PATCH_PRODUCT_REGISTRY_FILE = "patchProductRegistry.json";
+    public static final String POLICY_PRODUCT_REGISTRY_FILE = "policyProductRegistry.json";
+    public static final String PSPACK_PRODUCT_POLICY_FILE = "policy.json";
+    public static final String PSPACK_PATH = "policies/";
     public static final String PATCH_MASTER_REGISTRY_LOC = PATCH_BASE_PATH + "/" + PATCH_MASTER_REGISTRY_FILE;
     public static final String PATCH_MASTER_REGISTRY_LOC_WITH_REPO = "/" + PRODUCT_PATCH_REPO + PATCH_BASE_PATH + "/" + PATCH_MASTER_REGISTRY_FILE;
     public static final String PATCH_PRODUCT_AND_VERSION_FORMAT = "/%s/%s/";
     public static final String PATCH_PRODUCT_REGISTRY_REL_LOC_FORMAT = PATCH_PRODUCT_AND_VERSION_FORMAT + PATCH_PRODUCT_REGISTRY_FILE;
+    public static final String PSPACK_PRODUCT_REGISTRY_REL_LOC_FORMAT = PATCH_PRODUCT_AND_VERSION_FORMAT + PSPACK_PATH + POLICY_PRODUCT_REGISTRY_FILE;
+    public static final String PSPACK_POLICY_REL_LOC_FORMAT = PATCH_PRODUCT_AND_VERSION_FORMAT + PSPACK_PATH + PSPACK_PRODUCT_POLICY_FILE;
     public static final String PATCH_PRODUCT_REGISTRY_ABS_LOC_FORMAT = "%s" + PATCH_PRODUCT_REGISTRY_REL_LOC_FORMAT;
+    public static final String PSPACK_PRODUCT_REGISTRY_ABS_LOC_FORMAT = "%s" + PSPACK_PRODUCT_REGISTRY_REL_LOC_FORMAT;
+    public static final String PSPACK_POLICY_ABS_LOC_FORMAT = "%s" + PSPACK_POLICY_REL_LOC_FORMAT;
     public static final String PATCH_PRODUCT_REGISTRY_ABS_LOC_FORMAT_WITH_REPO = "/" + PRODUCT_PATCH_REPO + "%s" + PATCH_PRODUCT_REGISTRY_REL_LOC_FORMAT;
     public static final String PATCH_FILE_ABS_LOC_FORMAT = "%s" + PATCH_PRODUCT_AND_VERSION_FORMAT + "/%s";
 
     public static final String LCM_PATCH_EXTERNAL_REPO_PATH = "lcm.patch.external.repo.path";
+    public static final String LCM_PSPACK_EXTERNAL_DOWNLOAD_PATH = "lcm.pspack.external.product.bundles.url";
 
     public static final String SELFPATCH_HISTORY_FILE = "/opt/vmware/vlcm/selfpatch/history.json";
 }
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchUtil.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchUtil.java
index 546842b1ae149336f07d377f69bd601f5b13494f..8b0fce1f50921c1ecd7cb7cc4382d449e8eda231 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchUtil.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-patchplugin/vmlcm-patchplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/patch/helper/PatchUtil.java
@@ -11,6 +11,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import com.vmware.vrealize.lcm.commons.patch.model.PolicyDetails;
+import com.vmware.vrealize.lcm.commons.patch.model.PolicyProductDetails;
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -99,7 +101,8 @@ public class PatchUtil {
         }
     }
 
-    public static Map<String, Patch> getPatchIdToPatchRecord(String product, String version, ContentDownloadController contentDownloadController) {
+    public static Map<String, Patch> getPatchIdToPatchRecord(String product, String version, ContentDownloadController contentDownloadController,
+                                                             String registryLoc) {
 
         if (product == null || version == null) {
             logger.error(String.format("Product or Version missing. Product %s, Version %s", product, version));
@@ -107,7 +110,7 @@ public class PatchUtil {
         }
 
         Map<String, Patch> patchIdToPatchRecord = null;
-        String patchRegistryLoc = String.format(PatchConstants.PATCH_PRODUCT_REGISTRY_ABS_LOC_FORMAT, PatchConstants.PATCH_BASE_PATH, product, version);
+        String patchRegistryLoc = String.format(registryLoc, PatchConstants.PATCH_BASE_PATH, product, version);
 
         if (ContentRepositoryUtil.checkIfContentAlreadyExists("/" + PatchConstants.PRODUCT_PATCH_REPO + patchRegistryLoc, contentDownloadController)) {
 
@@ -122,6 +125,45 @@ public class PatchUtil {
         return patchIdToPatchRecord;
     }
 
+    public static List<PolicyProductDetails> getPspacks(String product, String version, ContentDownloadController contentDownloadController) {
+
+        if (product == null || version == null) {
+            logger.error(String.format("Product or Version missing. Product %s, Version %s", product, version));
+            return new ArrayList<>();
+        }
+
+        List<PolicyProductDetails> pspackList = new ArrayList<>();
+        List<PolicyProductDetails> pspackIdToPspackRecord = getPspackIdToPspackRecord(product, version, contentDownloadController);
+        if (pspackIdToPspackRecord != null && pspackIdToPspackRecord.size() > 0) {
+            pspackList.addAll(pspackIdToPspackRecord);
+        }
+
+        return pspackList;
+    }
+
+    public static List<PolicyProductDetails> getPspackIdToPspackRecord(String product, String version, ContentDownloadController contentDownloadController) {
+
+        if (product == null || version == null) {
+            logger.error(String.format("Product or Version missing. Product %s, Version %s", product, version));
+            return null;
+        }
+
+        List<PolicyProductDetails> pspackIdToPspackRecord = null;
+        String pspackPolicyLoc = String.format(PatchConstants.PSPACK_POLICY_ABS_LOC_FORMAT, PatchConstants.PATCH_BASE_PATH, product, version);
+
+        if (ContentRepositoryUtil.checkIfContentAlreadyExists("/" + PatchConstants.PRODUCT_PATCH_REPO + pspackPolicyLoc, contentDownloadController)) {
+
+            String fileContent = ContentRepositoryUtil.getContentData(PatchConstants.PRODUCT_PATCH_REPO, pspackPolicyLoc, contentDownloadController);
+            PolicyDetails policyDetails = JsonUtil.jsonStringToObject(fileContent, PolicyDetails.class);
+            if (policyDetails != null) {
+                pspackIdToPspackRecord = policyDetails.getPolicyProductDetailsList();
+            } else {
+                logger.error(String.format("PsPack Policy file is corrupt for Product %s, version %s", product, version));
+            }
+        }
+        return pspackIdToPspackRecord;
+    }
+
     public static void updatePatchAndPatchAvailability(String product, String version, Patch patch, String patchId, Availability availability,
             ContentDownloadController contentDownloadController, ContentRepositoryController contentRepositoryController) {
 
@@ -206,7 +248,8 @@ public class PatchUtil {
         }
     }
 
-    public static List<Patch> getPatches(String product, String version, Availability availabilityFilter, ContentDownloadController contentDownloadController) {
+    public static List<Patch> getPatches(String product, String version, Availability availabilityFilter, ContentDownloadController contentDownloadController
+            , String registryLoc) {
 
         if (product == null || version == null) {
             logger.error(String.format("Product or Version missing. Product %s, Version %s", product, version));
@@ -214,7 +257,7 @@ public class PatchUtil {
         }
 
         List<Patch> patches = new ArrayList<Patch>();
-        Map<String, Patch> patchIdToPatchRecord = getPatchIdToPatchRecord(product, version, contentDownloadController);
+        Map<String, Patch> patchIdToPatchRecord = getPatchIdToPatchRecord(product, version, contentDownloadController, registryLoc);
         if (patchIdToPatchRecord != null && patchIdToPatchRecord.size() > 0) {
             patches.addAll(patchIdToPatchRecord.values());
         }
@@ -328,7 +371,7 @@ public class PatchUtil {
         }
 
         Patch patch = null;
-        Map<String, Patch> patchIdToPatchRecord = getPatchIdToPatchRecord(product, version, contentDownloadController);
+        Map<String, Patch> patchIdToPatchRecord = getPatchIdToPatchRecord(product, version, contentDownloadController, PatchConstants.PATCH_PRODUCT_REGISTRY_ABS_LOC_FORMAT);
         if (patchIdToPatchRecord != null && patchIdToPatchRecord.size() > 0 && patchIdToPatchRecord.containsKey(patchId)) {
             patch = patchIdToPatchRecord.get(patchId);
         }
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-common/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/constants/VraVaInstallConstants.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-common/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/constants/VraVaInstallConstants.java
index 0b26a7035b884dbe924b4fb8158d1e558b19726c..a91f7e01efb0cf9ae51f63ee986fb6a7f2d40dd9 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-common/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/constants/VraVaInstallConstants.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-common/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/constants/VraVaInstallConstants.java
@@ -36,6 +36,7 @@ public class VraVaInstallConstants {
     public static final String REMOVE_ADMIN_PASSWORD_FILE_COMMAND = "rm /tmp/adminpassword.txt";
     public static final String REMOVE_PASSWORD_FILE_COMMAND = "rm /tmp/clusterpassword.txt";
     public static final String FIRST_BOOT_STATUS = "vracli status first-boot --wait=%s";
+    public static final String CERTIFICIATE_INSTALL_COMMAND = "vracli certificate ingress --set /tmp/cert.pem";
     public static final String VRAVA_LOG_BUNDLE_LOCATION = "/root/%s";
 
     public static final String INVALID_VC_LOGIN = "Invalid credentials provided for the vCenter Server : %s, for User : %s";
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaInitializeTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaInitializeTask.java
index cc9c6efc53ca71e6572a4243bf909f1263f339a6..a23e7c47c05fc206d545a9edf2cdd0b5ffd487b0 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaInitializeTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaInitializeTask.java
@@ -112,7 +112,7 @@ public class VraVaInitializeTask extends Task {
             logger.error("Exception while initializing vRA VA : ", e);
             injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SSH_DISABLED, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
         } catch (VraVamiHostNameInvalidException e) {
-            logger.error("Exception while generating vRA VA log Bundle : ", e);
+            logger.error("Exception while initializing vRA VA : ", e);
             injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_HOSTNAME_NOT_REACHABLE, VravaRetryParams.getHostNamePrimaryRetryParams(), e);
         } catch (RuntimeException e) {
             logger.error("Exception while initializing vRA VA : ", e);
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaInstallCertificateTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaInstallCertificateTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..3145c9f191ed4b79b14a83c437f06d57522c7968
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaInstallCertificateTask.java
@@ -0,0 +1,147 @@
+/* Copyright VMware, Inc. All rights reserved. -- VMware Confidential */
+package com.vmware.vrealize.lcm.plugin.core.vra80.task;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import com.vmware.vrealize.lcm.common.LockerType;
+import com.vmware.vrealize.lcm.common.exception.userinput.vra.VraVamiHostNameNotProvidedException;
+import com.vmware.vrealize.lcm.common.exception.userinput.vra.VraVamiPasswordNotProvidedException;
+import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
+import com.vmware.vrealize.lcm.domain.ProductSpecification;
+import com.vmware.vrealize.lcm.drivers.vra80.helpers.PreludeEndpoint;
+import com.vmware.vrealize.lcm.drivers.vra80.helpers.VraPreludeInstallHelper;
+import com.vmware.vrealize.lcm.drivers.vra80.helpers.VravaEngineConstants;
+import com.vmware.vrealize.lcm.locker.common.dto.CertificateResponseDTO;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.LockerObject;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.plugin.core.vra80.task.util.ErrorCodeConstants;
+import com.vmware.vrealize.lcm.plugin.core.vra80.task.util.VravaRetryParams;
+import com.vmware.vrealize.lcm.plugin.core.vra80.task.util.VravaTaskConstants;
+import com.vmware.vrealize.lcm.util.certificate.exceptions.EngineException;
+import com.vmware.vrealize.lcm.util.exception.SshAuthenticationFailureException;
+import com.vmware.vrealize.lcm.util.exception.SshDisabledException;
+import com.vmware.vrealize.lcm.util.json.JsonUtil;
+
+public class VraVaInstallCertificateTask extends Task {
+
+
+    private static final Logger logger = LogManager.getLogger(VraVaInstallCertificateTask.class);
+
+    @In
+    @Out
+    private ProductSpecification productSpec;
+
+    @In
+    @Out
+    private ComponentDeploymentSpecification componentSpec = null;
+
+    @In
+    @Out
+    private PreludeEndpoint preludeEndpoint;
+
+    @LockerObject(type = LockerType.CERTIFICATE, target = "certificateDto")
+    private String certificate;
+
+    @LockerObject(type = LockerType.PASSWORD, target = "cafeRootPassword")
+    private String cafeRootPasswordPrimary;
+
+    private CertificateResponseDTO certificateDto;
+
+    private String cafeRootPassword;
+
+    @Override
+    public void execute() {
+        try {
+
+            logger.info("Starting :: VRA Install Certificate Task....");
+
+            logger.info("certificate : " + JsonUtil.getPrettyJson(certificateDto));
+            logger.info("cafeRootPassword : " + cafeRootPassword);
+            List<String> retryParams = new ArrayList<String>();
+            if (componentSpec == null) {
+                componentSpec = productSpec.getComponents().get(0);
+            }
+            String hostName = componentSpec.getComponent().getProperties().get(VravaEngineConstants.CAFEHOSTNAMEPRIMARY);
+            String rootPassword = componentSpec.getComponent().getProperties().get(VravaEngineConstants.CAFEROOTPASSWORDPRIMARY);
+            String certificate = componentSpec.getComponent().getProperties().get(VravaEngineConstants.CERTIFICATEKEY);
+
+            if (preludeEndpoint == null) {
+                preludeEndpoint = new PreludeEndpoint(hostName, rootPassword);
+            }
+
+            logger.info("Applying cert for VRA VA: " + preludeEndpoint.getVamiHostName());
+            boolean result = VraPreludeInstallHelper.installCertificate(preludeEndpoint, certificateDto.getKey(), certificateDto.getCertChain());
+            logger.info("Result of Install Certificate : " + result);
+            if (!result) {
+                retryParams.add(VravaEngineConstants.LICENSEKEY);
+                injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SET_LICENSE_FAILED, retryParams, new EngineException("Failed to set VRA License Key."));
+                return;
+            }
+
+            /* boolean result;
+            if (!Strings.isNullOrEmpty(licenseKey)) {
+                logger.info("Setting License for VRA VA: " + licenseKey);
+                result = VraPreludeInstallHelper.setLicense(preludeEndpoint, licenseKey);
+                logger.info("Result of Set License : " + result);
+                if (!result) {
+                    retryParams.add(VravaEngineConstants.LICENSEKEY);
+                    injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SET_LICENSE_FAILED, retryParams, new EngineException("Failed to set VRA License Key."));
+                    return;
+                }
+            } else {
+                retryParams.add(VravaEngineConstants.LICENSEKEY);
+                injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SET_LICENSE_FAILED, retryParams, new EngineException("VRA License key not provided."));
+                return;
+            }*/
+            injectEventValue(true);
+        } catch (SshAuthenticationFailureException e) {
+            logger.error("Exception while applying License on vRA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_INVALID_CREDENTIALS, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+        } catch (SshDisabledException e) {
+            logger.error("Exception while applying License on vRA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SSH_DISABLED, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+        } /*catch (VraVamiHostNameInvalidException e) {
+            logger.error("Exception while applying License on vRA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_HOSTNAME_NOT_REACHABLE, true, e);
+          } */catch (RuntimeException e) {
+            logger.error("Exception while applying License on vRA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SSH_EXCEPTION, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+        } catch (VraVamiHostNameNotProvidedException e) {
+            logger.error("Exception while applying License vRA VA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_INVALID_HOSTNAME, VravaRetryParams.getHostNamePrimaryRetryParams(), e);
+        } catch (VraVamiPasswordNotProvidedException e) {
+            logger.error("Exception while applying License vRA VA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_PWD_NOT_PROVIDED, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+        } catch (Exception e) {
+            logger.error("Exception while applying License vRA VA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SET_LICENSE_FAILED, true,
+                    new EngineException("Exception occured while applying License on vRA HostName : " + preludeEndpoint.getVamiHostName()));
+        }
+    }
+
+    public void injectEventValue(boolean result) {
+        if (result) {
+            injectEvent(VravaTaskConstants.VRA_INSTALL_CERTIFICATE_STATE_SUCCESS);
+        } else {
+            injectEvent(VravaTaskConstants.FAILED);
+        }
+    }
+
+    public void setComponent(ComponentDeploymentSpecification component) {
+        this.componentSpec = component;
+    }
+
+    public ProductSpecification getProductSpec() {
+        return productSpec;
+    }
+
+    public void setProductSpec(ProductSpecification productSpec) {
+        this.productSpec = productSpec;
+    }
+}
\ No newline at end of file
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaSetVidmTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaSetVidmTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..242b32c4ae6e85059189995f01530539a342a6aa
--- /dev/null
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/VraVaSetVidmTask.java
@@ -0,0 +1,115 @@
+/* Copyright VMware, Inc. All rights reserved. -- VMware Confidential */
+package com.vmware.vrealize.lcm.plugin.core.vra80.task;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import com.vmware.vrealize.lcm.common.exception.userinput.vra.VraVamiHostNameInvalidException;
+import com.vmware.vrealize.lcm.common.exception.userinput.vra.VraVamiHostNameNotProvidedException;
+import com.vmware.vrealize.lcm.common.exception.userinput.vra.VraVamiPasswordNotProvidedException;
+import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
+import com.vmware.vrealize.lcm.domain.ProductSpecification;
+import com.vmware.vrealize.lcm.drivers.vra80.constants.VraVaInstallConstants;
+import com.vmware.vrealize.lcm.drivers.vra80.helpers.PreludeEndpoint;
+import com.vmware.vrealize.lcm.drivers.vra80.helpers.VraPreludeInstallHelper;
+import com.vmware.vrealize.lcm.drivers.vra80.helpers.VravaEngineConstants;
+import com.vmware.vrealize.lcm.platform.automata.annotation.In;
+import com.vmware.vrealize.lcm.platform.automata.annotation.Out;
+import com.vmware.vrealize.lcm.platform.automata.service.Task;
+import com.vmware.vrealize.lcm.plugin.core.vra80.task.util.ErrorCodeConstants;
+import com.vmware.vrealize.lcm.plugin.core.vra80.task.util.VravaRetryParams;
+import com.vmware.vrealize.lcm.plugin.core.vra80.task.util.VravaTaskConstants;
+import com.vmware.vrealize.lcm.util.certificate.exceptions.EngineException;
+import com.vmware.vrealize.lcm.util.exception.SshAuthenticationFailureException;
+import com.vmware.vrealize.lcm.util.exception.SshDisabledException;
+
+public class VraVaSetVidmTask extends Task {
+
+
+    private static final Logger logger = LogManager.getLogger(VraVaSetVidmTask.class);
+
+    @In
+    @Out
+    private ProductSpecification productSpec;
+
+    @In
+    @Out
+    private ComponentDeploymentSpecification componentSpec = null;
+
+    @In
+    @Out
+    private PreludeEndpoint preludeEndpoint;
+
+    @Override
+    public void execute() {
+        try {
+
+            logger.info("Starting :: Set VRA VA VIDM Task");
+
+            if (componentSpec == null) {
+                componentSpec = productSpec.getComponents().get(0);
+            }
+
+            String hostName = componentSpec.getComponent().getProperties().get(VravaEngineConstants.CAFEHOSTNAMEPRIMARY);
+            String rootPassword = componentSpec.getComponent().getProperties().get(VravaEngineConstants.CAFEROOTPASSWORDPRIMARY);
+            if (preludeEndpoint == null) {
+                preludeEndpoint = new PreludeEndpoint(hostName, rootPassword);
+            }
+
+            String uberAdmin = componentSpec.getComponent().getProperties().get(VraVaInstallConstants.UBER_ADMIN);
+            String vidmHostname = componentSpec.getComponent().getProperties().get(VraVaInstallConstants.VIDM_HOST);
+            String vidmUserPassword = componentSpec.getComponent().getProperties().get(VraVaInstallConstants.VIDM_ADMIN_PASSWORD);
+            boolean result = VraPreludeInstallHelper.setVidmInVRA(preludeEndpoint, vidmHostname, vidmUserPassword, uberAdmin);
+
+            logger.info("Setting VIDM for VRA completed with status : " + result);
+            if (!result) {
+                injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SET_VIDM_FAILED, VravaRetryParams.getVIDMRetryParams(),
+                        new EngineException("Failed to set vIDM Host on vRA VA : " + preludeEndpoint.getVamiHostName()));
+                return;
+            }
+
+        } catch (SshAuthenticationFailureException e) {
+            logger.error("Exception while setting vIDM on vRA VA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_INVALID_CREDENTIALS, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+        } catch (SshDisabledException e) {
+            logger.error("Exception while setting vIDM on vRA VA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SSH_DISABLED, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+        } catch (VraVamiHostNameInvalidException e) {
+            logger.error("Exception while setting vIDM on vRA VA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_HOSTNAME_NOT_REACHABLE, VravaRetryParams.getHostNamePrimaryRetryParams(), e);
+        } catch (RuntimeException e) {
+            logger.error("Exception while setting vIDM on vRA VA : ", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_SSH_EXCEPTION, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+        } catch (VraVamiHostNameNotProvidedException e) {
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_INVALID_HOSTNAME, VravaRetryParams.getHostNamePrimaryRetryParams(), e);
+            logger.error("Exception while setting vIDM on vRA VA : ", e);
+        } catch (VraVamiPasswordNotProvidedException e) {
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_CONFIG_PWD_NOT_PROVIDED, VravaRetryParams.getPasswordPrimaryRetryParams(), e);
+            logger.error("Exception while setting vIDM on vRA VA :", e);
+        } catch (Exception e) {
+            logger.error("Exception while setting vIDM on vRA VA", e);
+            injectFailedEvent(ErrorCodeConstants.LCM_VRA_VA_INITIALIZE_CLUSTER_FAILED, true,
+                    new EngineException("Exception occured while setting vIDM on HostName : " + preludeEndpoint.getVamiHostName()));
+        }
+    }
+
+    public void injectEventValue(boolean result) {
+        if (result) {
+            injectEvent(VravaTaskConstants.VRA_ENGINE_SET_VIDM_VA_STATE_SUCCESS);
+        } else {
+            injectEvent(VravaTaskConstants.FAILED);
+        }
+    }
+
+    public void setComponent(ComponentDeploymentSpecification component) {
+        this.componentSpec = component;
+    }
+
+    public ProductSpecification getProductSpec() {
+        return productSpec;
+    }
+
+    public void setProductSpec(ProductSpecification productSpec) {
+        this.productSpec = productSpec;
+    }
+}
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/util/VravaTaskConstants.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/util/VravaTaskConstants.java
index 51b362da046cb3094bbb3eeb9f3794b71401e360..780e395bddba294461bbf7aeca88e9a31b1680d9 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/util/VravaTaskConstants.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vra80/task/util/VravaTaskConstants.java
@@ -9,6 +9,7 @@ public class VravaTaskConstants {
     public static final String FAILED = "Failed";
     public static final String VRA_ENGINE_DEPLOY_OVA_STATE_SUCCESS = "OnDeployVravaTaskCompletion";
     public static final String VRA_ENGINE_INITIALIZE_VA_STATE_SUCCESS = "OnInitilizeVaCompletion";
+    public static final String VRA_ENGINE_SET_VIDM_VA_STATE_SUCCESS = "OnSetVIDMVaCompletion";
     public static final String VRA_ENGINE_JOIN_CLUSTER_STATE_SUCCESS = "OnJoinClusterCompletion";
     public static final String VRA_ENGINE_LB_SET_STATE_SUCCESS = "OnLoadBalancerSetCompletion";
     public static final String VRA_ENGINE_LICENSE_SET_STATE_SUCCESS = "OnLicenseSetCompletion";
@@ -21,4 +22,5 @@ public class VravaTaskConstants {
     public static final String VRA_ENGINE_VRA_REGISTER_WITH_VROPS_SUCCESS = "OnVropsRegistrationWithVraCompletion";
     public static final String VRA_ENGINE_VRA_REGISTER_WITH_VROPS_START = "OnVropsRegistrationWithVraStarted";
     public static final String VRA_ENGINE_LOG_BUNDLE_STATE_SUCCESS = "OnVravaLogBundleCompletion";
+    public static final String VRA_INSTALL_CERTIFICATE_STATE_SUCCESS = "OnVravaInstallCertificateCompletion";
 }
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VraPreludeInstallHelper.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VraPreludeInstallHelper.java
index 1630488e302e062fb4238b8269387964e420bcbb..9ebb8303867f5738aaf9fdf0fbfedad6b35ae08f 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VraPreludeInstallHelper.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VraPreludeInstallHelper.java
@@ -2,6 +2,7 @@
 
 package com.vmware.vrealize.lcm.drivers.vra80.helpers;
 
+import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.InputStream;
 import java.util.regex.Matcher;
@@ -20,6 +21,7 @@ import org.apache.commons.lang.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.vmware.vrealize.lcm.common.exception.LcmException;
 import com.vmware.vrealize.lcm.common.exception.userinput.vra.VraVamiHostNameInvalidException;
 import com.vmware.vrealize.lcm.drivers.vra80.constants.VraVaInstallConstants;
 import com.vmware.vrealize.lcm.util.CertificateUtil;
@@ -39,7 +41,7 @@ public class VraPreludeInstallHelper {
 
     public static SshResponse runCommandOnVra(PreludeEndpoint preludeEndpoint, String command, String maskedCommand) throws VraVamiHostNameInvalidException {
         logger.info("PRELUDE ENDPOINT HOST :: " + preludeEndpoint.getVamiHostName());
-        logger.info("COMMAND :: " + (StringUtils.isNotBlank(maskedCommand) ? maskedCommand:command));
+        logger.info("COMMAND :: " + (StringUtils.isNotBlank(maskedCommand) ? maskedCommand : command));
         SshResponse sshresponse = null;
         try {
             sshresponse = SshUtils.runCommand(preludeEndpoint.getVamiHostName(), "root", preludeEndpoint.getVamiPassword(), command, maskedCommand);
@@ -63,6 +65,34 @@ public class VraPreludeInstallHelper {
         return sshresponse;
     }
 
+    public static boolean installCertificate(PreludeEndpoint preludeEndpoint, String cert, String key) throws LcmException, VraVamiHostNameInvalidException {
+        logger.info("Replacing certificate on vrb node {}.", preludeEndpoint.getVamiHostName());
+
+        String SSH_REMOTE_FILE_PATTERN = "ssh://%s:%s@%s%s";
+        String VRA_UPLOAD_KEY_FILE = "cert.pem";
+        // Upload cert, key and replace script
+        String encodedPass = SshUtils.getEncodedPassword(preludeEndpoint.getVamiPassword());
+        String toUri = String.format(SSH_REMOTE_FILE_PATTERN, "root", encodedPass, preludeEndpoint.getVamiHostName(), "/tmp");
+
+        StringBuilder certificate = new StringBuilder();
+        certificate.append(key).append("\n").append(cert);
+
+        boolean status = SshUtils.uploadFromInputStream(toUri, new ByteArrayInputStream(certificate.toString().getBytes()), VRA_UPLOAD_KEY_FILE);
+        if (!status) {
+            throw new LcmException("Failed to upload certificate file.");
+        }
+        logger.info("Uploaded file completed with status: {}", status);
+        if (status) {
+
+            // run the vracli to install the certificate
+            SshResponse sshresponse = runCommandOnVra(preludeEndpoint, VraVaInstallConstants.CERTIFICIATE_INSTALL_COMMAND);
+            logger.info("Replace certificate script exited with code '{}' and message: '{}'", sshresponse.getExitStatus(), sshresponse.getOutputData());
+            return checkStatus(sshresponse);
+        } else {
+            throw new LcmException("Failed to upload certificate replacement script.");
+        }
+    }
+
     public static boolean checkirstBootCompleted(PreludeEndpoint preludeEndpoint) throws VraVamiHostNameInvalidException {
 
         boolean result = false;
@@ -315,8 +345,8 @@ public class VraPreludeInstallHelper {
         return result;
     }
 
-    public static ResponseType registerManagmentEndpoint(String cafeHostName,
-            String vropsurl, String vropsusername, String vropspassword,String token,String certificate) {
+    public static ResponseType registerManagmentEndpoint(String cafeHostName, String vropsurl, String vropsusername, String vropspassword, String token,
+            String certificate) {
 
         ResponseType response = null;
 
@@ -333,24 +363,21 @@ public class VraPreludeInstallHelper {
         endpointDetails.setName("vROPS-Integration");
 
         cafeHostName = cafeHostName.startsWith("http://") ? cafeHostName : "http://" + cafeHostName;
-        String managementUrl = cafeHostName +VraVaInstallConstants.ENDPOINT_REGISTRATION_URL;
+        String managementUrl = cafeHostName + VraVaInstallConstants.ENDPOINT_REGISTRATION_URL;
 
         logger.info("Management Endpoint URL: " + managementUrl);
 
         try {
             InputStream requestBody = IOUtils.toInputStream(JsonUtil.jsonObjectToString(endpointDetails));
-            response = RestHelper.readRemoteHttpData(managementUrl, "POST", token, requestBody, true,
-                    "application/json", null);
+            response = RestHelper.readRemoteHttpData(managementUrl, "POST", token, requestBody, true, "application/json", null);
             if (response.getStatusCode() == 200) {
                 logger.info("Management Endpoint Registration successful");
             } else {
-                logger.error(String.format(
-                        "Management Endpoint Registration failed. Response error code: %, Response error message: %s",
-                         response.getStatusCode(), response.getResponseMessage()));
+                logger.error(String.format("Management Endpoint Registration failed. Response error code: %, Response error message: %s",
+                        response.getStatusCode(), response.getResponseMessage()));
             }
         } catch (Exception e) {
-            logger.error("Error occured while registering management endpoint ",
-                    e.getMessage());
+            logger.error("Error occured while registering management endpoint ", e.getMessage());
         }
         return response;
 
@@ -358,23 +385,22 @@ public class VraPreludeInstallHelper {
 
     public static ResponseType getIdentityToken(String hostName, String userName, String password) {
 
-       ResponseType response = null;
+        ResponseType response = null;
 
         hostName = hostName.startsWith("http://") ? hostName : "http://" + hostName;
         String identityTokenUrl = hostName + VraVaInstallConstants.ACCESS_TOKEN_URL;
-        logger.info("Url to get access token is "+identityTokenUrl);
+        logger.info("Url to get access token is " + identityTokenUrl);
         AccessData accessData = new AccessData();
         accessData.setUsername(userName);
         accessData.setPassword(password);
         try {
             InputStream requestBody = IOUtils.toInputStream(JsonUtil.jsonObjectToString(accessData));
-            response = RestHelper.readRemoteHttpData(identityTokenUrl, "POST", null, requestBody, true,
-                    "application/json", null);
+            response = RestHelper.readRemoteHttpData(identityTokenUrl, "POST", null, requestBody, true, "application/json", null);
             if (response.getStatusCode() == 200) {
                 logger.info("Access token fetched successfully");
-            }else{
-                logger.error(String.format(
-                        "Failed to fetch access token. Response error code: %s, Response error message: %s", response.getStatusCode(), response.getResponseMessage()));
+            } else {
+                logger.error(String.format("Failed to fetch access token. Response error code: %s, Response error message: %s", response.getStatusCode(),
+                        response.getResponseMessage()));
             }
         } catch (Exception e) {
             logger.error("Error occured while fetching access token ", e.getMessage());
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VravaEngineConstants.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VravaEngineConstants.java
index 18bc3b63cb37c87adf1d7aff67b6d1c39346418d..9d478ae510b872301c1280bfcb762fd4e1797458 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VravaEngineConstants.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vrapreludeplugin/vmlcm-vrapreludeplugin-driver/src/main/java/com/vmware/vrealize/lcm/drivers/vra80/helpers/VravaEngineConstants.java
@@ -9,6 +9,7 @@ public class VravaEngineConstants {
     public static final String CAFEHOSTNAMEPRIMARY = "cafeHostNamePrimary"; //Used in com.vmware.vrealize.lcm.vidm.core.task.VidmUpdateAllowedRedirectsTask. Please be mindful while changing
     public static final String CAFEPASSWORDPRIMARY = "cafeRootPasswordPrimary";
     public static final String LICENSEKEY = "license";
+    public static final String CERTIFICATEKEY = "certificate";
     public static final String NEW_LICENSEKEY = "licenseKey";
     public static final String CAFEPASSWORD = "cafeRootPassword";
     public static final String CAFEPASSWORDNEW = "cafeRootPasswordNew";
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vropsplugin/vmlcm-vropsplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vrops/tasks/EnvironmentHealthCheckTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vropsplugin/vmlcm-vropsplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vrops/tasks/EnvironmentHealthCheckTask.java
index 9e5ffd048a5e4ea389079492d1457c66862e4753..a450ee58a48162cad6314106fb4a7365e74f3dfa 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vropsplugin/vmlcm-vropsplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vrops/tasks/EnvironmentHealthCheckTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vropsplugin/vmlcm-vropsplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vrops/tasks/EnvironmentHealthCheckTask.java
@@ -12,9 +12,9 @@ import java.util.Map;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import com.vmware.vrealize.lcm.common.EnvironmentHealth;
 import com.vmware.vrealize.lcm.common.Health;
 import com.vmware.vrealize.lcm.domain.ComponentDeploymentSpecification;
-import com.vmware.vrealize.lcm.domain.EnvironmentHealth;
 import com.vmware.vrealize.lcm.domain.ProductSpecification;
 import com.vmware.vrealize.lcm.drivers.vrops.Response;
 import com.vmware.vrealize.lcm.drivers.vrops.VropsEndpoint;
diff --git a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vsphereplugin/vmlcm-vsphereplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vsphere/tasks/FetchInfraDetailsFromVmNameTask.java b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vsphereplugin/vmlcm-vsphereplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vsphere/tasks/FetchInfraDetailsFromVmNameTask.java
index 175a35969df953da8486befcfe3cf8cc4cc05ea0..a95b2d36bc4d9e8fc7d8567a7e7b087631191145 100644
--- a/vmlcm-engineservice/vmlcm-plugins/vmlcm-vsphereplugin/vmlcm-vsphereplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vsphere/tasks/FetchInfraDetailsFromVmNameTask.java
+++ b/vmlcm-engineservice/vmlcm-plugins/vmlcm-vsphereplugin/vmlcm-vsphereplugin-core/src/main/java/com/vmware/vrealize/lcm/plugin/core/vsphere/tasks/FetchInfraDetailsFromVmNameTask.java
@@ -38,6 +38,18 @@ public class FetchInfraDetailsFromVmNameTask extends Task {
     @Out
     private ProductSpecification productSpec;
 
+    @In
+    @Out
+    private String action;
+
+    @In
+    @Out
+    private String importedProductVersion;
+
+    @In
+    @Out
+    private String importedProductName;
+
     /**
      * only for vrops purpose
      */
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/Constants.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/Constants.java
index 180251a5b30aefb14a8e866030f1057a60f92675..4853b5e2642d2bd60ad20d9d85728d292a7f8c9c 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/Constants.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/commons/patch/Constants.java
@@ -32,4 +32,5 @@ public class Constants {
         public static final String CHECK_NAME_PROPERTY_CHECK_PRODUCT_NODE = "Node property check for %s:%s";
         public static final String LCM_PATCH_UPDATE_ERROR = "LCMPATCHUPDATE16002";
         public static final String LCM_UPGRADE_ERROR = "LCMUPGRADE16003";
+        public static final String LCM_PSPACK_UPDATE_ERROR = "LCMPATCHUPDATE16004";
 }
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/RequestType.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/RequestType.java
index 72d56e83ce55a495179f0ba90879e186e1e44b4c..c44610ccc04e35bd759c23f47d78a8ff4369a280 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/RequestType.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/RequestType.java
@@ -63,4 +63,6 @@ public interface RequestType {
     public static String SYSTEM_UPGRADE = "SYSTEM_UPGRADE";
 
     public static String ENVIRONMENT_HEALTH = "ENVIRONMENT_HEALTH";
+
+    public static String SYSTEM_PSPACK_INSTALL = "SYSTEM_PSPACK_INSTALL";
 }
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/ServerUri.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/ServerUri.java
index 4a5549f29a38671283f1330126b0b637aca61fcb..0384a3480b27b082a82fd2a69d31f2f60697672f 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/ServerUri.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/ServerUri.java
@@ -70,6 +70,7 @@ public interface ServerUri {
     public static String LCOPS_PRODUCT_REPLACE_LICENSE = LCOPS_PRODUCT + "/replacelicense";
     public static String LCOPS_PRODUCT_ADD_DATASOURCE = LCOPS_PRODUCT + "/adddatasource";
     public static String LCOPS_SELF_PATCH = LCOPS_BASE_URI + "/selfpatch/patchId/{patchId}";
+    public static String LCOPS_PSPACK = LCOPS_BASE_URI + "/pspack/pspackId/{pspackId}";
     public static String LCOPS_SYSTEM_UPGRADE = LCOPS_BASE_URI + "/systemupgrade";
 
     //public static String LCOPS_GET_ENVIRONMENT = LCOPS_BASE_ENVIRONMENT;
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/SettingConstants.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/SettingConstants.java
index 1f5f381f47eedb74c977b0c689e0c7bbca194cf7..06eaa0ee96cb8010009629326b7d56704e6ff3bd 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/SettingConstants.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-common/src/main/java/com/vmware/vrealize/lcm/lcops/common/SettingConstants.java
@@ -13,6 +13,7 @@ public class SettingConstants {
     public static final String LCM_REBOOT_SETTINGS = "lcmvareboot";
     public static final String LCM_PATCH_SETTINGS = "patchsetting";
     public static final String LCM_OFFLINE_PATCH_SETTINGS = "offlinepatchsetting";
+    public static final String LCM_PSPACK_SETTINGS = "pspacksetting";
 
     public static final String LCM_NTP_SETTINGS = "ntpsetting";
     public static final String LCM_ADMIN_PASSWORD_SETTINGS = "adminpasswordsetting";
@@ -43,6 +44,9 @@ public class SettingConstants {
     public static final String PRODUCT_PATCH_REFRESH_NAME = "patchrefresh";
     public static final String PRODUCT_PATCH_REFRESH_REASON = "Patch Metadata Refresh";
 
+    public static final String LCM_PSPACK_REFRESH_NAME = "pspackrefresh";
+    public static final String LCM_PSPACK_REFRESH_REASON = "Product Support Pack Metadata Refresh";
+
     public static final String OFFLINE_PRODUCT_PATCH_MAPPING_REASON = "offline Patch Mapping";
 
     public static final String PRODUCT_SORUCE_MAPPING_NAME = "sourcemapping";
@@ -60,6 +64,9 @@ public class SettingConstants {
     public static final String LCM_PATCH_SETTINGS_GET = "lcmpatchsetting";
     public static final String LCM_PATCH_SETTINGS_REASON = "Patch settings GET";
 
+    public static final String LCM_PSPACK_SETTINGS_GET = "lcmpspacksetting";
+    public static final String LCM_PSPACK_SETTINGS_REASON = "Pspack settings GET";
+
     public static final String LCM_PATCH_DOWNLOAD_SETTINGS = "patchdownload";
     public static final String LCM_PATCH_DOWNLOAD_SETTINGS_REASON = "Downloading patch for %s %s patchId %s";
 
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/LcmUpdateControllerImpl.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/LcmUpdateControllerImpl.java
index 70767fd444f123267e1c96c02ab5ef29e78cddc3..7c0d7efaee2153828586685c5c712f42b4eba7b5 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/LcmUpdateControllerImpl.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/LcmUpdateControllerImpl.java
@@ -34,4 +34,10 @@ public class LcmUpdateControllerImpl implements LcmUpdateController, BaseControl
     public ResponseEntity<GenericRequestResponse> upgrade(@RequestBody LcmVaUpgradeRequestDTO lcmVaUpgradeDTO) {
         return new ResponseEntity<GenericRequestResponse>(systemService.upgrade(lcmVaUpgradeDTO), HttpStatus.OK);
     }
+
+    @RequestMapping(value = ServerUri.LCOPS_PSPACK, method = RequestMethod.POST, headers = "Accept=application/json")
+    public ResponseEntity<GenericRequestResponse> applyPspack(@PathVariable("pspackId") String pspackId) {
+        logger.info("applyPspack " + pspackId);
+        return new ResponseEntity<GenericRequestResponse>(systemService.applyPspack(pspackId), HttpStatus.OK);
+    }
 }
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/SettingsControllerImpl.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/SettingsControllerImpl.java
index ebc3c13420c2148c83f4e66dae35dd003a88c51e..0df6e21474e294fa6f9d64a247764030a4f9e350 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/SettingsControllerImpl.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/controller/SettingsControllerImpl.java
@@ -316,6 +316,8 @@ public class SettingsControllerImpl implements SettingsController, BaseControlle
                     return ResponseEntity.ok(result);
                 } else if (settingsDTO.getName().equalsIgnoreCase(SettingConstants.LCM_PATCH_SETTINGS)) {
                     return SettingsHelper.handleDynamicSettings(settingsDTO, requestController, engineInterfaceController, queryParams, "GET", null);
+                } else if (settingsDTO.getName().equalsIgnoreCase(SettingConstants.LCM_PSPACK_SETTINGS)) {
+                    return SettingsHelper.handleDynamicSettings(settingsDTO, requestController, engineInterfaceController, queryParams, "GET", null);
                 }
                 return ResponseEntity.ok(settingsDTO.getValue());
             } else {
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemService.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemService.java
index 2c09e73b54c37ebd65476d80596936b70ee2499e..a7cf626978f32b6dbe4d347e752f486908145863 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemService.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemService.java
@@ -8,4 +8,6 @@ public interface SystemService {
     public GenericRequestResponse applyPatch(String patchId);
 
     public GenericRequestResponse upgrade(LcmVaUpgradeRequestDTO lcmVaUpgradeDTO);
+
+    public GenericRequestResponse applyPspack(String pspackId);
 }
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemServiceImpl.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemServiceImpl.java
index c3ab74f771d8f920a67b06cafc307242bb6eccf2..809a17df40dc259aa679e6fb388fb5d012de9bf1 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemServiceImpl.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/service/SystemServiceImpl.java
@@ -43,4 +43,15 @@ public class SystemServiceImpl implements SystemService {
 
         return RequestSubmissionUtil.createRequest(requestController, requestName, RequestType.SYSTEM_UPGRADE, requestReason, inputMap);
     }
+
+    @Override
+    public GenericRequestResponse applyPspack(String pspackId) {
+        String requestName = "pspackinstall";
+        String requestReason = "Pspack Install for LCM System";
+        logger.info("applyPspack " + pspackId);
+
+        LinkedHashMap<String, String> inputMap = new LinkedHashMap<>();
+        inputMap.put("pspackId", pspackId);
+        return RequestSubmissionUtil.createRequest(requestController, requestName, RequestType.SYSTEM_PSPACK_INSTALL, requestReason, inputMap);
+    }
 }
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingInputValidationUtil.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingInputValidationUtil.java
index 220b1adc4d1383833f1971ee5eae94f8d19a8b60..8758379caae126a971b3b275a0cb0bbd24d891a1 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingInputValidationUtil.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingInputValidationUtil.java
@@ -138,7 +138,8 @@ public class SettingInputValidationUtil {
     private static final List<String> IGNORE_VALIDATION_LIST =
             Arrays.asList(SettingConstants.LCM_LOG_BUNDLE_SETTINGS.toLowerCase(), SettingConstants.LCM_REBOOT_SETTINGS.toLowerCase(),
                     SettingConstants.LCM_PATCH_SETTINGS.toLowerCase(), SettingConstants.LCM_PRODUCT_BINARY_SETTINGS.toLowerCase(),
-                    SettingConstants.LCM_SOURCE_MAPPING_SETTINGS.toLowerCase(), SettingConstants.LCM_TELEMETRY_SETTINGS.toLowerCase());
+                    SettingConstants.LCM_SOURCE_MAPPING_SETTINGS.toLowerCase(), SettingConstants.LCM_TELEMETRY_SETTINGS.toLowerCase(),
+                    SettingConstants.LCM_PSPACK_SETTINGS.toLowerCase());
 
 
     public static boolean validateSettingPatch(Object data, SettingsDTO settingsDTO, PropertyInterfaceController propertyInterfaceController,
diff --git a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingsHelper.java b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingsHelper.java
index 23dc3fc757206b794b76dd5ecff784d45c9c931e..c2eba05e7f967fe93aca28858cd541b58ae9fabf 100644
--- a/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingsHelper.java
+++ b/vmlcm-lcopsservice/vmlcm-lcopsservice-core/src/main/java/com/vmware/vrealize/lcm/lcops/util/SettingsHelper.java
@@ -73,6 +73,14 @@ public class SettingsHelper {
                 propsMap.putAll(queryParam);
             }
 
+        } else if (settingsDTO.getName().equalsIgnoreCase(SettingConstants.LCM_PSPACK_SETTINGS)) {
+            requestReason = SettingConstants.LCM_PSPACK_SETTINGS_REASON;
+            requestType = SettingConstants.LCM_PSPACK_SETTINGS_GET;
+            requestName = SettingConstants.LCM_PSPACK_SETTINGS_GET;
+            if (queryParam != null && queryParam.size() > 0) {
+                propsMap.putAll(queryParam);
+            }
+
         } else {
             requestReason = SettingConstants.LCM_GENERIC_SETTINGS_REASON;
             requestType = SettingConstants.LCM_GENERIC_SETTINGS;
@@ -182,6 +190,10 @@ public class SettingsHelper {
             requestName = SettingConstants.PRODUCT_PATCH_REFRESH_NAME;
             requestType = SettingConstants.PRODUCT_PATCH_REFRESH_NAME;
             requestReason = SettingConstants.PRODUCT_PATCH_REFRESH_REASON;
+        } else if (settingsDTO.getName().equalsIgnoreCase(SettingConstants.LCM_PSPACK_SETTINGS)) {
+            requestName = SettingConstants.LCM_PSPACK_REFRESH_NAME;
+            requestType = SettingConstants.LCM_PSPACK_REFRESH_NAME;
+            requestReason = SettingConstants.LCM_PSPACK_REFRESH_REASON;
         } else if (settingsDTO.getName().equalsIgnoreCase(SettingConstants.LCM_SOURCE_MAPPING_SETTINGS)) {
             requestName = SettingConstants.PRODUCT_SORUCE_MAPPING_NAME;
             requestType = SettingConstants.PRODUCT_SORUCE_MAPPING_NAME;
diff --git a/vmlcm-requestservice/vmlcm-requestservice-core/pom.xml b/vmlcm-requestservice/vmlcm-requestservice-core/pom.xml
index 50a614e4d66553e8edf885ddf1afa819448ffa90..ca0ed93faf2cafdf636d668115ef13234de9d47d 100644
--- a/vmlcm-requestservice/vmlcm-requestservice-core/pom.xml
+++ b/vmlcm-requestservice/vmlcm-requestservice-core/pom.xml
@@ -39,6 +39,11 @@
 			<artifactId>vmlcm-dbservice-client</artifactId>
 			<version>${project.version}</version>
 		</dependency>
+		<dependency>
+			<groupId>com.vmware.vrealize.lcm.services</groupId>
+			<artifactId>vmlcm-shellservice-common</artifactId>
+			<version>${project.version}</version>
+		</dependency>
 		<dependency>
 			<groupId>com.vmware.vrealize.lcm.services</groupId>
 			<artifactId>vmlcm-lcopsservice-client</artifactId>
diff --git a/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/AddProductPlanner.java b/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/AddProductPlanner.java
index 11cc6525f1450fec67687ace841fb804015901ed..a22acd1c2e71da6623e419e7d50d18e83019f7a4 100644
--- a/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/AddProductPlanner.java
+++ b/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/AddProductPlanner.java
@@ -78,31 +78,33 @@ public class AddProductPlanner implements RequestPlanner {
 
                 // TODO:TK Need to do lots of null checks here
                 if (vidmProperties != null) {
-                    productSpecsList.addAll(createEnvironmentPlanner
-                            .createVraPreludeDeploymentRequest(product, infrastructureProperties, vidmProperties, existingEnvironmentDTO.getEnvironmentName())
-                            .getProducts());
+                    productSpecsList
+                            .addAll(createEnvironmentPlanner
+                                    .createVraPreludeDeploymentRequest(product, infrastructureProperties, vidmProperties,
+                                            existingEnvironmentRequestDTO.getEnvironmentId(), existingEnvironmentRequestDTO.getEnvironmentName())
+                                    .getProducts());
                 } else {
                     logger.info("VIDM is not installed so we can't install vRA 8.0 so Ignoring the vra request.");
                 }
             } else if (product.getId().equalsIgnoreCase("vra") && VersionUtil.versionCompare(product.getVersion(), "8.0.0") < 0) {
                 productSpecsList.addAll(createEnvironmentPlanner.createVraDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties,
-                        vidmProperties, existingEnvironmentDTO.getEnvironmentId()).getProducts());
+                        vidmProperties, existingEnvironmentRequestDTO.getEnvironmentId(), existingEnvironmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrbc")) {
-                productSpecsList.addAll(createEnvironmentPlanner
-                        .createVrbDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createEnvironmentPlanner.createVrbDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties,
+                        vidmProperties, existingEnvironmentRequestDTO.getEnvironmentId(), existingEnvironmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrli")) {
-                productSpecsList.addAll(createEnvironmentPlanner
-                        .createVrliDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createEnvironmentPlanner.createVrliDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties,
+                        vidmProperties, existingEnvironmentRequestDTO.getEnvironmentId(), existingEnvironmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrops") && VersionUtil.versionCompare(product.getVersion(), "8.0.0") >= 0
                     && product.getProperties().containsKey("ca-enabled")) {
-                productSpecsList.addAll(createEnvironmentPlanner
-                        .createVropsCaDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createEnvironmentPlanner.createVropsCaDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties,
+                        vidmProperties, existingEnvironmentRequestDTO.getEnvironmentId(), existingEnvironmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrops")) {
-                productSpecsList.addAll(createEnvironmentPlanner
-                        .createVropsDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createEnvironmentPlanner.createVropsDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties,
+                        vidmProperties, existingEnvironmentRequestDTO.getEnvironmentId(), existingEnvironmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrni")) {
-                productSpecsList.addAll(createEnvironmentPlanner
-                        .createVrniDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createEnvironmentPlanner.createVrniDeploymentRequest(allproductsIncludingExisting, product, infrastructureProperties,
+                        vidmProperties, existingEnvironmentRequestDTO.getEnvironmentId(), existingEnvironmentRequestDTO.getEnvironmentName()).getProducts());
             }
         }
 
diff --git a/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/CreateEnvironmentPlanner.java b/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/CreateEnvironmentPlanner.java
index 6df79712d10fd648a0682a269ed0b989cad2d0fb..b03e6960920483b37a9b535b8928342c5f67215d 100644
--- a/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/CreateEnvironmentPlanner.java
+++ b/vmlcm-requestservice/vmlcm-requestservice-core/src/main/java/com/vmware/vrealize/lcm/requestservice/core/planner/CreateEnvironmentPlanner.java
@@ -16,6 +16,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import org.springframework.context.ApplicationContext;
+import org.springframework.util.CollectionUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -45,6 +46,7 @@ import com.vmware.vrealize.lcm.requestservice.common.request.dto.VidmPgpoolHostD
 import com.vmware.vrealize.lcm.requestservice.core.planner.common.RequestPlanner;
 import com.vmware.vrealize.lcm.requestservice.util.ProductSpecHelper;
 import com.vmware.vrealize.lcm.requestservice.util.SequenceProductsUtil;
+import com.vmware.vrealize.lcm.shell.common.notification.NotificationScheduleRequest;
 import com.vmware.vrealize.lcm.util.VersionUtil;
 import com.vmware.vrealize.lcm.util.json.JsonUtil;
 
@@ -109,31 +111,35 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
 
                 // TODO:TK Need to do lots of null checks here
                 if (vidmProperties != null) {
-                    productSpecsList.addAll(
-                            createVraPreludeDeploymentRequest(product, infrastructureProperties, vidmProperties, environmentRequestDTO.getEnvironmentId())
-                                    .getProducts());
+                    productSpecsList.addAll(createVraPreludeDeploymentRequest(product, infrastructureProperties, vidmProperties,
+                            environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
                 } else {
                     logger.info("VIDM is not installed so we can't install vRA 8.0 so we will be failing the vra request.");
                     generateErrorObject(requestDTO);
                     return null;
                 }
             } else if (product.getId().equalsIgnoreCase("vidm")) {
-                productSpecsList.addAll(createVidmClusterDeploymentRequest(products, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createVidmClusterDeploymentRequest(products, product, infrastructureProperties, vidmProperties,
+                        environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vra") && VersionUtil.versionCompare(product.getVersion(), "8.0.0") < 0) {
-                productSpecsList.addAll(
-                        createVraDeploymentRequest(products, product, infrastructureProperties, vidmProperties, environmentRequestDTO.getEnvironmentId())
-                                .getProducts());
+                productSpecsList.addAll(createVraDeploymentRequest(products, product, infrastructureProperties, vidmProperties,
+                        environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrbc")) {
-                productSpecsList.addAll(createVrbDeploymentRequest(products, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createVrbDeploymentRequest(products, product, infrastructureProperties, vidmProperties,
+                        environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrli")) {
-                productSpecsList.addAll(createVrliDeploymentRequest(products, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createVrliDeploymentRequest(products, product, infrastructureProperties, vidmProperties,
+                        environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrops") && VersionUtil.versionCompare(product.getVersion(), "8.0.0") >= 0
                     && product.getProperties().containsKey("ca-enabled")) {
-                productSpecsList.addAll(createVropsCaDeploymentRequest(products, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createVropsCaDeploymentRequest(products, product, infrastructureProperties, vidmProperties,
+                        environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrops")) {
-                productSpecsList.addAll(createVropsDeploymentRequest(products, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createVropsDeploymentRequest(products, product, infrastructureProperties, vidmProperties,
+                        environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
             } else if (product.getId().equalsIgnoreCase("vrni")) {
-                productSpecsList.addAll(createVrniDeploymentRequest(products, product, infrastructureProperties, vidmProperties).getProducts());
+                productSpecsList.addAll(createVrniDeploymentRequest(products, product, infrastructureProperties, vidmProperties,
+                        environmentRequestDTO.getEnvironmentId(), environmentRequestDTO.getEnvironmentName()).getProducts());
             }
         }
 
@@ -169,15 +175,60 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
         requestDTO.setErrorCause(JsonUtil.jsonObjectToString(errorCauses));
     }
 
+    public StateMachineInvocationRequest createNotificationSpec(EnvironmentRequestDTO environmentRequestDTO) {
+        StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
+        List<Product> registrationNonImportProducts = new ArrayList<Product>();
+
+        //If import registration will be done after the respective product import state machines.
+        for (Product product : environmentRequestDTO.getProducts()) {
+            if (!Strings.isNullOrEmpty(product.getProperties().get("isImport")) && product.getProperties().get("isImport").equalsIgnoreCase("True")) {
+                registrationNonImportProducts.add(product);
+            }
+        }
+
+        //If there are no import product registrations it will not be added to engine spec.
+        if (!CollectionUtils.isEmpty(registrationNonImportProducts)) {
+
+            //NOTIFICATIONS REGISTRATION FOR DEPLOYED PRODUCTS
+            long createEnvNotificationsRegistrationPriority = 36L;
+
+            ProductSpecification pSpec = new ProductSpecification();
+            ComponentDeploymentSpecification cSpec = new ComponentDeploymentSpecification();
+            cSpec = new ComponentDeploymentSpecification();
+            pSpec.setSymbolicName("notificationschedules");
+            pSpec.setPriority(createEnvNotificationsRegistrationPriority);
+            pSpec.getComponents().add(cSpec);
+            cSpec.setPriority(createEnvNotificationsRegistrationPriority);
+            cSpec.getComponent().setSymbolicName("notificationschedules");
+
+            Map<String, String> productVersions = new HashMap<>();
+            for (Product p : registrationNonImportProducts) {
+                productVersions.put(p.getId(), p.getVersion());
+            }
+
+            List<NotificationScheduleRequest> notificationScheduleRequestList = new ArrayList<>();
+            NotificationScheduleRequest notificationScheduleRequest = new NotificationScheduleRequest();
+            notificationScheduleRequestList.add(notificationScheduleRequest);
+            notificationScheduleRequest.setEnvironmentId(environmentRequestDTO.getEnvironmentId());
+            notificationScheduleRequest.setEnvironmentName(environmentRequestDTO.getEnvironmentName());
+            notificationScheduleRequest.setProducts(productVersions);
+            cSpec.getComponent().getProperties().put("environments", JsonUtil.getJsonDataFromObject(notificationScheduleRequestList));
+            cSpec.getComponent().getProperties().put("includeLcm", "false");
+            cSpec.getComponent().getProperties().put("action", "register");
+            engineJobSpec.addProduct(pSpec);
+        }
+        return engineJobSpec;
+    }
+
     // Needs to check with Kumaran and Jabbar whether to include in the same flow
     // Creating new flow since installation flow is different from previous versions ,
     public StateMachineInvocationRequest createVropsCaDeploymentRequest(List<Product> products, Product vrops, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
         logger.info("createCaVropsDeploymentRequest");
 
         if (!Strings.isNullOrEmpty(vrops.getProperties().get("isImport")) && vrops.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(vrops, infrastructureProperties, engineJobSpec);
+            createImportSpec(vrops, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
             vropsCount = 0L;
@@ -387,13 +438,13 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
 
 
     public StateMachineInvocationRequest createVropsDeploymentRequest(List<Product> products, Product vrops, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
 
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
         logger.info("createVropsDeploymentRequest");
 
         if (!Strings.isNullOrEmpty(vrops.getProperties().get("isImport")) && vrops.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(vrops, infrastructureProperties, engineJobSpec);
+            createImportSpec(vrops, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
             vropsCount = 0L;
@@ -557,12 +608,12 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
     }
 
     public StateMachineInvocationRequest createVrniDeploymentRequest(List<Product> products, Product vrni, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
 
         logger.info("createVrniDeploymentRequest");
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
         if (!Strings.isNullOrEmpty(vrni.getProperties().get("isImport")) && vrni.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(vrni, infrastructureProperties, engineJobSpec);
+            createImportSpec(vrni, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
             Map<String, String> vrniPropMap = new HashMap<>();
@@ -693,11 +744,11 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
     }
 
     public StateMachineInvocationRequest createVraDeploymentRequest(List<Product> products, Product vra, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties, String environmentId) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
 
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
         if (!Strings.isNullOrEmpty(vra.getProperties().get("isImport")) && vra.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(vra, infrastructureProperties, engineJobSpec);
+            createImportSpec(vra, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
             long prechkCount = 0;
@@ -1083,12 +1134,12 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
     }
 
     public StateMachineInvocationRequest createVrliDeploymentRequest(List<Product> products, Product vrli, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
 
         logger.info("createVrliDeploymentRequest");
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
         if (!Strings.isNullOrEmpty(vrli.getProperties().get("isImport")) && vrli.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(vrli, infrastructureProperties, engineJobSpec);
+            createImportSpec(vrli, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
             Map<String, String> vrliPropMap = new HashMap<>();
@@ -1267,7 +1318,7 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
     }
 
     public StateMachineInvocationRequest createVrbDeploymentRequest(List<Product> products, Product vrbc, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
 
         logger.info("createVrbDeploymentRequest");
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
@@ -1276,7 +1327,7 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
         Map<String, String> authTypeWithProps = null;
 
         if (!Strings.isNullOrEmpty(vrbc.getProperties().get("isImport")) && vrbc.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(vrbc, infrastructureProperties, engineJobSpec);
+            createImportSpec(vrbc, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
 
@@ -1663,11 +1714,11 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
     }
 
     public StateMachineInvocationRequest createVraPreludeDeploymentRequest(Product vra, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties, String environmentId) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
 
         if (!Strings.isNullOrEmpty(vra.getProperties().get("isImport")) && vra.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(vra, infrastructureProperties, engineJobSpec);
+            createImportSpec(vra, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
             String nodeJobName = "";
@@ -1832,14 +1883,15 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
         }
     }
 
-    public StateMachineInvocationRequest createVidmDeploymentRequest(Product product, Map<String, String> infrastructureProperties) {
+    public StateMachineInvocationRequest createVidmDeploymentRequest(Product product, Map<String, String> infrastructureProperties, String environmentId,
+            String environmentName) {
         logger.info("CreateEnvironmentPlanner.createVidmDeploymentRequest :: Start");
         Component component = null;
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
         String symbolicName = "deploystandardvidm";
 
         if (!Strings.isNullOrEmpty(product.getProperties().get("isImport")) && product.getProperties().get("isImport").equalsIgnoreCase("True")) {
-            createImportSpec(product, infrastructureProperties, engineJobSpec);
+            createImportSpec(product, infrastructureProperties, engineJobSpec, environmentId, environmentName);
             return engineJobSpec;
         } else {
             String defaultEnvPassword = infrastructureProperties.get("defaultPassword");
@@ -1912,13 +1964,13 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
     }
 
     public StateMachineInvocationRequest createVidmClusterDeploymentRequest(List<Product> products, Product vidm, Map<String, String> infrastructureProperties,
-            Map<String, String> vidmProperties) {
+            Map<String, String> vidmProperties, String environmentId, String environmentName) {
         logger.info("CreateEnvironmentPlanner.createVidmClusterDeploymentRequest :: Start");
         StateMachineInvocationRequest engineJobSpec = new StateMachineInvocationRequest();
         boolean isClustered = isClustered(vidm);
         fillVidmProductProperties(vidm, infrastructureProperties, isClustered);
         if ((!Strings.isNullOrEmpty(vidm.getProperties().get("isImport")) && vidm.getProperties().get("isImport").equalsIgnoreCase("True")) || !isClustered) {
-            return createVidmDeploymentRequest(vidm, infrastructureProperties);
+            return createVidmDeploymentRequest(vidm, infrastructureProperties, environmentId, environmentName);
         } else {
             logger.info("createVidmDeploymentRequest");
             Map<String, String> vidmPropMap = new HashMap<>();
@@ -2430,11 +2482,15 @@ public class CreateEnvironmentPlanner implements RequestPlanner {
         }
     }
 
-    private void createImportSpec(Product product, Map<String, String> infrastructureProperties, StateMachineInvocationRequest engineJobSpec) {
+    private void createImportSpec(Product product, Map<String, String> infrastructureProperties, StateMachineInvocationRequest engineJobSpec,
+            String environmentId, String environmentName) {
         String symbolicName = product.getId() + "importenvironment";
         Component component = new Component();
         component.setSymbolicName(symbolicName);
         component.getProperties().putAll(product.getProperties());
+        //Adding environmentId for notification import use case.
+        component.getProperties().put("environmentId", environmentId);
+        component.getProperties().put("environmentName", environmentName);
         ComponentDeploymentSpecification componentDeploymentSpecification = new ComponentDeploymentSpecification();
         componentDeploymentSpecification.setPriority(importCount);
         componentDeploymentSpecification.setComponent(component);
diff --git a/vmlcm-service/pom.xml b/vmlcm-service/pom.xml
index a9dd31bcdc55aa93dd32f80ef0562c02eb2a52e4..0e37b7c8bb63b6375ca850278d6efc5fe20bb341 100644
--- a/vmlcm-service/pom.xml
+++ b/vmlcm-service/pom.xml
@@ -890,6 +890,11 @@
 			<artifactId>vmlcm-migrationplugin-core</artifactId>
 			<version>${project.version}</version>
 		</dependency>
+		<dependency>
+			<groupId>com.vmware.vrealize.lcm.plugins.notificationplugin</groupId>
+			<artifactId>vmlcm-notificationplugin-core</artifactId>
+			<version>${project.version}</version>
+		</dependency>
 		<dependency>
 			<groupId>io.springfox</groupId>
 			<artifactId>springfox-swagger2</artifactId>
diff --git a/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationConstants.java b/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationConstants.java
index 19d378ae09b409c268eabe9df9f42dfaaa374cab..3b1f459b34d06815f683e85a305bd28755d2db67 100755
--- a/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationConstants.java
+++ b/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationConstants.java
@@ -27,24 +27,24 @@ public class NotificationConstants {
     public static final String PRODUCT_HEALTH_NOTIFICATION = "productHealthNotification";
     public static final String ENVIRONMENT_HEALTH_NOTIFICATION = "environmentHealthNotification";
 
-	public static final String NOTIFICATION_KEY_FORMAT = "%s,%s,%s";
-	public static final String TRUE = "true";
-	public static final String FALSE = "false";
-	public static final String LCM = "lcm";
-	public static final String CURRENT = "current";
-	public static final String INCLULDE_LCM = "includeLcm";
-	public static final String REGISTER = "register";
-	public static final String UNREGISTER = "unregister";
-	public static final String ACTION = "action";
-	public static final String ENVIRONMENTS = "environments";
-	public static final String NOTIFICATION_SCHEDULES_SYMBOLIC_LINK = "notificationschedules";
-	public static final String REGISTER_NOTIFICATIONS_SYMBOLIC_LINK = "registernotifications";
-	public static final String UNREGISTER_NOTIFICATIONS_SYMBOLIC_LINK = "unregisternotifications";
-	public static final String LCM_UPGRADE_NOTIFICATION_SYMBOLIC_LINK = "lcmUpgradeNotification";
-	public static final String LCM_PATCHING_NOTIFICATION_SYMBOLIC_LINK = "lcmPatchingNotification";
-	public static final String LCM_PSPACK_NOTIFICATION_SYMBOLIC_LINK = "lcmPSPackNotification";
-	public static final String PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK = "productUpgradeNotification";
-	public static final String PRODUCT_PATCHING_NOTIFICATION_SYMBOLIC_LINK = "productPatchingNotification";
-	public static final String PRODUCT_HEALTH_NOTIFICATION_SYMBOLIC_LINK = "productHealthNotification";
-	public static final String ENVIRONMENT_HEALTH_NOTIFICATION_SYMBOLIC_LINK = "environmentHealthNotification";
+    public static final String NOTIFICATION_KEY_FORMAT = "%s,%s,%s";
+    public static final String TRUE = "true";
+    public static final String FALSE = "false";
+    public static final String LCM = "lcm";
+    public static final String CURRENT = "current";
+    public static final String INCLULDE_LCM = "includeLcm";
+    public static final String REGISTER = "register";
+    public static final String UNREGISTER = "unregister";
+    public static final String ACTION = "action";
+    public static final String ENVIRONMENTS = "environments";
+    public static final String NOTIFICATION_SCHEDULES_SYMBOLIC_LINK = "notificationschedules";
+    public static final String REGISTER_NOTIFICATIONS_SYMBOLIC_LINK = "registernotifications";
+    public static final String UNREGISTER_NOTIFICATIONS_SYMBOLIC_LINK = "unregisternotifications";
+    public static final String LCM_UPGRADE_NOTIFICATION_SYMBOLIC_LINK = "lcmUpgradeNotification";
+    public static final String LCM_PATCHING_NOTIFICATION_SYMBOLIC_LINK = "lcmPatchingNotification";
+    public static final String LCM_PSPACK_NOTIFICATION_SYMBOLIC_LINK = "lcmPSPackNotification";
+    public static final String PRODUCT_UPGRADE_NOTIFICATION_SYMBOLIC_LINK = "productUpgradeNotification";
+    public static final String PRODUCT_PATCHING_NOTIFICATION_SYMBOLIC_LINK = "productPatchingNotification";
+    public static final String PRODUCT_HEALTH_NOTIFICATION_SYMBOLIC_LINK = "productHealthNotification";
+    public static final String ENVIRONMENT_HEALTH_NOTIFICATION_SYMBOLIC_LINK = "environmentHealthNotification";
 }
diff --git a/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationDTO.java b/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationDTO.java
index 8056e0b3f846bc95225f4c4b23ed94c5cec7d1d3..1d9a4d99632f20b8b76905ccaaa54e9ca3ac950b 100755
--- a/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationDTO.java
+++ b/vmlcm-shellservice/vmlcm-shellservice-common/src/main/java/com/vmware/vrealize/lcm/shell/common/notification/NotificationDTO.java
@@ -5,10 +5,13 @@ package com.vmware.vrealize.lcm.shell.common.notification;
 
 import java.util.Map;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
 /**
  * @author Thangamani K (TK)
  *
  */
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class NotificationDTO {
     private String vmid;
     private String name;
@@ -19,8 +22,8 @@ public class NotificationDTO {
     private String level; // INFO, WARNING, ERROR
     private String source;
     private NotificationStateType state = NotificationStateType.CREATED;
-    protected String redirectUrl;
-    protected String notificationKey;
+    private String redirectUrl;
+    private String notificationKey;
 
     private Map<String, String> properties;
     private Map<String, String> accessProperties; // permission, redirect
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/environmentHealth.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/environmentHealth.vmf
index 83b180befdcdb34fb53b9eacd5a5efac5fe8f541..d8bdf3e8b34bcaa32ab3b25ff7d728f55cbaec29 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/files/environmentHealth.vmf
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/environmentHealth.vmf
@@ -31,6 +31,22 @@
       "task": "com.vmware.vrealize.lcm.drivers.commonplugin.task.inventory.EnvironmentHealthInventoryUpdateTask",
       "properties": {},
       "uiProperties": {}
+    },
+	{
+      "symbolicName": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.EnvironmentHealthNotificationTask",
+      "symbolicNameTxt": null,
+      "type": "SM_STATE",
+      "task": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.EnvironmentHealthNotificationTask",
+      "properties": {},
+      "uiProperties": {}
+    },
+    {
+      "symbolicName": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
+      "symbolicNameTxt": null,
+      "type": "SM_STATE",
+      "task": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
+      "properties": {},
+      "uiProperties": {}
     },
     {
       "symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
@@ -61,7 +77,22 @@
     {
       "name": "OnHealthEnvironmentInventoryUpdateCompleted",
       "source": "com.vmware.vrealize.lcm.drivers.commonplugin.task.inventory.EnvironmentHealthInventoryUpdateTask",
-      "destination": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+      "destination": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.EnvironmentHealthNotificationTask",
+      "type": "SM_EVENT",
+      "properties": {},
+      "uiProperties": {}
+    },    {
+      "name": "OnEnvironmentHealthTaskSuccess",
+      "source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.EnvironmentHealthNotificationTask",
+      "destination": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
+      "type": "SM_EVENT",
+      "properties": {},
+      "uiProperties": {}
+    },
+    {
+      "name": "OnNotificationCreated",
+      "source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
+      "destination": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.FinalTask",
       "type": "SM_EVENT",
       "properties": {},
       "uiProperties": {}
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/environmenthealthschedule.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/environmenthealthschedule.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..9c7cf7c9a52a8be6ac5a14de71557479ad4b084c
--- /dev/null
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/environmenthealthschedule.vmf
@@ -0,0 +1,38 @@
+{
+  "symbolicName": "environmenthealthschedule",
+  "type": "STATEMACHINE",
+  "version": "1.0.0",
+  "startState": "com.vmware.vrealize.lcm.drivers.commonplugin.task.inventory.EnvironmentHealthScheduleTask",
+  "finishState": "",
+  "errorState": "",
+  "properties": {},
+  "uiProperties": {},
+  "nodes": [
+    {
+      "symbolicName": "com.vmware.vrealize.lcm.drivers.commonplugin.task.inventory.EnvironmentHealthScheduleTask",
+      "symbolicNameTxt": null,
+      "type": "SM_STATE",
+      "task": "com.vmware.vrealize.lcm.drivers.commonplugin.task.inventory.EnvironmentHealthScheduleTask",
+      "properties": {},
+      "uiProperties": {}
+    },
+    {
+      "symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+      "symbolicNameTxt": null,
+      "type": "SM_STATE",
+      "task": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+      "properties": {},
+      "uiProperties": {}
+    }
+  ],
+  "edges": [
+    {
+      "name": "OnEnvironmentHealthScheduleCompleted",
+      "source": "com.vmware.vrealize.lcm.drivers.commonplugin.task.inventory.EnvironmentHealthScheduleTask",
+      "destination": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+      "type": "SM_EVENT",
+      "properties": {},
+      "uiProperties": {}
+    }
+  ]
+}
\ No newline at end of file
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/lcmpspacksetting.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/lcmpspacksetting.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..63f1844674a9c61ce601ddca47d47d472979e242
--- /dev/null
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/lcmpspacksetting.vmf
@@ -0,0 +1,33 @@
+{
+  "symbolicName" : "lcmpspacksetting",
+  "type" : "STATEMACHINE",
+  "version" : "1.0.0",
+  "startState" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.GetPolicyRefreshDetailsTask",
+  "finishState" : "",
+  "errorState" : "",
+  "properties" : { },
+  "uiProperties" : { },
+  "nodes" : [ {
+    "symbolicName" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.GetPolicyRefreshDetailsTask",
+    "symbolicNameTxt" : null,
+    "type" : "SIMPLE",
+    "task" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.GetPolicyRefreshDetailsTask",
+    "properties" : { },
+    "uiProperties" : { }
+  }, {
+    "symbolicName" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "symbolicNameTxt" : null,
+    "type" : "SIMPLE",
+    "task" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "properties" : { },
+    "uiProperties" : { }
+  } ],
+  "edges" : [ {
+    "name" : "OnPsPackCompleted",
+    "source" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.GetPolicyRefreshDetailsTask",
+    "destination" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "type" : "SM_EVENT",
+    "properties" : { },
+    "uiProperties" : { }
+  } ]
+}
\ No newline at end of file
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/productPatchingNotification.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/productPatchingNotification.vmf
index 5401b1ed506e96a8748ca05ddaaf509c92d8d814..314e8e63595fe175e1b233981f31f7dcaf7a3051 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/files/productPatchingNotification.vmf
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/productPatchingNotification.vmf
@@ -25,10 +25,10 @@
       "uiProperties": {}
     },
     {
-      "symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "symbolicName": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "symbolicNameTxt": null,
       "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "task": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "properties": {},
       "uiProperties": {}
     },
@@ -53,14 +53,14 @@
     {
       "name": "OnProductPatchTaskSuccess",
       "source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.ProductPatchingNotificationTask",
-      "destination": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "destination": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "type": "SM_EVENT",
       "properties": {},
       "uiProperties": {}
     },
     {
       "name": "OnNotificationCreated",
-      "source": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "destination": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
       "type": "SM_EVENT",
       "properties": {},
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/productUpgradeNotification.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/productUpgradeNotification.vmf
index 20312dbe0b97aade84a9be7d2987255f5d9dcec6..b4776f394d4b4626a1ee8c1e34f4f70d3207e640 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/files/productUpgradeNotification.vmf
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/productUpgradeNotification.vmf
@@ -25,10 +25,10 @@
       "uiProperties": {}
     },
     {
-      "symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "symbolicName": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "symbolicNameTxt": null,
       "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "task": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "properties": {},
       "uiProperties": {}
     },
@@ -53,14 +53,14 @@
     {
       "name": "OnProductUpgradeTaskSuccess",
       "source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.ProductUpgradeNotificationTask",
-      "destination": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "destination": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "type": "SM_EVENT",
       "properties": {},
       "uiProperties": {}
     },
     {
       "name": "OnNotificationCreated",
-      "source": "com.vmware.vrealize.lcm.platform.automata.service.task.SendNotificationTask",
+      "source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.SendNotificationTask",
       "destination": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
       "type": "SM_EVENT",
       "properties": {},
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/pspackinstall.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/pspackinstall.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..902d1ad12313c37acb93119c2a4a53cab663c1f3
--- /dev/null
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/pspackinstall.vmf
@@ -0,0 +1,47 @@
+{
+  "symbolicName" : "pspackinstall",
+  "type" : "STATEMACHINE",
+  "version" : "1.0.0",
+  "startState" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.ProductSupportUpdateTask",
+  "finishState" : "",
+  "errorState" : "",
+  "properties" : { },
+  "uiProperties" : { },
+  "nodes" : [ {
+    "symbolicName" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.ProductSupportUpdateTask",
+    "symbolicNameTxt" : null,
+    "type" : "SIMPLE",
+    "task" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.ProductSupportUpdateTask",
+    "properties" : { },
+    "uiProperties" : { }
+  }, {
+    "symbolicName" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.PatchUpdateTask",
+    "symbolicNameTxt" : null,
+    "type" : "SIMPLE",
+    "task" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.PatchUpdateTask",
+    "properties" : { },
+    "uiProperties" : { }
+  }, {
+    "symbolicName" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "symbolicNameTxt" : null,
+    "type" : "SIMPLE",
+    "task" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "properties" : { },
+    "uiProperties" : { }
+  } ],
+  "edges" : [ {
+    "name" : "pspackOnlinePatchInstall",
+    "source" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.ProductSupportUpdateTask",
+    "destination" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.PatchUpdateTask",
+    "type" : "SM_EVENT",
+    "properties" : { },
+    "uiProperties" : { }
+  }, {
+    "name" : "OnSuccess",
+    "source" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.PatchUpdateTask",
+    "destination" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "type" : "SM_EVENT",
+    "properties" : { },
+    "uiProperties" : { }
+  } ]
+}
\ No newline at end of file
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/pspackrefresh.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/pspackrefresh.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..be092f81acfb6471914fcb541e4a33784a72e710
--- /dev/null
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/pspackrefresh.vmf
@@ -0,0 +1,33 @@
+{
+  "symbolicName" : "pspackrefresh",
+  "type" : "STATEMACHINE",
+  "version" : "1.0.0",
+  "startState" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.RefreshPspackTask",
+  "finishState" : "",
+  "errorState" : "",
+  "properties" : { },
+  "uiProperties" : { },
+  "nodes" : [ {
+    "symbolicName" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.RefreshPspackTask",
+    "symbolicNameTxt" : null,
+    "type" : "SIMPLE",
+    "task" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.RefreshPspackTask",
+    "properties" : { },
+    "uiProperties" : { }
+  }, {
+    "symbolicName" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "symbolicNameTxt" : null,
+    "type" : "SIMPLE",
+    "task" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "properties" : { },
+    "uiProperties" : { }
+  } ],
+  "edges" : [ {
+    "name" : "OnPspackRefreshSuccess",
+    "source" : "com.vmware.vrealize.lcm.plugin.core.patch.tasks.RefreshPspackTask",
+    "destination" : "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+    "type" : "SM_EVENT",
+    "properties" : { },
+    "uiProperties" : { }
+  } ]
+}
\ No newline at end of file
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/vravainstallcertificate.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/vravainstallcertificate.vmf
new file mode 100644
index 0000000000000000000000000000000000000000..7cbe5f2d1df83871338083130d8ac6b5494e763b
--- /dev/null
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/vravainstallcertificate.vmf
@@ -0,0 +1,38 @@
+{
+	"symbolicName": "vravainstallcertificate",
+	"type": "STATEMACHINE",
+	"version": "1.0.0",
+	"startState": "com.vmware.vrealize.lcm.plugin.core.vra80.task.VraVaInstallCertificateTask",
+	"finishState": "",
+	"errorState": "",
+	"properties": {},
+	"uiProperties": {},
+	"nodes": [
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.vra80.task.VraVaInstallCertificateTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.plugin.core.vra80.task.VraVaInstallCertificateTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"properties": {},
+			"uiProperties": {}
+		}
+	],
+	"edges": [
+		{
+			"name": "OnVravaInstallCertificateCompletion",
+			"source": "com.vmware.vrealize.lcm.plugin.core.vra80.task.VraVaInstallCertificateTask",
+			"destination": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		}
+	]
+}
\ No newline at end of file
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/files/vropsimportenvironment.vmf b/vmware-configurations/vmware-common-config/src/main/resources/final/files/vropsimportenvironment.vmf
index 841f6533b2f5664052ccf1a45645bb3648692853..95db3e6ba385274e2a8d554b022223fd5c264673 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/files/vropsimportenvironment.vmf
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/files/vropsimportenvironment.vmf
@@ -1,118 +1,150 @@
 {
-  "symbolicName": "vropsimportenvironment",
-  "type": "STATEMACHINE",
-  "version": "1.0.0",
-  "startState": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
-  "finishState": "",
-  "errorState": "",
-  "properties": {},
-  "uiProperties": {},
-  "nodes": [
-    {
-      "symbolicName": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
-      "symbolicNameTxt": null,
-      "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-      "symbolicName": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
-      "symbolicNameTxt": null,
-      "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-      "symbolicName": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
-      "symbolicNameTxt": null,
-      "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-      "symbolicName": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
-      "symbolicNameTxt": null,
-      "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-        "symbolicName": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
-        "symbolicNameTxt": null,
-        "type": "SM_STATE",
-        "task": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
-        "properties": {},
-        "uiProperties": {}
-    },
-    {
-      "symbolicName": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
-      "symbolicNameTxt": null,
-      "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-      "symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
-      "symbolicNameTxt": null,
-      "type": "SM_STATE",
-      "task": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
-      "properties": {},
-      "uiProperties": {}
-    }
-  ],
-  "edges": [
-    {
-      "name": "OnDiscoveryInitialized",
-      "source": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
-      "destination": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
-      "type": "SM_EVENT",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-      "name": "OnDeploymentsDiscoveryCompleted",
-      "source": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
-      "destination": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
-      "type": "SM_EVENT",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-      "name": "OnVcenterValidationComplete",
-      "source": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
-      "destination": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
-      "type": "SM_EVENT",
-      "properties": {},
-      "uiProperties": {}
-    },
-    {
-       "name": "OnFecthInfraDetailsFromVmNameTaskCompleted",
-       "source": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
-       "destination": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
-       "type": "SM_EVENT",
-       "properties": {},
-       "uiProperties": {}
-     },
-     {
-       "name": "OnImportLicenseTaskSuccess",
-       "source": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
-       "destination": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
-       "type": "SM_EVENT",
-       "properties": {},
-       "uiProperties": {}
-     },
-    {
-      "name": "OnSshConnectionVerifiedSuccessfully",
-      "source": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
-      "destination": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
-      "type": "SM_EVENT",
-      "properties": {},
-      "uiProperties": {}
-    }
-  ]
+	"symbolicName": "vropsimportenvironment",
+	"type": "STATEMACHINE",
+	"version": "1.0.0",
+	"startState": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
+	"finishState": "",
+	"errorState": "",
+	"properties": {},
+	"uiProperties": {},
+	"nodes": [
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.NotificationSchedulesTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.NotificationSchedulesTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.RegisterNotificationSchedulerTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.RegisterNotificationSchedulerTask",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"symbolicName": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"symbolicNameTxt": null,
+			"type": "SM_STATE",
+			"task": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"properties": {},
+			"uiProperties": {}
+		}
+	],
+	"edges": [
+		{
+			"name": "OnDiscoveryInitialized",
+			"source": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.StartDiscoveryTask",
+			"destination": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"name": "OnDeploymentsDiscoveryCompleted",
+			"source": "com.vmware.vrealize.lcm.plugin.core.vrops.tasks.DeploymentsDiscoveryTask",
+			"destination": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"name": "OnVcenterValidationComplete",
+			"source": "com.vmware.vrealize.lcm.drivers.commonplugin.task.ValidateVcenterDetailsTask",
+			"destination": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"name": "OnFecthInfraDetailsFromVmNameTaskCompleted",
+			"source": "com.vmware.vrealize.lcm.plugin.core.vsphere.tasks.FetchInfraDetailsFromVmNameTask",
+			"destination": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"name": "OnImportLicenseTaskSuccess",
+			"source": "com.vmware.vrealize.lcm.plugin.core.licensing.task.ImportLicenseTask",
+			"destination": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"name": "OnSshConnectionVerifiedSuccessfully",
+			"source": "com.vmware.vrealize.lcm.drivers.commonplugin.task.VerifySshConnectionTask",
+			"destination": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.NotificationSchedulesTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"name": "OnRegisterNotificationSchedulesTaskInitiated",
+			"source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.NotificationSchedulesTask",
+			"destination": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.RegisterNotificationSchedulerTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		},
+		{
+			"name": "OnNotificationSchedulerRegistered",
+			"source": "com.vmware.vrealize.lcm.plugin.core.notification.tasks.RegisterNotificationSchedulerTask",
+			"destination": "com.vmware.vrealize.lcm.platform.automata.service.task.FinalTask",
+			"type": "SM_EVENT",
+			"properties": {},
+			"uiProperties": {}
+		}
+	]
 }
\ No newline at end of file
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/vmcontentrepocontent.json b/vmware-configurations/vmware-common-config/src/main/resources/final/vmcontentrepocontent.json
index d788a6e3c6a9dca5668fa119132abcdc93d3c671..748f3a6e638f979b1342d00b20b836e4e920c5c4 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/vmcontentrepocontent.json
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/vmcontentrepocontent.json
@@ -2168,5 +2168,25 @@
     "repoName": "systemflowrepo",
     "url": "/system/flow/configurecrossproducts.vmfx",
     "vmid": "configurecrossproducts"
+  },
+  {
+    "repoName": "systemflowrepo",
+    "url": "/system/flow/vravainstallcertificate.vmfx",
+    "vmid": "vravainstallcertificate"
+  },
+  {
+    "repoName" : "systemflowrepo",
+    "url" : "/system/flow/lcmpspacksetting.vmfx",
+    "vmid" : "lcmpspacksetting"
+  },
+  {
+    "repoName" : "systemflowrepo",
+    "url" : "/system/flow/pspackinstall.vmfx",
+    "vmid" : "pspackinstall"
+  },
+  {
+    "repoName" : "systemflowrepo",
+    "url" : "/system/flow/pspackrefresh.vmfx",
+    "vmid" : "pspackrefresh"
   }
 ]
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/vmenginepropertyconfig.json b/vmware-configurations/vmware-common-config/src/main/resources/final/vmenginepropertyconfig.json
index b798037c42131750c190d058b717b325a201425d..158a9f875e3aba564a886067cea4c17b0479af51 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/vmenginepropertyconfig.json
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/vmenginepropertyconfig.json
@@ -344,8 +344,8 @@
 		"value": "1"
 	},
 	{
-		"key":"lcm.plugin.vidm.supportBundle.collection.ssh.timeout",
-		"value":"30000"
+		"key": "lcm.plugin.vidm.supportBundle.collection.ssh.timeout",
+		"value": "30000"
 	},
 	{
 		"key": "lcm.plugin.vidm.tenant.onboarding.prelude.oauth2client.prefixes",
@@ -399,6 +399,10 @@
 		"key": "lcm.patch.external.repo.path",
 		"value": "https://vrealize-updates.vmware.com/vrlcm-200/"
 	},
+	{
+		"key": "lcm.pspack.external.product.bundles.url",
+		"value": "/vrlcm/%s/policies/"
+	},
 	{
 		"key": "lcm.patch.product.json",
 		"value": "product.json"
@@ -414,5 +418,33 @@
 	{
 		"key": "lcm.agent.version",
 		"value": "1.2.0"
+	},
+	{
+		"key": "lcm.upgrade.notification.redirect.url",
+		"value": "/lcm/lcops/settings/system-upgrade"
+	},
+	{
+		"key": "lcm.patch.notification.redirect.url",
+		"value": "/lcm/lcops/settings/system-upgrade"
+	},
+	{
+		"key": "lcm.pspak.notification.redirect.url",
+		"value": "/lcm/lcops/settings/system-upgrade"
+	},
+	{
+		"key": "product.upgrade.notification.redirect.url",
+		"value": "/lcm/lcops/environments/%s"
+	},
+	{
+		"key": "product.health.notification.redirect.url",
+		"value": "/lcm/lcops/environments/%s"
+	},
+	{
+		"key": "environment.health.notification.redirect.url",
+		"value": "/lcm/lcops/environments/%s"
+	},
+	{
+		"key": "product.patch.notification.redirect.url",
+		"value": "/lcm/lcops/environments/%s"
 	}
 ]
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/vmfiles.json b/vmware-configurations/vmware-common-config/src/main/resources/final/vmfiles.json
index f2ecd85c69baa0e25a124399797e78b0f240f960..af06c3ad3610223e1fa987c74980ebe96253fd9d 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/vmfiles.json
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/vmfiles.json
@@ -1738,5 +1738,21 @@
     {
         "url" : "/lcm/crepo/api/content/upload/configurecrossproducts",
         "filename" : "/final/files/configurecrossproducts.vmf"
+    },
+    {
+        "url" : "/lcm/crepo/api/content/upload/vravainstallcertificate",
+        "filename" : "/final/files/vravainstallcertificate.vmf"
+    },
+    {
+        "url" : "/lcm/crepo/api/content/upload/lcmpspacksetting",
+        "filename" : "/final/files/lcmpspacksetting.vmf"
+    },
+    {
+        "url" : "/lcm/crepo/api/content/upload/pspackinstall",
+        "filename" : "/final/files/pspackinstall.vmf"
+    },
+    {
+        "url" : "/lcm/crepo/api/content/upload/pspackrefresh",
+        "filename" : "/final/files/pspackrefresh.vmf"
     }
 ]
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/vmproperty.json b/vmware-configurations/vmware-common-config/src/main/resources/final/vmproperty.json
index 7227ccc202051aac9c08e3bff832fe8095141919..5b30499e7e26cd9e2eef73ef33a63caaa6357a34 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/vmproperty.json
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/vmproperty.json
@@ -21950,5 +21950,133 @@
     "reference": "flowFile",
     "inputBy": "SYSTEM",
     "secured": "false"
+  },
+  {
+    "vmid": "vravainstallcertificate_flowVmid",
+    "value": "res:vravainstallcertificate_flowVmid",
+    "source": "vravainstallcertificate",
+    "reference": "flowVmid",
+    "inputBy": "SYSTEM",
+    "secured": "false"
+  },
+  {
+    "vmid": "vravainstallcertificate_flowName",
+    "value": "res:vravainstallcertificate_flowName",
+    "source": "vravainstallcertificate",
+    "reference": "flowName",
+    "inputBy": "SYSTEM",
+    "secured": "false"
+  },
+  {
+    "vmid": "vravainstallcertificate_flowGroup",
+    "value": "vravainstallcertificate",
+    "source": "vravainstallcertificate",
+    "reference": "flowGroup",
+    "inputBy": "SYSTEM",
+    "secured": "false"
+  },
+  {
+    "vmid": "vravainstallcertificate_flowFile",
+    "value": "ref:cr:url:/system/flow/vravainstallcertificate.vmfx",
+    "source": "vravainstallcertificate",
+    "reference": "flowFile",
+    "inputBy": "SYSTEM",
+    "secured": "false"
+  },
+  {
+    "vmid" : "lcmpspacksetting_flowVmid",
+    "value" : "res:lcmpspacksetting_flowVmid",
+    "source" : "lcmpspacksetting",
+    "reference" : "flowVmid",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "lcmpspacksetting_flowName",
+    "value" : "res:lcmpspacksetting_flowName",
+    "source" : "lcmpspacksetting",
+    "reference" : "flowName",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "lcmpspacksetting_flowGroup",
+    "value" : "/null",
+    "source" : "lcmpspacksetting",
+    "reference" : "flowGroup",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "lcmpspacksetting_flowFile",
+    "value" : "ref:cr:url:/system/flow/lcmpspacksetting.vmfx",
+    "source" : "lcmpspacksetting",
+    "reference" : "flowFile",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackinstall_flowVmid",
+    "value" : "res:pspackinstall_flowVmid",
+    "source" : "pspackinstall",
+    "reference" : "flowVmid",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackinstall_flowName",
+    "value" : "res:pspackinstall_flowName",
+    "source" : "pspackinstall",
+    "reference" : "flowName",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackinstall_flowGroup",
+    "value" : "/null",
+    "source" : "pspackinstall",
+    "reference" : "flowGroup",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackinstall_flowFile",
+    "value" : "ref:cr:url:/system/flow/pspackinstall.vmfx",
+    "source" : "pspackinstall",
+    "reference" : "flowFile",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackrefresh_flowVmid",
+    "value" : "res:pspackrefresh_flowVmid",
+    "source" : "pspackrefresh",
+    "reference" : "flowVmid",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackrefresh_flowName",
+    "value" : "res:pspackrefresh_flowName",
+    "source" : "pspackrefresh",
+    "reference" : "flowName",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackrefresh_flowGroup",
+    "value" : "/null",
+    "source" : "pspackrefresh",
+    "reference" : "flowGroup",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
+  },
+  {
+    "vmid" : "pspackrefresh_flowFile",
+    "value" : "ref:cr:url:/system/flow/pspackrefresh.vmfx",
+    "source" : "pspackrefresh",
+    "reference" : "flowFile",
+    "inputBy" : "SYSTEM",
+    "secured" : "false"
   }
 ]
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/vmrequestdefinition.json b/vmware-configurations/vmware-common-config/src/main/resources/final/vmrequestdefinition.json
index 2b62b86403d5638a57c32242535ba0faca131399..4b59d505cb18e7095221d4e92376edc5f0f9ffca 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/vmrequestdefinition.json
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/vmrequestdefinition.json
@@ -897,6 +897,48 @@
         "postProcessor": "",
         "preProcessor": ""
     },
+    {
+        "executionPlanner": "com.vmware.vrealize.lcm.requestservice.core.planner.GenericEnvironmentPlanner",
+        "executionType": "asynchronous",
+        "inputsList": [
+            {
+                "key": "",
+                "type": ""
+            }
+        ],
+        "name": "lcmpspacksetting",
+        "outputsList": [],
+        "postProcessor": "",
+        "preProcessor": ""
+    },
+    {
+        "executionPlanner": "com.vmware.vrealize.lcm.requestservice.core.planner.GenericEnvironmentPlanner",
+        "executionType": "asynchronous",
+        "inputsList": [
+            {
+                "key": "",
+                "type": ""
+            }
+        ],
+        "name": "pspackinstall",
+        "outputsList": [],
+        "postProcessor": "",
+        "preProcessor": ""
+    },
+    {
+        "executionPlanner": "com.vmware.vrealize.lcm.requestservice.core.planner.GenericEnvironmentPlanner",
+        "executionType": "asynchronous",
+        "inputsList": [
+            {
+                "key": "",
+                "type": ""
+            }
+        ],
+        "name": "pspackrefresh",
+        "outputsList": [],
+        "postProcessor": "",
+        "preProcessor": ""
+    },
     {
         "executionPlanner": "com.vmware.vrealize.lcm.requestservice.core.planner.GenericEnvironmentPlanner",
         "executionType": "asynchronous",
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/vmresource.json b/vmware-configurations/vmware-common-config/src/main/resources/final/vmresource.json
index 6ad9f2d2ab6bdc772025870707d2f47563eaed18..11c5e229e6ab44c1c31e027854f1a3a22a6d1d26 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/vmresource.json
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/vmresource.json
@@ -7118,5 +7118,41 @@
     "children": [],
     "properties": [],
     "propertyMap": {}
+  },
+  {
+    "vmid": "vravainstallcertificate",
+    "source": "systemflows",
+    "name": "vravainstallcertificate",
+    "reference": "flow",
+    "children": [],
+    "properties": [],
+    "propertyMap": {}
+  },
+  {
+    "vmid" : "lcmpspacksetting",
+    "source" : "systemflows",
+    "name" : "lcmpspacksetting",
+    "reference" : "flow",
+    "children" : [ ],
+    "properties" : [ ],
+    "propertyMap" : { }
+  },
+  {
+    "vmid" : "pspackinstall",
+    "source" : "systemflows",
+    "name" : "pspackinstall",
+    "reference" : "flow",
+    "children" : [ ],
+    "properties" : [ ],
+    "propertyMap" : { }
+  },
+  {
+    "vmid" : "pspackrefresh",
+    "source" : "systemflows",
+    "name" : "pspackrefresh",
+    "reference" : "flow",
+    "children" : [ ],
+    "properties" : [ ],
+    "propertyMap" : { }
   }
 ]
diff --git a/vmware-configurations/vmware-common-config/src/main/resources/final/vmsettingsconfig.json b/vmware-configurations/vmware-common-config/src/main/resources/final/vmsettingsconfig.json
index 5de0deabbbde7f938615647e11a2fcdc5ce46836..fc9ce57e7b0b1a5234b541a0dd3b4b012f3c1857 100644
--- a/vmware-configurations/vmware-common-config/src/main/resources/final/vmsettingsconfig.json
+++ b/vmware-configurations/vmware-common-config/src/main/resources/final/vmsettingsconfig.json
@@ -62,6 +62,15 @@
 		"detailedDescription": "",
 		"value": ""
 	},
+	{
+		"vmid": "pspacksetting",
+		"name": "pspacksetting",
+		"packageName": "",
+		"dataType": "Request",
+		"description": "Product Support Pack Settings",
+		"detailedDescription": "",
+		"value": ""
+	},
 	{
 		"vmid": "patchdownload",
 		"name": "patchdownload",
